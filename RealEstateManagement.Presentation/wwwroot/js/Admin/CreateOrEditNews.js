const API_New_BASE_URL = "https://localhost:7031/api/News";
const API_IMAGES_BASE_URL = "https://localhost:7031/api/NewImage";

const newsId = window.ViewBag && window.ViewBag.NewsId ? window.ViewBag.NewsId : null;
const form = document.getElementById('newsForm');
const imageInput = document.getElementById('newsImage');
const primaryImagePreview = document.getElementById('primaryImagePreview');
const contentEditor = document.getElementById('content');
const contentImagePreview = document.getElementById('contentImagePreview');

// Bi·∫øn l∆∞u tr·ªØ v·ªã tr√≠ con tr·ªè v√† file ƒë∆∞·ª£c ch·ªçn
let savedRange = null;
let selectedContentFile = null;

// N·∫øu c√≥ id, load chi ti·∫øt b√†i b√°o
window.addEventListener('DOMContentLoaded', async () => {
    const id = getNewsId();
    if (id) {
        document.getElementById('formTitle').textContent = 'S·ª≠a b√†i b√°o';
        try {
            const res = await fetch(`${API_New_BASE_URL}/${id}`);
            if (!res.ok) throw new Error('Kh√¥ng t√¨m th·∫•y b√†i b√°o');
            const news = await res.json();
            // Set c√°c field v·ªõi validation
            document.getElementById('newsId').value = news.id;
            document.getElementById('title').value = news.title || '';
            document.getElementById('summary').value = news.summary || '';
            document.getElementById('authorName').value = news.authorName || '';
            document.getElementById('source').value = news.source || '';
            
            // Load n·ªôi dung v√† ch√®n ·∫£nh t·ª´ imageUrl
            contentEditor.innerHTML = await loadContentWithImages(news.id, news.content);
            
            // Set status v·ªõi ki·ªÉm tra gi√° tr·ªã
            const statusSelect = document.getElementById('status');
            console.log('Status t·ª´ API:', news.status, typeof news.status);
            
            // ƒê·∫£m b·∫£o status l√† s·ªë v√† c√≥ gi√° tr·ªã h·ª£p l·ªá
            let statusValue = '0'; // Default l√† Nh√°p
            if (news.status !== null && news.status !== undefined) {
                const status = parseInt(news.status);
                if (!isNaN(status) && (status === 0 || status === 1)) {
                    statusValue = status.toString();
                }
            }
            
            statusSelect.value = statusValue;
            console.log('Status ƒë√£ set:', statusSelect.value);
            
            // Trigger change event ƒë·ªÉ ƒë·∫£m b·∫£o UI c·∫≠p nh·∫≠t
            statusSelect.dispatchEvent(new Event('change'));
            
            // ƒê·∫£m b·∫£o select ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng
            setTimeout(() => {
                console.log('Status sau khi set:', statusSelect.value, statusSelect.selectedIndex);
                console.log('Options:', Array.from(statusSelect.options).map(opt => opt.value));
            }, 100);
            
            // Log ƒë·ªÉ debug
            console.log('D·ªØ li·ªáu ƒë√£ load:', {
                id: news.id,
                title: news.title,
                summary: news.summary,
                authorName: news.authorName,
                source: news.source,
                status: statusValue,
                content: news.content ? 'C√≥ n·ªôi dung' : 'Kh√¥ng c√≥ n·ªôi dung'
            });
            
            // Hi·ªÉn th·ªã ·∫£nh primary n·∫øu c√≥
            const primaryImage = news.images && news.images.find(img => img.isPrimary);
            if (primaryImage) {
                const fullImageUrl = getFullImageUrl(primaryImage.imageUrl);
                const container = document.getElementById('primaryImageContainer');
                container.innerHTML = `
                    <div class="flex items-center gap-4">
                        <img src="${fullImageUrl}" alt="·∫¢nh ƒë·∫°i di·ªán" class="max-w-xs rounded" />
                        <div class="text-sm text-gray-600">
                            <p><strong>·∫¢nh hi·ªán t·∫°i:</strong> ${primaryImage.imageUrl.split('/').pop()}</p>
                            <p class="text-orange-600 font-semibold">üåü ·∫¢nh ƒë·∫°i di·ªán hi·ªán t·∫°i</p>
                        </div>
                    </div>
                `;
                primaryImagePreview.style.display = 'block';
            }
        } catch (err) {
            console.error('L·ªói khi load d·ªØ li·ªáu:', err);
            Swal.fire('L·ªói', err.message, 'error');
        }
    } else {
        document.getElementById('formTitle').textContent = 'Th√™m b√†i b√°o';
    }
});

// H√†m t·∫£i n·ªôi dung v√† ch√®n ·∫£nh t·ª´ imageUrl
async function loadContentWithImages(newId, content) {
    if (!content) return '';
    try {
        const res = await fetch(`${API_IMAGES_BASE_URL}?newId=${newId}`);
        if (!res.ok) throw new Error('Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch ·∫£nh');
        const images = await res.json();
        let htmlContent = content;
        
        // Kh·ªüi t·∫°o danh s√°ch ·∫£nh hi·ªán t·∫°i
        currentImagesInContent.clear();
        
        images.forEach(image => {
            if (!image.isPrimary) { // Ch·ªâ ch√®n ·∫£nh kh√¥ng ph·∫£i primary v√†o content
                const fullImageUrl = getFullImageUrl(image.imageUrl);
                const imgTag = `<img src="${fullImageUrl}" style="max-width: 100%; height: auto; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);" data-image-url="${image.imageUrl}" />`;
                htmlContent = htmlContent.replace(`[image:${image.id}]`, imgTag);
                currentImagesInContent.add(fullImageUrl);
            }
        });
        
        // Fix t·∫•t c·∫£ ·∫£nh trong content
        const fixedContent = fixImagesInContent(htmlContent);
        
        // C·∫≠p nh·∫≠t danh s√°ch ·∫£nh hi·ªán t·∫°i sau khi fix
        setTimeout(() => {
            const images = contentEditor.querySelectorAll('img');
            currentImagesInContent.clear();
            images.forEach(img => {
                const src = img.getAttribute('src');
                const dataUrl = img.getAttribute('data-image-url');
                
                if (src && (src.includes('/uploads/') || src.startsWith('http'))) {
                    currentImagesInContent.add(src);
                }
                if (dataUrl && dataUrl.includes('/uploads/')) {
                    currentImagesInContent.add(dataUrl);
                }
            });
            console.log('Danh s√°ch ·∫£nh hi·ªán t·∫°i:', Array.from(currentImagesInContent));
        }, 100);
        
        return fixedContent;
    } catch (err) {
        console.error('L·ªói t·∫£i ·∫£nh:', err);
        return fixImagesInContent(content);
    }
}

// Helper function ƒë·ªÉ t·∫°o URL ƒë·∫ßy ƒë·ªß
function getFullImageUrl(imageUrl) {
    if (!imageUrl) return '';
    
    // N·∫øu ƒë√£ l√† URL ƒë·∫ßy ƒë·ªß th√¨ return lu√¥n
    if (imageUrl.startsWith('http')) {
        return imageUrl;
}

    // N·∫øu l√† relative path th√¨ th√™m base URL c·ªßa API
    const API_BASE = "https://localhost:7031";
    return API_BASE + imageUrl;
}

// Fix URL ·∫£nh trong content HTML
function fixImagesInContent(content) {
    if (!content) return content;
    
    // T√¨m t·∫•t c·∫£ th·∫ª img v√† update src
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = content;
    
    const images = tempDiv.querySelectorAll('img');
    images.forEach(img => {
        const currentSrc = img.getAttribute('src');
        if (currentSrc && !currentSrc.startsWith('http')) {
            const fullUrl = getFullImageUrl(currentSrc);
            img.setAttribute('src', fullUrl);
            img.setAttribute('onerror', 'this.style.display="none"');
        }
    });
    
    return tempDiv.innerHTML;
}

// Preview ·∫£nh ƒë·∫°i di·ªán (Primary)
function previewPrimaryImage() {
    const file = imageInput.files[0];
    if (!file) return;

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (t·ªëi ƒëa 5MB)
    if (file.size > 5 * 1024 * 1024) {
        Swal.fire('L·ªói', 'K√≠ch th∆∞·ªõc file qu√° l·ªõn. T·ªëi ƒëa 5MB.', 'error');
        imageInput.value = '';
        return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
    if (!allowedTypes.includes(file.type)) {
        Swal.fire('L·ªói', 'Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF).', 'error');
        imageInput.value = '';
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function (e) {
        showPrimaryImagePreview(e.target.result, file);
    };
    reader.readAsDataURL(file);
}

function showPrimaryImagePreview(imageSrc, file) {
    const container = document.getElementById('primaryImageContainer');
    container.innerHTML = `
        <div class="flex items-center gap-4">
            <img src="${imageSrc}" alt="·∫¢nh ƒë·∫°i di·ªán" class="max-w-xs rounded" />
            <div class="text-sm text-gray-600">
                <p><strong>T√™n file:</strong> ${file.name}</p>
                <p><strong>K√≠ch th∆∞·ªõc:</strong> ${(file.size / 1024 / 1024).toFixed(2)} MB</p>
                <p><strong>ƒê·ªãnh d·∫°ng:</strong> ${file.type}</p>
                <p class="text-orange-600 font-semibold">üåü ·∫¢nh n√†y s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u l√†m ·∫£nh ch√≠nh</p>
            </div>
        </div>
    `;
    primaryImagePreview.style.display = 'block';
}

function cancelPrimaryImagePreview() {
    primaryImagePreview.style.display = 'none';
    imageInput.value = '';
}

// Preview ·∫£nh content
function previewContentImage() {
    const fileInput = document.getElementById('contentImage');
    const file = fileInput.files[0];
    if (!file) return;

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (t·ªëi ƒëa 5MB)
    if (file.size > 5 * 1024 * 1024) {
        Swal.fire('L·ªói', 'K√≠ch th∆∞·ªõc file qu√° l·ªõn. T·ªëi ƒëa 5MB.', 'error');
        return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
    if (!allowedTypes.includes(file.type)) {
        Swal.fire('L·ªói', 'Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF).', 'error');
        return;
    }

    // L∆∞u file ƒë∆∞·ª£c ch·ªçn
    selectedContentFile = file;
    
    // L∆∞u v·ªã tr√≠ con tr·ªè hi·ªán t·∫°i
    saveSelection();
    
    // Hi·ªÉn th·ªã preview
    const reader = new FileReader();
    reader.onload = function (e) {
        const container = document.getElementById('contentImageContainer');
        container.innerHTML = `
            <div class="flex items-center gap-4">
                <img src="${e.target.result}" alt="Preview ·∫£nh content" class="max-w-xs rounded" />
                <div class="text-sm text-gray-600">
                    <p><strong>T√™n file:</strong> ${file.name}</p>
                    <p><strong>K√≠ch th∆∞·ªõc:</strong> ${(file.size / 1024 / 1024).toFixed(2)} MB</p>
                    <p><strong>ƒê·ªãnh d·∫°ng:</strong> ${file.type}</p>
                </div>
            </div>
        `;
        contentImagePreview.classList.add('show');
    };
    reader.readAsDataURL(file);
}

function cancelContentImagePreview() {
    contentImagePreview.classList.remove('show');
    selectedContentFile = null;
    document.getElementById('contentImage').value = '';
}

// L∆∞u v·ªã tr√≠ con tr·ªè
function saveSelection() {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
        savedRange = selection.getRangeAt(0).cloneRange();
}
}

// Kh√¥i ph·ª•c v·ªã tr√≠ con tr·ªè
function restoreSelection() {
    if (savedRange) {
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(savedRange);
    }
}

// Ch√®n ·∫£nh v√†o v·ªã tr√≠ con tr·ªè
async function insertImageAtCursor() {
    if (!selectedContentFile) return;

    let newId = getNewsId();
    if (!newId) {
        // N·∫øu ch∆∞a c√≥ newId, t·∫°o b√†i b√°o tr∆∞·ªõc
        const title = document.getElementById('title').value.trim() || 'T·∫°m th·ªùi';
        const dto = { title, summary: '', content: '', authorName: '', source: '', status: 0 };
        try {
            const res = await fetch(API_New_BASE_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dto)
            });
            if (!res.ok) throw new Error('T·∫°o b√†i b√°o t·∫°m th·∫•t b·∫°i');
            const data = await res.json();
            newId = data.id;
            document.getElementById('newsId').value = newId;
        } catch (err) {
            Swal.fire('L·ªói', 'T·∫°o b√†i b√°o t·∫°m th·∫•t b·∫°i: ' + err.message, 'error');
            return;
        }
    }

    try {
        // Upload file
        const formData = new FormData();
        formData.append('file', selectedContentFile);
        const uploadRes = await fetch(`${API_IMAGES_BASE_URL}/upload?newId=${newId}`, {
            method: 'POST',
            body: formData
        });
        if (!uploadRes.ok) throw new Error('Upload ·∫£nh th·∫•t b·∫°i: ' + uploadRes.statusText);
        const uploadData = await uploadRes.json();
        const imageUrl = uploadData.imageUrl;

        // L∆∞u th√¥ng tin ·∫£nh v√†o API (kh√¥ng ph·∫£i primary)
        await fetch(`${API_IMAGES_BASE_URL}?newId=${newId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ imageUrl, isPrimary: false, order: 0 })
        });

        // Kh√¥i ph·ª•c v·ªã tr√≠ con tr·ªè v√† ch√®n ·∫£nh
        restoreSelection();
        
        const img = document.createElement('img');
        // S·ª≠ d·ª•ng URL ƒë·∫ßy ƒë·ªß ƒë·ªÉ ƒë·∫£m b·∫£o ·∫£nh hi·ªÉn th·ªã
        img.src = getFullImageUrl(imageUrl);
        img.style.maxWidth = '100%';
        img.style.height = 'auto';
        img.style.margin = '10px 0';
        img.style.borderRadius = '4px';
        img.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
        img.setAttribute('data-image-url', imageUrl); // L∆∞u URL g·ªëc ƒë·ªÉ theo d√µi

        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            range.deleteContents();
            range.insertNode(img);
            range.collapse(false);
            selection.removeAllRanges();
            selection.addRange(range);
        } else {
            contentEditor.appendChild(img);
        }

        // L∆∞u ·∫£nh c≈© tr∆∞·ªõc khi th√™m ·∫£nh m·ªõi
        const oldImages = new Set(currentImagesInContent);
        
        // Th√™m ·∫£nh c≈© v√†o danh s√°ch ƒë·ªÉ x√≥a
        oldImages.forEach(img => {
            if (img !== getFullImageUrl(imageUrl)) {
                oldImagesToDelete.add(img);
            }
        });
        
        // Th√™m ·∫£nh m·ªõi v√†o danh s√°ch theo d√µi
        currentImagesInContent.add(getFullImageUrl(imageUrl));

        // ·∫®n preview v√† reset
        cancelContentImagePreview();
        
        // Focus l·∫°i v√†o editor ƒë·ªÉ user c√≥ th·ªÉ ti·∫øp t·ª•c vi·∫øt
        contentEditor.focus();
        
        // Ki·ªÉm tra v√† x√≥a ·∫£nh c≈© sau khi ch√®n ·∫£nh m·ªõi
        setTimeout(() => {
            checkForDeletedImages();
            // X√≥a ·∫£nh c≈© n·∫øu c√≥
            deleteOldImages();
        }, 100);
        
        // Th√¥ng b√°o th√†nh c√¥ng
        Swal.fire({
            icon: 'success',
            title: 'Th√†nh c√¥ng',
            text: '·∫¢nh ƒë√£ ƒë∆∞·ª£c ch√®n v√†o n·ªôi dung',
            timer: 1500,
            showConfirmButton: false
        });
        
        // Log ƒë·ªÉ debug
        console.log('ƒê√£ ch√®n ·∫£nh m·ªõi:', imageUrl);
        console.log('Danh s√°ch ·∫£nh hi·ªán t·∫°i:', Array.from(currentImagesInContent));
    } catch (err) {
        Swal.fire('L·ªói', 'Upload ·∫£nh th·∫•t b·∫°i: ' + err.message, 'error');
    }
}

// L∆∞u v·ªã tr√≠ con tr·ªè khi click v√†o editor
contentEditor.addEventListener('mouseup', saveSelection);
contentEditor.addEventListener('keyup', saveSelection);

// Theo d√µi khi user x√≥a ·∫£nh trong content editor
contentEditor.addEventListener('input', function() {
    // Ki·ªÉm tra xem c√≥ ·∫£nh n√†o b·ªã x√≥a kh√¥ng
    setTimeout(checkForDeletedImages, 50);
});

// Theo d√µi khi user paste ho·∫∑c delete
contentEditor.addEventListener('paste', function() {
    setTimeout(checkForDeletedImages, 100);
});

contentEditor.addEventListener('keydown', function(e) {
    if (e.key === 'Delete' || e.key === 'Backspace') {
        setTimeout(checkForDeletedImages, 50);
    }
    // Theo d√µi khi user undo/redo
    if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'y')) {
        setTimeout(checkForDeletedImages, 100);
    }
});

// Theo d√µi khi user cut
contentEditor.addEventListener('cut', function() {
    setTimeout(checkForDeletedImages, 50);
});

// S·ª≠ d·ª•ng MutationObserver ƒë·ªÉ theo d√µi thay ƒë·ªïi DOM
const observer = new MutationObserver(function(mutations) {
    let hasImageChanges = false;
    
    mutations.forEach(function(mutation) {
        // Ki·ªÉm tra n·∫øu c√≥ ·∫£nh b·ªã x√≥a
        if (mutation.type === 'childList') {
            mutation.removedNodes.forEach(function(node) {
                if (node.nodeType === Node.ELEMENT_NODE && node.tagName === 'IMG') {
                    console.log('Ph√°t hi·ªán ·∫£nh b·ªã x√≥a qua MutationObserver:', node.src);
                    hasImageChanges = true;
                }
            });
        }
    });
    
    if (hasImageChanges) {
        setTimeout(checkForDeletedImages, 50);
    }
});

// B·∫Øt ƒë·∫ßu theo d√µi
observer.observe(contentEditor, {
    childList: true,
    subtree: true
});

// Bi·∫øn l∆∞u tr·ªØ danh s√°ch ·∫£nh hi·ªán t·∫°i trong content
let currentImagesInContent = new Set();

// Bi·∫øn l∆∞u tr·ªØ ·∫£nh c≈© ƒë·ªÉ x√≥a khi thay ƒë·ªïi
let oldImagesToDelete = new Set();

// H√†m ki·ªÉm tra ·∫£nh b·ªã x√≥a
function checkForDeletedImages() {
    const images = contentEditor.querySelectorAll('img');
    const currentImageUrls = new Set();
    
    images.forEach(img => {
        const src = img.getAttribute('src');
        const dataUrl = img.getAttribute('data-image-url');
        
        // S·ª≠ d·ª•ng c·∫£ src v√† data-image-url ƒë·ªÉ theo d√µi
        if (src && (src.includes('/uploads/') || src.startsWith('http'))) {
            currentImageUrls.add(src);
        }
        if (dataUrl && dataUrl.includes('/uploads/')) {
            currentImageUrls.add(dataUrl);
        }
    });
    
    console.log('·∫¢nh hi·ªán t·∫°i trong editor:', Array.from(currentImageUrls));
    console.log('·∫¢nh ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥:', Array.from(currentImagesInContent));
    
    // T√¨m ·∫£nh ƒë√£ b·ªã x√≥a
    const deletedImages = Array.from(currentImagesInContent).filter(url => !currentImageUrls.has(url));
    
    console.log('·∫¢nh b·ªã x√≥a:', deletedImages);
    
    // X√≥a ·∫£nh kh·ªèi database n·∫øu c√≥
    deletedImages.forEach(imageUrl => {
        console.log('Ph√°t hi·ªán ·∫£nh b·ªã x√≥a:', imageUrl);
        deleteImageFromDatabase(imageUrl);
    });
    
    // C·∫≠p nh·∫≠t danh s√°ch ·∫£nh hi·ªán t·∫°i
    currentImagesInContent = currentImageUrls;
}

// H√†m x√≥a ·∫£nh kh·ªèi database
async function deleteImageFromDatabase(imageUrl) {
    const newsId = getNewsId();
    if (!newsId) return;
    
    try {
        console.log('B·∫Øt ƒë·∫ßu x√≥a ·∫£nh:', imageUrl);
        
        // L·∫•y danh s√°ch ·∫£nh ƒë·ªÉ t√¨m imageId
        const res = await fetch(`${API_IMAGES_BASE_URL}?newId=${newsId}`);
        if (!res.ok) {
            console.log('Kh√¥ng th·ªÉ l·∫•y danh s√°ch ·∫£nh');
            return;
        }
        
        const images = await res.json();
        console.log('Danh s√°ch ·∫£nh t·ª´ server:', images);
        
        // T√¨m ·∫£nh b·∫±ng c√°ch so s√°nh URL (c·∫£ relative v√† full URL)
        const image = images.find(img => {
            const fullUrl = getFullImageUrl(img.imageUrl);
            const matches = fullUrl === imageUrl || img.imageUrl === imageUrl;
            console.log(`So s√°nh: ${fullUrl} vs ${imageUrl} = ${matches}`);
            return matches;
        });
        
        if (image && !image.isPrimary) {
            console.log('T√¨m th·∫•y ·∫£nh ƒë·ªÉ x√≥a:', image);
            
            // X√≥a ·∫£nh kh·ªèi database
            const deleteRes = await fetch(`${API_IMAGES_BASE_URL}/${image.id}?newId=${newsId}`, {
                method: 'DELETE',
                credentials: 'include'
            });
            
            if (deleteRes.ok) {
                console.log(`ƒê√£ x√≥a ·∫£nh kh·ªèi database: ${imageUrl}`);
                
                // X√≥a file v·∫≠t l√Ω n·∫øu c√≥ th·ªÉ
                try {
                    const fileDeleteRes = await fetch(`${API_IMAGES_BASE_URL}/delete-file`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ imageUrl: image.imageUrl }),
                        credentials: 'include'
                    });
                    
                    if (fileDeleteRes.ok) {
                        console.log(`ƒê√£ x√≥a file v·∫≠t l√Ω: ${image.imageUrl}`);
                    } else {
                        console.log('Kh√¥ng th·ªÉ x√≥a file v·∫≠t l√Ω');
                    }
                } catch (fileErr) {
                    console.log('L·ªói khi x√≥a file v·∫≠t l√Ω:', fileErr);
                }
            } else {
                console.log('Kh√¥ng th·ªÉ x√≥a ·∫£nh kh·ªèi database');
            }
        } else {
            console.log('Kh√¥ng t√¨m th·∫•y ·∫£nh ho·∫∑c ·∫£nh l√† primary:', image);
        }
    } catch (err) {
        console.error('L·ªói khi x√≥a ·∫£nh:', err);
    }
}

// H√†m x√≥a ·∫£nh c≈© khi user thay ƒë·ªïi
async function deleteOldImages() {
    if (oldImagesToDelete.size === 0) return;
    
    console.log('B·∫Øt ƒë·∫ßu x√≥a ·∫£nh c≈©:', Array.from(oldImagesToDelete));
    
    for (const imageUrl of oldImagesToDelete) {
        await deleteImageFromDatabase(imageUrl);
    }
    
    oldImagesToDelete.clear();
}

// Ch·ª©c nƒÉng ƒë·ªãnh d·∫°ng vƒÉn b·∫£n
function formatText(command) {
    document.execCommand(command, false, null);
    contentEditor.focus();
}

function changeFontSize(size) {
    if (size) {
        document.execCommand('fontSize', false, '7');
        const selection = window.getSelection();
        if (selection.rangeCount) {
            const range = selection.getRangeAt(0);
            const span = document.createElement('span');
            span.style.fontSize = size;
            try {
                range.surroundContents(span);
            } catch (e) {
                // N·∫øu kh√¥ng th·ªÉ surround, insert text v·ªõi style
                const textNode = document.createTextNode(selection.toString());
                span.appendChild(textNode);
                range.deleteContents();
                range.insertNode(span);
            }
        }
        contentEditor.focus();
    }
}

// Submit form
form.onsubmit = async function (e) {
    e.preventDefault();
    const id = document.getElementById('newsId').value;
    const title = document.getElementById('title').value.trim();
    const summary = document.getElementById('summary').value.trim();
    const content = contentEditor.innerHTML.trim();
    const authorName = document.getElementById('authorName').value.trim();
    const source = document.getElementById('source').value.trim();
    const status = parseInt(document.getElementById('status').value);
    const file = imageInput.files[0];

    if (!title || !content) {
        Swal.fire('L·ªói', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung', 'error');
        return;
    }

    let imageUrl = '';
    let newsId = id;

    // N·∫øu ch∆∞a c√≥ id, t·∫°o b√†i b√°o tr∆∞·ªõc
    if (!id) {
        const dto = { title, summary, content, authorName, source, status: 0 };
    try {
            const res = await fetch(API_New_BASE_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dto)
            });
            if (!res.ok) throw new Error('T·∫°o b√†i b√°o th·∫•t b·∫°i');
            const data = await res.json();
            newsId = data.id;
        } catch (err) {
            Swal.fire('L·ªói', err.message, 'error');
            return;
        }
    }

    // Upload ·∫£nh ƒë·∫°i di·ªán n·∫øu c√≥
    if (file) {
        try {
            const formData = new FormData();
            formData.append('file', file);
            const uploadRes = await fetch(`${API_IMAGES_BASE_URL}/upload?newId=${newsId}`, {
                method: 'POST',
                body: formData
            });
            if (!uploadRes.ok) throw new Error('Upload ·∫£nh ƒë·∫°i di·ªán th·∫•t b·∫°i');
            const uploadData = await uploadRes.json();
            imageUrl = uploadData.imageUrl;

            // L∆∞u ·∫£nh ƒë·∫°i di·ªán v·ªõi isPrimary = true
            await fetch(`${API_IMAGES_BASE_URL}?newId=${newsId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ imageUrl, isPrimary: true, order: 0 })
            });
        } catch (err) {
            Swal.fire('L·ªói', err.message, 'error');
            return;
        }
    }

    // C·∫≠p nh·∫≠t b√†i b√°o
    const updateDto = { id: parseInt(newsId), title, summary, content, authorName, source, isPublished: status === 1 };
    try {
        const res = await fetch(`${API_New_BASE_URL}/${newsId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updateDto)
        });
        if (!res.ok) throw new Error('C·∫≠p nh·∫≠t b√†i b√°o th·∫•t b·∫°i');

        Swal.fire('Th√†nh c√¥ng', 'L∆∞u b√†i b√°o th√†nh c√¥ng', 'success').then(() => {
            window.location.href = '/Admin/NewsManagement';
        });
    } catch (err) {
        Swal.fire('L·ªói', err.message, 'error');
    }
};

function getNewsId() {
    const id = document.getElementById('newsId').value;
    if (id) return id;
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id');
}
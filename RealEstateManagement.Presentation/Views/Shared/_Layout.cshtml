<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />

    <title>RealEstate</title>
    @*     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script> *@
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/authService.js" asp-append-version="true"></script>
    <script src="~/js/postPropertyService.js"></script>
    <script src="~/js/helper.js" asp-append-version="true"></script>
    <style>
        input[type="range"]::-webkit-slider-thumb {
            appearance: none;
            height: 16px;
            width: 16px;
            background-color: #06b6d4;
            border: 3px solid #000;
            border-radius: 50%;
            cursor: pointer;
            pointer-events: all;
        }

        input[type="range"]::-moz-range-thumb {
            height: 16px;
            width: 16px;
            background-color: #06b6d4;
            border: 3px solid #000;
            border-radius: 50%;
            cursor: pointer;
            pointer-events: all;
        }
    </style>
</head>
<body>
    <header class="border-b" style="background-color:white;width:100%">
        <div class="w-full px-4 py-4 flex items-center justify-between">
            <div class="flex items-center" style="cursor:pointer" onclick="window.location.href='/'">
                <h1 class="text-xl font-bold">
                    <span class="text-blue-700">RealEstate</span>
                </h1>
            </div>
            <div class="relative w-full max-w-md mx-auto ml-6 flex">
                <input id="province-search" type="search" placeholder="Tìm tỉnh thành..."
                       class="w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />

                <div id="dropdown" style="top:100%" class="absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg max-h-80 overflow-y-auto hidden">
                    <div class="p-4">
                        <div class="p-4 border-t">
                            <p class="font-semibold text-sm text-gray-600 mb-2">Tất cả tỉnh thành</p>
                            <div id="province-list" class="grid grid-cols-3 gap-2 text-sm">
                            </div>
                        </div>
                    </div>
                </div>

                <div id="dropdown2" style="height:25.3rem;top:100%" class="dropdown2 absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg hidden">
                    <div class="p-4">
                        <div class="p-4 border-t">
                            <input id="search-location-input"
                                   type="search"
                                   placeholder="Nhập tối đa 5 địa điểm"
                                   class="w-full border px-4 py-2 rounded-md mb-4 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" />
                            <p class="font-semibold text-sm text-gray-600 mb-2">Địa điểm đã chọn</p>
                            <div id="location-selected-list" class="flex flex-wrap gap-2">
                            </div>
                            <p class="font-semibold text-sm text-gray-600 mb-2 mt-2">Tất cả địa điểm</p>
                            <div id="location-list" style="max-height:15rem;left:0" class="absolute z-10 mt-1 w-full bg-white overflow-y-auto">
                            </div>
                        </div>
                    </div>
                </div>
                <button style="width:9rem" id="search-btn" onclick="searchLocationInput()"
                        class="bg-orange-500 ml-2 text-black font-medium px-4 py-2 rounded-md">
                    Tìm kiếm
                </button>
            </div>

            <div class="flex flex-grow mx-6 items-center">
                <div style="display:none" class="flex items-center bg-gray-100 rounded-full px-3 py-1 w-full max-w-md">
                    <i class="fas fa-map-marker-alt text-gray-500 mr-2"></i>
                    <input type="button" onclick="showFilterPopup('search-popup')" value="Toàn quốc " id="searchInput" class="input-bootstrap bg-transparent outline-none w-full text-left text-sm" />
                </div>
                <button onclick="showFilterPopup('filter-popup')" class="ml-2 border rounded-full px-3 py-1 text-sm hover:bg-gray-100">
                    <i class="fas fa-filter mr-1"></i> Bộ lọc
                </button>
            </div>

            <div class="flex items-center space-x-4">
                <a href="#" onclick="getFavoriteList(event)" class="text-gray-700 hover:text-blue-600"><i class="far fa-heart mr-1"></i> Tin đã lưu</a>

                <!-- Authenticated User -->
                <div id="userProfileNavItem" style="display: none;" class="flex items-center space-x-4">
                    <a href="/Chat/Index" class="text-gray-700 hover:text-blue-600"><i class="fas fa-comment-dots"></i> Tin nhắn</a>
                    <a href="/Profile" id="userProfileLink" class="text-gray-700 hover:text-blue-600"></a>
                    <a href="#" onclick="handleLogout(event)" class="text-gray-700 hover:text-blue-600"><i class="fas fa-sign-out-alt mr-1"></i> Đăng xuất</a>
                </div>

                <!-- Unauthenticated User -->
                <div id="authNavItems">
                    <a href="/Auth/Register" class="text-gray-700 hover:text-blue-600"><i class="fas fa-user-plus mr-1"></i> Đăng ký</a>
                    <a href="/Auth/Login" class="text-gray-700 hover:text-blue-600"><i class="fas fa-sign-in-alt mr-1"></i> Đăng nhập</a>

                </div>


                <a href="#" onclick="createProperty(event)" class="bg-orange-500 hover:bg-orange-600 text-white font-semibold px-4 py-1 rounded-full text-sm"><i class="fas fa-pen-alt mr-1"></i> Đăng tin</a>
            </div>
        </div>

        <nav class="border-b border-gray-200 shadow-sm">
            <div class="container mx-auto px-4">
                <ul class="flex space-x-6 text-base font-medium pt-4">

                    <li><a href="/?type=room" id="room" class="nav-link border-b-2 pb-1 border-gray-200">Phòng trọ</a></li>
                    <li><a href="/?type=house" id="house" class="nav-link border-b-2 pb-1 border-gray-200">Nhà nguyên căn</a></li>
                    <li><a href="/?type=apartment" id="apartment" class="nav-link border-b-2 pb-1 border-gray-200">Căn hộ chung cư</a></li>
                </ul>
            </div>
        </nav>

    </header>
    <main class=" mx-auto px-4 py-6" style="margin-right:14rem !important;margin-left:14rem !important">
        @RenderBody()
    </main>
    <!-- Popup -->
    <div id="filter-popup" class="hidden fixed inset-0 bg-black/30 flex items-center justify-center z-50">
        <div class="bg-white rounded-2xl w-full max-w-lg shadow-lg">

            <div class="sticky top-0 bg-white z-10 px-4 pt-4 pb-3 rounded-t-lg shadow-sm border-b mb-2">
                <div class="flex justify-between items-center">
                    <h2 class="text-lg font-semibold">Bộ lọc</h2>
                    <button onclick="hideFilterPopup('filter-popup')" class="text-2xl text-gray-500 hover:text-red-500">&times;</button>
                </div>
            </div>

            <div class="px-4 overflow-y-auto h-[60vh]">
                <div style="display:none" class="mb-6">
                    <h3 class="font-semibold mb-2">Lọc theo khu vực</h3>
                    <div class="grid grid-cols-3 gap-2">

                        <select id="filterProvinceId" onchange="filterWard()" class="border-2 border-orange-500 px-3 py-2 bg-orange-50 text-orange-600 rounded-lg text-sm text-gray-700">
                        </select>
                        <select id="filterWarnId" onchange="filterStreet()" class="border-2 border-orange-500 bg-orange-50 text-orange-600 px-3 py-2 rounded-lg text-sm text-gray-700">
                        </select>
                        <select id="filterStreetId" class="border-2 border-orange-500 bg-orange-50 text-orange-600 px-3 py-2 rounded-lg text-sm text-gray-700">
                        </select>
                    </div>
                </div>

                <div class="mb-6">
                    <h3 class="font-semibold mb-2">Khoảng giá</h3>
                    <div class="flex justify-between items-center mb-2 text-sm">
                        <div>
                            Từ: <span class="font-semibold text-cyan-700" id="minLabelPrice"></span>
                        </div>
                        <div>
                            Đến: <span class="font-semibold text-cyan-700" id="maxLabelPrice"></span>
                        </div>
                    </div>

                    <div class="flex items-center gap-2 mb-2">
                        <input id="minInputPrice" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                        <span>→</span>
                        <input id="maxInputPrice" type="number" class="w-full border rounded px-2 py-1 text-center" value="100" max="100" />
                    </div>

                    <div class="relative h-4">
                        <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                        <div id="rangeTrackPrice" class="absolute h-full bg-cyan-600 rounded-full"></div>

                        <input id="rangeMinPrice" type="range" min="0" max="100" value="0"
                               class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                        <input id="rangeMaxPrice" type="range" min="0" max="100" value="100"
                               class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                    </div>
                    <div id="rental-type-price" class="flex flex-wrap gap-2 mt-4" style="display:none">

                        <button id="price-1" data-scope="all" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Tất cả</button>
                        <button id="price-2" data-price-max='1' data-scope="lower" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Dưới 1 triệu</button>
                        <button id="price-3" data-price-min='1' data-price-max='2' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">1 - 2 triệu</button>
                        <button id="price-4" data-price-min='2' data-price-max='3' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">2 - 3 triệu</button>
                        <button id="price-5" data-price-min='3' data-price-max='5' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">3 - 5 triệu</button>
                        <button id="price-6" data-price-min='5' data-price-max='7' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">5 - 7 triệu</button>
                        <button id="price-7" data-price-min='7' data-price-max='10' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">7 - 10 triệu</button>
                        <button id="price-8" data-price-min='10' data-price-max='15' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">10 - 15 triệu</button>
                        <button id="price-9" data-price-min='15' data-scope="higher" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Trên 15 triệu</button>

                    </div>
                </div>

                <div class="mb-6">
                    <h3 class="font-semibold mb-2">Khoảng diện tích</h3>
                    <div class="flex justify-between items-center mb-2 text-sm">
                        <div>
                            Từ: <span class="font-semibold text-cyan-700" id="minLabelArea"></span>
                        </div>
                        <div>
                            Đến: <span class="font-semibold text-cyan-700" id="maxLabelArea"></span>
                        </div>
                    </div>

                    <div class="flex items-center gap-2 mb-2">
                        <input id="minInputArea" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                        <span>→</span>
                        <input id="maxInputArea" type="number" class="w-full border rounded px-2 py-1 text-center" value="200" max="200" />
                    </div>

                    <div class="relative h-4">
                        <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                        <div id="rangeTrackArea" class="absolute h-full bg-cyan-600 rounded-full"></div>

                        <input id="rangeMinArea" type="range" min="0" max="200" value="0"
                               class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                        <input id="rangeMaxArea" type="range" min="0" max="200" value="200"
                               class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                    </div>
                    <div id="rental-type-acreage" class="flex flex-wrap gap-2" style="display:none">

                        <button id="area-1" data-scope="all" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Tất cả</button>
                        <button id="area-2" data-area-max='20' data-scope="lower" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Dưới 20m²</button>
                        <button id="area-3" data-area-min='20' data-area-max='30' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Từ 20m² - 30m²</button>
                        <button id="area-4" data-area-min='30' data-area-max='50' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Từ 30m² - 50m²</button>
                        <button id="area-5" data-area-min='50' data-area-max='70' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Từ 50m² - 70m²</button>
                        <button id="area-6" data-area-min='70' data-area-max='90' data-scope="equal" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Từ 70m² - 90m²</button>
                        <button id="area-7" data-area-min='90' data-scope="higher" class="rental-btn border-2 rounded-full px-4 py-1 text-sm">Trên 90m²</button>
                    </div>
                </div>

                <div class="mb-6">
                    <h3 class="font-semibold mb-2">Số lượng phòng</h3>
                    <div id="rental-type" class="">

                        <div class="">
                            <div class="flex justify-between items-center mb-2 text-sm">
                                <div>
                                    Từ: <span class="font-semibold text-cyan-700" id="minLabel"></span>
                                </div>
                                <div>
                                    Đến: <span class="font-semibold text-cyan-700" id="maxLabel"></span>
                                </div>
                            </div>

                            <div class="flex items-center gap-2 mb-2">
                                <input id="minInput" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                                <span>→</span>
                                <input id="maxInput" type="number" class="w-full border rounded px-2 py-1 text-center" value="15" max="15" />
                            </div>

                            <div class="relative h-4">
                                <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                                <div id="rangeTrack" class="absolute h-full bg-cyan-600 rounded-full"></div>

                                <input id="rangeMin" type="range" min="0" max="15" value="0"
                                       class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                                <input id="rangeMax" type="range" min="0" max="15" value="15"
                                       class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-6">
                    <h3 class="font-semibold mb-2">Đặc điểm nổi bật</h3>
                    <div id="rental-type-special" class="flex flex-wrap gap-2">
                    </div>
                </div>
            </div>

            <div class="sticky bottom-0 bg-white w-full px-4 pt-2 pb-4 border-t rounded-b-lg">

                <button type="button" onclick="filterAdvanced()" class="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-3 rounded-xl text-base shadow">Áp dụng</button>
            </div>

        </div>
    </div>

    <div id="search-popup" class=" fixed inset-0 bg-black/30 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl w-full max-w-lg shadow-lg">

            <div class="sticky top-0 bg-white z-10 px-4 pt-4 pb-3 rounded-t-lg shadow-sm border-b mb-2">
                <div class="flex justify-between items-center">
                    <button id="backBtn" class="text-xl hidden">&larr;</button>
                    <h2 id="modalTitle" class="text-lg font-semibold"></h2>
                    <button onclick="hideFilterPopup('search-popup')" class="text-2xl text-gray-500 hover:text-red-500">&times;</button>
                </div>
            </div>

            <div id="modalContent" class="px-4 overflow-y-auto h-[60vh]">

                <div id="modalContent" class="flex-1">
                </div>
            </div>

            <div class="sticky bottom-0 bg-white w-full px-4 pt-2 pb-4 border-t rounded-b-lg">
            </div>

        </div>
    </div>


    <script>

        const searchInput = document.getElementById('province-search');
        const dropdown = document.getElementById('dropdown');
        const dropdown2 = document.getElementById('dropdown2');
        const provinceList = document.getElementById('province-list');
        const locationList = document.getElementById("location-list");
        let isAuthenticationLayout = authService.isAuthenticated();
        let isSearchLocation = false;


        const locationInput = document.getElementById("search-location-input");
        const selectedLocationsEl = document.getElementById("location-selected-list");
        let selectedProvinceId = -1;
        let selectedLocationLists = [];

        function renderProvincesList(filter = "") {
              provinceList.innerHTML = "";
              const filtered = locations.filter(p => p.name.toLowerCase().includes(filter.toLowerCase()));
              filtered.forEach(province => {
                if(province.id != 0){
                    const btn = document.createElement("button");
                    btn.className = "province-item text-left px-2 py-1 rounded hover:bg-gray-100";
                    btn.textContent = province.name;
                    btn.dataset.id = province.id;
                    btn.dataset.name = province.name;
                    btn.addEventListener("click", () => selectProvinceItem(province.id));
                    provinceList.appendChild(btn);
                }
              });
        }

        searchInput.addEventListener("focus", () => {
            checkShowDropDown();
            if(!isSearchLocation) renderProvincesList(searchInput.value);
            else renderLocations(searchInput.dataset.id);
        });

        function checkShowDropDown(){
            if(!isSearchLocation){
                dropdown.classList.remove("hidden");
                dropdown2.classList.add("hidden");
            }
            else{
                dropdown.classList.add("hidden");
                dropdown2.classList.remove("hidden");
            }
        }

        searchInput.addEventListener("input", () => {
            isSearchLocation = false;
            searchInput.dataset.id = -1;
            checkShowDropDown();
            renderProvincesList(searchInput.value);
        });

        document.addEventListener("click", (e) => {
          if (!e.target.closest(".relative")) {
            dropdown.classList.add("hidden");
          }
          if(!e.target.closest('.dropdown2-item') && !e.target.closest(".relative")){
              dropdown2.classList.add("hidden");
          }
        });

        document.addEventListener("click", (e) => {
          if (e.target.classList.contains("province-item")) {
            const provinceName = e.target.dataset.name;
            searchInput.value = provinceName;
            searchInput.dataset.id = e.target.dataset.id;
            dropdown.classList.add("hidden");
            isSearchLocation = true;
          }
        });

        let listLocationName = [];
        let listLocationBackup = [];
        function renderLocations(id = -1) {
          locationList.innerHTML = "";
          if(listLocationBackup.length == 0){
              const provinceItem = locations.filter(l => l.id == id)[0];
              provinceItem.wards.forEach(ward => {
                      ward.streets.forEach(street => {
                          if(ward.id != 0 && street.id != 0){
                              let itemValue = { province:{id: provinceItem.id,
                                  name: provinceItem.name},
                                  ward : {id:ward.id,name: ward.name },
                                  street: {id: street.id,name:street.name },
                                  locationName : `${street.name}, ${ward.name}, ${provinceItem.name}`
                              };
                              listLocationBackup.push(itemValue);
                          }
                      })
              })
          }

          listLocationName = listLocationBackup;
          listLocationName = listLocationName.filter(p => p.locationName.toLowerCase().includes(locationInput.value.toLowerCase()));
          listLocationName.forEach(loc => {
              const li = document.createElement("li");
              li.className = "cursor-pointer py-1 hover:bg-gray-100 flex items-center gap-1 dropdown2-item";
              li.innerHTML = `<span class="text-blue-500 ml-4"><i class="fas fa-map-marker-alt text-gray-500 mr-2"></i></span><span>${loc.locationName}</span>`;
              li.addEventListener("click", () => selectLocation(loc));
              locationList.appendChild(li);
            });
        }

        function selectProvinceItem(id) {
          selectedLocationsEl.innerHTML = "";
          selectedLocationLists = [];
          renderSelectedLocations();
          listLocationBackup = [];
          dropdown2.style.height = 25.3 + 2.1 * selectedLocationLists.length + 'rem';
          renderLocations(id);
        }

        function selectLocation(loc) {
            let findIndex = selectedLocationLists.findIndex(p => p.province.id == loc.province.id
                && p.ward.id == loc.ward.id
                && p.street.id == loc.street.id);
          if(findIndex != -1){
              alert('Địa điểm đã được chọn trước đó');
              return;
          }
          if (selectedLocationLists.length >= 5){
              alert('Đã tối đa 5 địa điểm');
              return;
          }
          selectedLocationLists.push(loc);
          renderSelectedLocations();
          locationInput.value = "";
          dropdown2.style.height = 25.3 + 2.1 * selectedLocationLists.length + 'rem';
          renderLocations(searchInput.dataset.id);
          // locationDropdown.classList.add("hidden");
        }

        function renderSelectedLocations() {
          selectedLocationsEl.innerHTML = "";
          selectedLocationLists
          .forEach(loc => {
            const tag = document.createElement("div");
            tag.className = "bg-blue-100 text-blue-700 px-3 py-1 dropdown2-item rounded-full text-sm flex items-center gap-2";
            tag.innerHTML = `<span>${loc.locationName}</span>
                             <button class="text-blue-600 hover:text-red-500 font-bold">×</button>`;
            tag.querySelector("button").addEventListener("click", () => {
                selectedLocationLists = selectedLocationLists.filter(l => l.locationName !== loc.locationName);
                dropdown2.style.height = 25.3 + 2.1 * selectedLocationLists.length + 'rem';
                renderSelectedLocations();
            });
            selectedLocationsEl.appendChild(tag);
          });
        }

        locationInput.addEventListener("input", () => {
            listLocationBackup = [];
            renderLocations(searchInput.dataset.id);
        });

        function hideFilterPopup(id) {
            document.getElementById(id).classList.add('hidden');
        }

        function showFilterPopup(id) {
            document.getElementById(id).classList.remove('hidden');
        }
        listSelectedSingleChoice();


        function listSelectedSingleChoice(){
            const listSelecter = ['rental-type','rental-type-price','rental-type-acreage'];
            listSelecter.forEach(item => {
                selectedSingleChoice(item);
            });
        }

        function selectedSingleChoice(idSelecter){
            const buttons = document.querySelectorAll(`#${idSelecter} .rental-btn`);

            buttons.forEach(btn => {
              btn.addEventListener('click', () => {
                buttons.forEach(b => {

                  b.classList.remove('border-orange-500','bg-orange-50', 'text-orange-600');
                  b.classList.add('border-gray-300','bg-white');
                });
                btn.classList.remove('border-gray-300','bg-white');
                btn.classList.add('border-orange-500', 'bg-orange-50','text-orange-600');
              });
            });
        }


        let level = 0;


        let selectedProvince = {id:""};
        let selectedWard = { id: "" };
        let selectedStreet = { id: "" };
        let locations = [];

        const href = window.location.origin;
        const urlParamParents = new URLSearchParams(window.location.search);

        const modal = document.getElementById("search-popup");
        const content = document.getElementById("modalContent");
        const title = document.getElementById("modalTitle");
        const backBtn = document.getElementById("backBtn");


        getAllLocationAsync();
        setTimeout(() => {
            renderProvinces();
        }, 300);

        backBtn.onclick = () => {

          if (level === 2) {
            level = 1;
            renderWard(selectedProvince);
          } else if (level === 1) {
            level = 0;
            renderProvinces();
          }
        };


        async function getAllLocationAsync() {
            locations = await getAllLocation();
            let obj = getValueFromParam(locations);
            $('#searchInput').val(obj.valueSearch);
            $('#titleHomePage').html(obj.valueTitle);
            selectedProvince = obj.selectedProvince;
            selectedWard = obj.selectedWard;
            selectedStreet = obj.selectedStreet;

            let html = '';
            let htmlWard = '';
            let htmlStreet = '';
            locations.forEach(i => {
                html += `<option value='${i.id}'>${i.name}</option>`;
            })
            $('#filterProvinceId').html(html);
            if (selectedProvince.id != "") {
                $('#filterProvinceId').val(selectedProvince.id);
                selectedProvince.wards.forEach(i => {
                    htmlWard += `<option value='${i.id}'>${i.name}</option>`;
                })
            }
            else {
                htmlWard += `<option value='0'>All</option>`;
            }
            $('#filterWarnId').html(htmlWard);

            if (selectedWard.id != "") {
                $('#filterWarnId').val(selectedWard.id);
                selectedWard.streets.forEach(i => {
                    htmlStreet += `<option value='${i.id}'>${i.name}</option>`;
                })
            }
            else {
                htmlStreet += `<option value='0'>All</option>`;
            }
            $('#filterStreetId').html(htmlStreet);
            if (selectedStreet.id != "") $('#filterStreetId').val(selectedStreet.id);

            // const filterAmenity = urlParamParents.get('filterAmenity') ?? "";
            // await fillDataAmenity(filterAmenity);

            //console.log(locations);
        }

        function renderProvinces() {

          level = 0;
          title.innerText = "Chọn theo khu vực";
          backBtn.classList.add("hidden");
          content.innerHTML = "";

            locations.forEach(province => {
                const checked = province.id == selectedProvince.id ? "checked" : "";
                const item = createCheckboxItem(province.name, checked, () => {
                    selectedProvince = province;
                    selectedWard = { id: "" };
                    selectedStreet = { id: "" };
                    renderWard(province);

                    if (province.id == 0) {
                        searchAdvanced();
                    }
                });
                content.appendChild(item);
            });
        }

        function renderWard(province) {
            level = 1;
            title.innerText = province.name;
            backBtn.classList.remove("hidden");
            content.innerHTML = "";



            province.wards.forEach(ward => {
                const checked = ward.id == selectedWard.id ? "checked" : "";
                const item = createCheckboxItem(ward.name, checked, () => {
                    selectedWard = ward;
                    selectedStreet = { id: "" };
                    renderStreets(province, ward);

                    if (ward.id == 0) {
                        searchAdvanced();
                    }
                });
                content.appendChild(item);

            });
        }

        function renderStreets(province, ward) {
            level = 2;
            title.innerText = ward.name;
            content.innerHTML = "";

            ward.streets.forEach(street => {
                const checked = street.id == selectedStreet.id ? "checked" : "";
                const item = createCheckboxItem(street.name, checked, () => {
                    selectedStreet = street;
                    searchAdvanced();
                    //hideFilterPopup('search-popup');
                });
                content.appendChild(item);
            });
        }

        function createCheckboxItem(label, checked, onClick) {
            const div = document.createElement("div");
            div.className = "flex items-center gap-2 py-2 px-3 border-b cursor-pointer hover:bg-gray-100";

            const input = document.createElement("input");
            input.type = "checkbox";
            input.checked = checked;
            input.className = "form-checkbox w-4 h-4 text-orange-500";
            input.onclick = (e) => {
                e.stopPropagation();
                onClick();
            };

            const span = document.createElement("span");
            span.innerText = label;
            div.appendChild(input);
            div.appendChild(span);

            div.onclick = () => onClick();

            return div;
        }

        function updateNavigation() {
            if (isAuthenticationLayout) {
                document.getElementById('authNavItems').style.display = 'none';

                const userProfileNav = document.getElementById('userProfileNavItem');
                userProfileNav.style.display = 'flex';

                const user = authService.getCurrentUser();
                if (user && user.name) {
                    document.getElementById('userProfileLink').innerText = `Chào, ${user.name}`;
                }

            } else {
                document.getElementById('authNavItems').style.display = 'block';
                document.getElementById('userProfileNavItem').style.display = 'none';
            }
        }

        function getFavoriteList(event){
            event.preventDefault();
            if(isAuthenticationLayout) window.location.href= '/Home/ListFavorite';
            else window.location.href= '/Auth/Login';
        }

        function searchAdvanced() {
            const newHref = addParamsToHref(href, {
                province: selectedProvince.id ?? 0,
                ward: selectedWard.id ?? 0,
                street: selectedStreet.id ?? 0
            });
            window.location.href = newHref;
        }

        function createProperty(event){
            event.preventDefault();
            if(isAuthenticationLayout) window.location.href = '/PostProperty/CreateProperty';
            else window.location.href = '/Auth/Login';
        }

        function searchLocationInput(){
            //sessionStorage.setItem('selectedProvince',JSON.stringify(selectedLocationLists));
            let provinceId = searchInput.dataset?.id ?? 0;
            if (provinceId == -1) {
                alert('Không tìm thấy tỉnh thành tương ứng');
                return;
            }
            sessionStorage.setItem('provinceId', provinceId);
            sessionStorage.setItem('provinceName',searchInput.value);
            sessionStorage.setItem('selectedLocationLists',JSON.stringify(selectedLocationLists));
            const urlParams = new URLSearchParams(window.location.search);
            let type = urlParams.get('type');
            if (type == null || type == undefined) type = "room";
            
            window.location.href = `/?type=${type}`;
        }

        async function handleLogout(event) {
            event.preventDefault();
            await authService.logout();
            window.location.href = '/';
        }

        document.addEventListener('DOMContentLoaded', updateNavigation);

        setupDoubleRangeSlider({
            rangeMinId: "rangeMinArea",
            rangeMaxId: "rangeMaxArea",
            inputMinId: "minInputArea",
            inputMaxId: "maxInputArea",
            labelMinId: "minLabelArea",
            labelMaxId: "maxLabelArea",
            trackId: "rangeTrackArea",
            maxValue: 200,
            labelInfo: 'm<sup>2</sup>'
        });

        setupDoubleRangeSlider({
            rangeMinId: "rangeMinPrice",
            rangeMaxId: "rangeMaxPrice",
            inputMinId: "minInputPrice",
            inputMaxId: "maxInputPrice",
            labelMinId: "minLabelPrice",
            labelMaxId: "maxLabelPrice",
            trackId: "rangeTrackPrice",
            maxValue: 100,
            labelInfo: 'triệu'
        });
        

        setupDoubleRangeSlider({
            rangeMinId: "rangeMin",
            rangeMaxId: "rangeMax",
            inputMinId: "minInput",
            inputMaxId: "maxInput",
            labelMinId: "minLabel",
            labelMaxId: "maxLabel",
            trackId: "rangeTrack",
            maxValue: 15
        });


        function setupDoubleRangeSlider({rangeMinId,rangeMaxId,inputMinId,inputMaxId,
                labelMinId,labelMaxId,trackId,maxValue = 15,labelInfo = ''
            }) {
                const rangeMin = document.getElementById(rangeMinId);
                const rangeMax = document.getElementById(rangeMaxId);
                const minInput = document.getElementById(inputMinId);
                const maxInput = document.getElementById(inputMaxId);
                const minLabel = document.getElementById(labelMinId);
                const maxLabel = document.getElementById(labelMaxId);
                const rangeTrack = document.getElementById(trackId);

                function updateRangeUI() {
                    const min = parseInt(rangeMin.value);
                    const max = parseInt(rangeMax.value);

                    minInput.value = min;
                    maxInput.value = max;

                    minLabel.innerHTML = min + ' ' + labelInfo;
                    maxLabel.innerHTML = max + ' ' + labelInfo;

                    const minPercent = (min / maxValue) * 100;
                    const maxPercent = (max / maxValue) * 100;
                    rangeTrack.style.left = minPercent + "%";
                    rangeTrack.style.right = (100 - maxPercent) + "%";
                }

                rangeMin.addEventListener("input", function () {
                    let minVal = parseInt(rangeMin.value);
                    let maxVal = parseInt(rangeMax.value);

                    if (minVal > maxVal) {
                        minVal = maxVal;
                        rangeMin.value = maxVal; 
                    }
                    updateRangeUI();
                });

                rangeMax.addEventListener("input", function () {
                    let minVal = parseInt(rangeMin.value);
                    let maxVal = parseInt(rangeMax.value);

                    if (maxVal < minVal) {
                        maxVal = minVal;
                        rangeMax.value = minVal;
                    }
                    updateRangeUI();
                });

                minInput.addEventListener("input", function () {
                    let minVal = parseInt(minInput.value);
                    let maxVal = parseInt(maxInput.value);

                    if (minVal > maxVal) {
                        minVal = maxVal;
                        minInput.value = maxVal;
                    }
                    rangeMin.value = minInput.value;
                    updateRangeUI();
                });

                maxInput.addEventListener("input", function () {
                    let minVal = parseInt(minInput.value);
                    let maxVal = parseInt(maxInput.value);

                    if (maxVal < minVal) {
                        maxVal = minVal;
                        maxInput.value = minVal;
                    }
                    rangeMax.value = maxInput.value;
                    updateRangeUI();
                });

                updateRangeUI();
            }
    </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
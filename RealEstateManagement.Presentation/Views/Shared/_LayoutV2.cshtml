<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SREM.AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'orange': {
                            50: '#fff7ed',
                            100: '#ffedd5',
                            200: '#fed7aa',
                            300: '#fdba74',
                            400: '#fb923c',
                            500: '#f97316',
                            600: '#ea580c',
                            700: '#c2410c',
                            800: '#9a3412',
                            900: '#7c2d12',
                        }
                    },
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                    }
                }
            }
        }
    </script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/floating-support-button.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/RealEstateManagement.Presentation.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/_Layout.css" asp-append-version="true" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

    <script src="~/js/authService.js" asp-append-version="true"></script>
    <script src="~/js/postPropertyService.js"></script>
    <script src="~/js/helper.js" asp-append-version="true"></script>
    <script src="~/js/compareProperty.js" asp-append-version="true"></script>


    @await RenderSectionAsync("Styles", required: false)
    
</head>
<body class="font-inter bg-gray-50">
    <!-- Header -->
    <header class="gradient-bg shadow-soft sticky top-0 z-50">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <!-- Logo -->
                <div class="flex items-center">
                    <div class="flex items-center space-x-3" style="cursor:pointer" onclick="window.location.href='/'">
                        <div class="w-10 h-10 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                            <i class="fas fa-home text-white text-lg"></i>
                        </div>
                        <div>
                            <h1 class="text-2xl font-bold bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent">
                                SREM.AI
                            </h1>
                            <p class="text-xs text-gray-500 -mt-1">Smart Real Estate Management</p>
                        </div>
                    </div>
                </div>

                <!-- Navigation Links -->
                <nav class="hidden md:flex items-center space-x-8">
                    <a href="/" class="text-gray-700 hover:text-orange-600 font-medium transition-colors duration-200 flex items-center space-x-2">
                        <i class="fas fa-home text-sm"></i>
                        <span>Trang chủ</span>
                    </a>
                    <a href="/Home/News" class="text-gray-700 hover:text-orange-600 font-medium transition-colors duration-200 flex items-center space-x-2">
                        <i class="fas fa-newspaper text-sm"></i>
                        <span>News</span>
                    </a>
                    <a href="/Deposit" class="text-gray-700 hover:text-orange-600 font-medium transition-colors duration-200 flex items-center space-x-2">
                        <i class="fas fa-wallet text-sm"></i>
                        <span>Nạp tiền</span>
                    </a>
                    <li id="wallet-display" class="hidden text-gray-700 font-medium flex items-center space-x-2">
                        <i class="fas fa-money-bill-wave text-sm"></i>
                        <span>Ví: <span id="wallet-balance" class="font-semibold text-orange-600">0 VNĐ</span></span>
                    </li>
                    <a onclick="showFilterPopup('compare-popup')" class="text-gray-700 hover:text-orange-600 font-medium transition-colors duration-200 flex items-center space-x-2">
                        <i class="fas fa-window-restore text-sm"></i>
                        <span>So sánh</span>
                    </a>
                </nav>

                <!-- User Actions -->
                <div class="flex items-center space-x-4">
                    <!-- Favorites -->
                    <a href="#" onclick="getFavoriteList(event)" class="relative p-2 text-gray-600 hover:text-orange-600 transition-colors duration-200 hover-lift">
                        <i class="fas fa-heart text-lg"></i>
                        @* <span class="absolute -top-1 -right-1 bg-orange-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"></span> *@
                    </a>
                    <!-- Notification -->
                    <a href="#" onclick="getNotificationList(event)" class="relative p-2 text-gray-600 hover:text-orange-600 transition-colors duration-200 hover-lift">
                        <i class="fas fa-bell text-lg"></i>
                        <span id="notificationCount" class="absolute -top-1 -right-1 bg-orange-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"></span>
                    </a>

                    <!-- Notification Dropdown -->
                    <div id="notificationDropdown" class="absolute mt-2 w-[600px] bg-white rounded-xl shadow-lg border border-gray-200 hidden z-50 overflow-y-auto max-h-96">
                        <div class="p-4 border-b border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-900">Thông báo</h3>
                        </div>
                        <div id="notificationList" class="p-2 space-y-2"></div>
                    </div>
                    
                    <!-- Auth Buttons -->
                    <div class="flex items-center space-x-3">
                        <a id="registerNavItem" href="/Auth/Register" class="text-gray-700 hover:text-orange-600 font-medium transition-colors duration-200 flex items-center space-x-2 px-4 py-2 rounded-lg hover:bg-orange-50">
                            <i class="fas fa-user-plus text-sm"></i>
                            <span>Đăng ký</span>
                        </a>
                        <a id="loginNavItem" href="/Auth/Login" class="text-gray-700 hover:text-orange-600 font-medium transition-colors duration-200 flex items-center space-x-2 px-4 py-2 rounded-lg hover:bg-orange-50">
                            <i class="fas fa-sign-in-alt text-sm"></i>
                            <span>Đăng nhập</span>
                        </a>
                        
                        <!-- User Profile Dropdown -->
                        <div id="userProfileNavItem" class="relative hidden">
                            <button onclick="toggleDropdown()" class="flex items-center text-gray-700 hover:text-orange-600 font-medium px-4 py-2 rounded-lg hover:bg-orange-50 transition-colors duration-200">
                                <span id="userProfileLink"></span>
                                <svg class="ml-1 h-4 w-4 fill-current" viewBox="0 0 20 20">
                                    <path d="M5.5 7l4.5 4 4.5-4z" />
                                </svg>
                            </button>

                            <!-- Menu Dropdown -->
                            <div id="userDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg border border-gray-200 hidden z-50">
                                <a href="/Chat/Index" class="block px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 transition-colors duration-200">
                                    <i class="fas fa-comment-dots mr-2"></i>Tin nhắn
                                </a>
                                <a href="/Profile" class="block px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 transition-colors duration-200">
                                    <i class="fas fa-user mr-2"></i>Trang cá nhân
                                </a>
                                <a href="#" onclick="handleLogout(event)" class="block px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 transition-colors duration-200">
                                    <i class="fas fa-sign-out-alt mr-2"></i>Đăng xuất
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Post Property Button -->
                    <a href="#" onclick="createProperty(event)" class="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-semibold px-6 py-3 rounded-xl shadow-lg hover-lift transition-all duration-200 flex items-center space-x-2">
                        <i class="fas fa-plus text-sm"></i>
                        <span>Đăng tin</span>
                    </a>
                </div>
            </div>
        </div>

       
        
    </header>

    <!-- Main Content -->
    <main class="min-h-screen bg-gradient-to-br from-gray-50 to-orange-50">
        <div class="container mx-auto px-6 py-8" style="padding-top:0px">
            @RenderBody()
        </div>
    </main>

    <!-- Floating Support Chat Button -->
    <div class="fixed bottom-6 right-6 z-50">
        <button onclick="openSimpleSupportChat()" 
                class="w-16 h-16 bg-red-500 hover:bg-red-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group floating-support-btn relative">
            <i class="fas fa-comments text-xl"></i>
            
            <!-- Unread Badge -->
            <div id="supportUnreadBadge" class="absolute -top-2 -right-2 bg-orange-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center hidden">
                0
            </div>
            
            <!-- Tooltip -->
            <div class="absolute right-full mr-3 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none">
                Liên hệ hỗ trợ
                <div class="absolute left-full top-1/2 transform -translate-y-1/2 w-0 h-0 border-l-4 border-l-gray-900 border-t-4 border-t-transparent border-b-4 border-b-transparent"></div>
            </div>
        </button>
    </div>

    <!-- Simple Support Chat Modal for Users -->
    <div id="simpleSupportChatModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">💬 Chat với Admin</h3>
                        <p class="text-sm text-gray-600">Hãy để lại tin nhắn, admin sẽ phản hồi sớm nhất!</p>
                    </div>
                    <button onclick="closeSimpleSupportChatModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <div id="simpleChatMessages" class="h-96 overflow-y-auto border rounded-md p-4 mb-4 bg-gray-50">
                    <div class="text-center text-gray-500 py-8">
                        <i class="fas fa-comments text-4xl mb-2 text-gray-300"></i>
                        <p>Bắt đầu cuộc trò chuyện với admin</p>
                    </div>
                </div>
                
                <div class="flex space-x-2 mb-4">
                    <input type="text" id="simpleChatMessageInput" 
                           class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                           placeholder="Nhập tin nhắn của bạn...">
                    <button onclick="sendSimpleSupportMessage()" 
                            class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500">
                        Gửi
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-white border-t border-gray-200 mt-16">
        <div class="container mx-auto px-6 py-12">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
                <!-- Company Info -->
                <div class="col-span-1 md:col-span-2">
                    <div class="flex items-center space-x-3 mb-4">
                        <div class="w-8 h-8 bg-gradient-to-br from-orange-500 to-orange-600 rounded-lg flex items-center justify-center">
                            <i class="fas fa-home text-white text-sm"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-900">SREM.AI</h3>
                    </div>
                    <p class="text-gray-600 mb-4 max-w-md">
                        Nền tảng quản lý bất động sản thông minh, kết nối chủ nhà và người thuê một cách hiệu quả và an toàn.
                    </p>
                    <div class="flex space-x-4">
                        <a href="#" class="text-gray-400 hover:text-orange-600 transition-colors duration-200">
                            <i class="fab fa-facebook text-xl"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-orange-600 transition-colors duration-200">
                            <i class="fab fa-twitter text-xl"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-orange-600 transition-colors duration-200">
                            <i class="fab fa-instagram text-xl"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-orange-600 transition-colors duration-200">
                            <i class="fab fa-linkedin text-xl"></i>
                        </a>
                    </div>
                </div>

                <!-- Quick Links -->
                <div>
                    <h4 class="text-lg font-semibold text-gray-900 mb-4">Liên kết nhanh</h4>
                    <ul class="space-y-2">
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Về chúng tôi</a></li>
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Dịch vụ</a></li>
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Tin tức</a></li>
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Liên hệ</a></li>
                    </ul>
                </div>

                <!-- Support -->
                <div>
                    <h4 class="text-lg font-semibold text-gray-900 mb-4">Hỗ trợ</h4>
                    <ul class="space-y-2">
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Trung tâm trợ giúp</a></li>
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Điều khoản sử dụng</a></li>
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">Chính sách bảo mật</a></li>
                        <li><a href="#" class="text-gray-600 hover:text-orange-600 transition-colors duration-200">FAQ</a></li>
                    </ul>
                </div>
            </div>

            <div class="border-t border-gray-200 mt-8 pt-8 text-center">
                <p class="text-gray-500">&copy; @DateTime.Now.Year SREM.AI. Tất cả quyền được bảo lưu.</p>
            </div>
        </div>
    </footer>

    @* compare-popup *@
    <div id="compare-popup" class="hidden fixed inset-0 bg-black/30 flex items-center justify-center z-50">
        <div class="bg-white rounded-2xl w-full max-w-lg shadow-lg">

            <div class="sticky top-0 bg-white z-10 px-4 pt-4 pb-3 rounded-t-lg shadow-sm border-b mb-2">
                <div class="flex justify-between items-center">
                    <h2 class="text-lg font-semibold">So sánh</h2>
                    <button onclick="hideFilterPopup('compare-popup')" class="text-2xl text-gray-500 hover:text-red-500">&times;</button>
                </div>
            </div>

            <div class="px-4 overflow-y-auto h-[60vh]">
                <div id="compare-table-container" class="overflow-x-auto">
                    <table class="table-auto w-full text-sm text-gray-700 border" id="compare-table">
                    </table>
                </div>
                <p id="compare-warning" class="text-red-500 text-sm mt-2 hidden">
                    Vui lòng chọn ít nhất 2 và không quá 3 mục để so sánh.
                </p>
            </div>

        </div>
    </div>


    <script>
        // Function to update navigation based on auth status
        function updateNavigation() {
            const isAuthenticated = authService.isAuthenticated();
            const loginNavItem = document.getElementById('loginNavItem');
            const registerNavItem = document.getElementById('registerNavItem');
            const userProfileNavItem = document.getElementById('userProfileNavItem');
            const userProfileLink = document.getElementById('userProfileLink');
            const notificationBell = document.querySelector('a[onclick="getNotificationList(event)"]'); // Thêm dòng này

            if (isAuthenticated) {
                if (loginNavItem) loginNavItem.style.display = 'none';
                if (registerNavItem) registerNavItem.style.display = 'none';
                if (userProfileNavItem) userProfileNavItem.style.display = 'flex';
                if (notificationBell) notificationBell.style.display = 'inline-flex'; // Hiện chuông
                
                // Set user name in dropdown
                const user = authService.getCurrentUser();
                if (user && user.name && userProfileLink) {
                    userProfileLink.innerText = `Chào, ${user.name}`;
                }

                updateWalletBalance();
            } else {
                if (loginNavItem) loginNavItem.style.display = 'flex';
                if (registerNavItem) registerNavItem.style.display = 'flex';
                if (userProfileNavItem) userProfileNavItem.style.display = 'none';
                if (notificationBell) notificationBell.style.display = 'none'; // Ẩn chuông
                 // Ẩn ví khi người dùng chưa đăng nhập
                const walletDisplay = document.getElementById('wallet-display');
                if (walletDisplay) walletDisplay.classList.add('hidden');
            }
        }
     

        // Toggle dropdown
        function toggleDropdown() {
            const dropdown = document.getElementById('userDropdown');
            dropdown.classList.toggle('hidden');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('userDropdown');
            const userProfileNavItem = document.getElementById('userProfileNavItem');
            
            if (!userProfileNavItem.contains(e.target)) {
                dropdown.classList.add('hidden');
            }
        });

        // Handle logout
        async function handleLogout(event) {
            event.preventDefault();
            try {
                await authService.logout();
                updateNavigation();
                showSuccessMessage('Đăng xuất thành công!');
                setTimeout(() => {
                    window.location.href = '/';
                }, 1200); // Wait 1.2s for user to see the message
            } catch (error) {
                console.error('Logout failed:', error);
                alert('Logout failed. Please try again.');
            }
        }

        // Simple success message function (add to your script section)
        function showSuccessMessage(message) {
            let msgDiv = document.createElement('div');
            msgDiv.innerText = message;
            msgDiv.className = 'fixed top-6 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded shadow-lg z-50';
            document.body.appendChild(msgDiv);
            setTimeout(() => {
                msgDiv.remove();
            }, 1000);
        }

        // Get favorite list
        function getFavoriteList(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (isAuthenticated) {
                window.location.href = '/Home/ListFavorite';
            } else {
                window.location.href = '/Auth/Login';
            }
        }

        // Create property
        function createProperty(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (isAuthenticated) {
                window.location.href = '/PostProperty/ListProperty';
            } else {
                window.location.href = '/Auth/Login';
            }
        }

        // Hàm cập nhật số lượng thông báo chưa đọc khi vào trang
        async function updateNotificationCount() {
            const notificationCount = document.getElementById('notificationCount');
            if (!authService.isAuthenticated()) {
                if (notificationCount) notificationCount.textContent = '';
                return;
            }
            try {
                const token = localStorage.getItem('authToken');
                const response = await fetch('https://localhost:7031/api/UserNotification/unread-count', { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notification count');
                const data = await response.json();
                const unreadCount = data.data?.unreadCount || 0;
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
            } catch {
                if (notificationCount) notificationCount.textContent = '';
            }
        }

        // Update navigation when page loads
        document.addEventListener('DOMContentLoaded', updateNavigation);

        // Set active navigation based on URL parameters
        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const type = urlParams.get('type') || 'room';
            
            // Remove active class from all nav links
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            // Add active class to current type
            const activeLink = document.getElementById(type);
            if (activeLink) {
                activeLink.classList.add('active');
            }
        });


        // Sửa getNotificationList để toggle modal
        async function getNotificationList(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (!isAuthenticated) {
                window.location.href = '/Auth/Login';
                return;
            }
            const dropdown = document.getElementById('notificationDropdown');
            // Nếu dropdown đang mở thì ẩn đi (toggle)
            if (!dropdown.classList.contains('hidden')) {
                dropdown.classList.add('hidden');
                return;
            }
            // Nếu dropdown đang ẩn thì load và hiện
            const notificationList = document.getElementById('notificationList');
            const notificationCount = document.getElementById('notificationCount');
            try {
                // Use the user-specific notifications endpoint instead of all notifications
                const token = localStorage.getItem('authToken');
                const response = await fetch('https://localhost:7031/api/UserNotification/my-notifications', { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notifications');
                const data = await response.json();
                const notifications = data.data || [];
                // Update unread count
                const unreadCount = notifications.filter(n => !n.isRead).length;
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                
                // Render notifications with horizontal category tabs
                renderNotificationsWithTabs(notifications);
                dropdown.classList.remove('hidden');
            } catch (error) {
                notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Lỗi khi tải thông báo.</p>';
            }
        }

        // Global variable to store grouped notifications
        let globalGroupedNotifications = {};

        // Function to render notifications with horizontal category tabs
        function renderNotificationsWithTabs(notifications) {
            const notificationList = document.getElementById('notificationList');
            
            if (notifications.length === 0) {
                notificationList.innerHTML = '<p class="text-gray-500 text-center p-2">Không có thông báo nào.</p>';
                return;
            }

            // Group notifications by type and store globally
            globalGroupedNotifications = {
                all: notifications,
                info: notifications.filter(n => n.type === 'info'),
                warning: notifications.filter(n => n.type === 'warning'),
                alert: notifications.filter(n => n.type === 'alert')
            };

            // Create tabs HTML
            const tabsHTML = `
                <div class="flex border-b border-gray-200 bg-gray-50 rounded-t-lg">
                    <button class="tab-btn active px-4 py-2 text-sm font-medium text-gray-700 bg-white border-b-2 border-orange-500 rounded-t-lg" data-type="all">
                        Tất cả (${globalGroupedNotifications.all.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="info">
                        📋 Thông tin (${globalGroupedNotifications.info.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="warning">
                        ⚠️ Cảnh báo (${globalGroupedNotifications.warning.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="alert">
                        🚨 Báo động (${globalGroupedNotifications.alert.length})
                    </button>
                </div>
                <div id="notificationsContent" class="max-h-80 overflow-y-auto">
                    ${renderNotificationsByType(globalGroupedNotifications.all, 'all')}
                </div>
            `;

            notificationList.innerHTML = tabsHTML;

            // Add event listeners to tabs
            const tabButtons = notificationList.querySelectorAll('.tab-btn');
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all tabs
                    tabButtons.forEach(btn => {
                        btn.classList.remove('active', 'bg-white', 'border-b-2', 'border-orange-500', 'rounded-t-lg');
                        btn.classList.add('text-gray-500');
                    });
                    
                    // Add active class to clicked tab
                    button.classList.add('active', 'bg-white', 'border-b-2', 'border-orange-500', 'rounded-t-lg');
                    button.classList.remove('text-gray-500');
                    button.classList.add('text-gray-700');

                    // Show notifications for selected type
                    const selectedType = button.dataset.type;
                    const notificationsContent = document.getElementById('notificationsContent');
                    notificationsContent.innerHTML = renderNotificationsByType(globalGroupedNotifications[selectedType], selectedType);
                });
            });
        }

        // Function to render notifications by type
        function renderNotificationsByType(notifications, type) {
            if (notifications.length === 0) {
                return '<p class="text-gray-500 text-center p-4">Không có thông báo nào.</p>';
            }

            const notificationsHTML = notifications.map(notification => {
                let typeColor = '';
                let typeBgColor = '';
                let typeText = '';
                
                switch(notification.type) {
                    case 'info':
                        typeColor = 'text-blue-500';
                        typeBgColor = 'bg-blue-50';
                        typeText = 'Thông tin';
                        break;
                    case 'warning':
                        typeColor = 'text-yellow-500';
                        typeBgColor = 'bg-yellow-50';
                        typeText = 'Cảnh báo';
                        break;
                    case 'alert':
                        typeColor = 'text-red-500';
                        typeBgColor = 'bg-red-50';
                        typeText = 'Báo động';
                        break;
                }

                return `
                    <div class="notification-item p-3 bg-white hover:bg-orange-50 cursor-pointer transition-colors duration-200 border-b border-gray-100 last:border-b-0" data-notification-id="${notification.notificationId}">
                        <div class="flex justify-between items-start gap-3">
                            <div class="flex-1 min-w-0">
                                <h4 class="text-sm font-medium text-gray-900 truncate">${notification.title}</h4>
                                <p class="text-xs text-gray-600 mt-1 line-clamp-2">${notification.content}</p>
                                <p class="text-xs text-gray-400 mt-1">${new Date(notification.createdAt).toLocaleString('vi-VN')}</p>
                            </div>
                            <div class="flex flex-col items-end space-y-1 flex-shrink-0">
                                <span class="text-xs font-medium px-2 py-1 rounded-full ${typeColor} ${typeBgColor}">
                                    ${typeText}
                                </span>
                                ${!notification.isRead ? '<div class="w-2 h-2 bg-orange-500 rounded-full"></div>' : ''}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            // Add event listeners to notification items
            setTimeout(() => {
                const notificationItems = document.querySelectorAll('.notification-item');
                notificationItems.forEach(item => {
                    item.addEventListener('click', () => {
                        const notificationId = item.dataset.notificationId;
                        const notification = notifications.find(n => n.notificationId == notificationId);
                        if (notification) {
                            showNotificationDetail(notification);
                        }
                    });
                });
            }, 0);

            return notificationsHTML;
        }

        // Show notification detail within dropdown and mark as read
        async function showNotificationDetail(notification) {
            const notificationList = document.getElementById('notificationList');

            try {
                const token = localStorage.getItem('authToken');
                
                // Mark notification as read
                const markReadResponse = await fetch(`https://localhost:7031/api/UserNotification/mark-as-read/${notification.notificationId}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                // Get notification detail
                const response = await fetch(`https://localhost:7031/api/Notification/${notification.notificationId}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch notification detail');
                }

                const data = await response.json();
                const detail = data.data;

                // Replace list with detail view
                notificationList.innerHTML = `
                    <div class="p-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-gray-900">${detail.title}</h3>
                            <button id="backToList" class="text-orange-500 hover:text-orange-600 font-medium">Quay lại</button>
                        </div>
                        <p class="text-gray-600 mb-4">${detail.content}</p>
                        <p class="text-sm text-gray-400 mb-2">Loại: ${detail.type === 'info' ? 'Thông tin' : detail.type === 'warning' ? 'Cảnh báo' : 'Báo động'}</p>
                        <p class="text-sm text-gray-400">Thời gian: ${new Date(detail.createdAt).toLocaleString('vi-VN')}</p>
                    </div>
                `;

                const backToList = document.getElementById('backToList');
                  backToList.onclick = (e) => {
                  e.stopPropagation(); 
                    // Refresh the notifications list
                    refreshNotifications();
        };

                // Update notification count after marking as read
                updateNotificationCount();
                
            } catch (error) {
                console.error('Error fetching notification detail:', error);
                notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Không thể tải chi tiết thông báo.</p>';
            }
        }

        // Function to refresh notifications
        async function refreshNotifications() {
            try {
                const token = localStorage.getItem('authToken');
                const response = await fetch('https://localhost:7031/api/UserNotification/my-notifications', { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notifications');
                const data = await response.json();
                const notifications = data.data || [];
                
                // Update unread count
                const unreadCount = notifications.filter(n => !n.isRead).length;
                const notificationCount = document.getElementById('notificationCount');
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                
                // Re-render notifications with tabs
                renderNotificationsWithTabs(notifications);
            } catch (error) {
                console.error('Error refreshing notifications:', error);
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('notificationDropdown');
            const notificationIcon = document.querySelector('a[onclick="getNotificationList(event)"]');

            if (dropdown && !notificationIcon.contains(e.target) && !dropdown.contains(e.target)) {
                dropdown.classList.add('hidden');
            }
        });

        function hideFilterPopup(id) {
            document.getElementById(id).classList.add('hidden');
        }

        function showFilterPopup(id) {
            document.getElementById(id).classList.remove('hidden');
            if(id == 'compare-popup'){
              renderComparePopup();
            }
        }

        // Update navigation and notification count on load
        document.addEventListener('DOMContentLoaded', () => {
            updateNavigation();
            updateNotificationCount();
            checkUnreadSupportMessages();
            
            // Add Enter key support for simple chat
            const simpleChatInput = document.getElementById('simpleChatMessageInput');
            if (simpleChatInput) {
                simpleChatInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        sendSimpleSupportMessage();
                    }
                });
            }
            
            // Close modal when clicking outside
            const simpleModal = document.getElementById('simpleSupportChatModal');
            if (simpleModal) {
                simpleModal.addEventListener('click', function(e) {
                    if (e.target === simpleModal) {
                        closeSimpleSupportChatModal();
                    }
                });
            }
            
            // Close modal with Escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    const modal = document.getElementById('simpleSupportChatModal');
                    if (modal && !modal.classList.contains('hidden')) {
                        closeSimpleSupportChatModal();
                    }
                }
            });
        });

                // Hàm mới để lấy và cập nhật số dư ví
        async function updateWalletBalance() {
            const walletDisplay = document.getElementById('wallet-display');
            const walletBalanceSpan = document.getElementById('wallet-balance');

            if (!authService.isAuthenticated()) {
                if (walletDisplay) walletDisplay.classList.add('hidden'); // Ẩn ví nếu chưa đăng nhập
                return;
            }

            // Hiển thị khung ví nếu đã đăng nhập
            if (walletDisplay) walletDisplay.classList.remove('hidden');

            try {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    console.warn("No auth token found, cannot fetch wallet balance.");
                    if (walletDisplay) walletDisplay.classList.add('hidden');
                    return;
                }

                const response = await fetch(`https://localhost:7031/api/Wallet/balance`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    // Xử lý lỗi nếu API không thành công
                    const errorResponse = await response.json();
                    console.error('Failed to fetch wallet balance:', errorResponse.message || 'Unknown error');
                    if (walletBalanceSpan) walletBalanceSpan.textContent = 'Lỗi!'; // Hiển thị lỗi
                    return;
                }

                const data = await response.json();
                const balance = data.balance; // Giả định backend trả về JSON dạng { balance: 123456 }

                if (walletBalanceSpan) {
                    walletBalanceSpan.textContent = `${balance.toLocaleString('vi-VN')} VNĐ`;
                }

            } catch (error) {
                console.error("Error fetching wallet balance:", error);
                if (walletBalanceSpan) walletBalanceSpan.textContent = 'Lỗi tải!';
            }
        }

        // Support Chat functionality
        function openSimpleSupportChat() {
            console.log('openSimpleSupportChat called'); // Debug log
            
            if (!authService.isAuthenticated()) {
                Swal.fire({
                    icon: 'info',
                    title: 'Vui lòng đăng nhập',
                    text: 'Bạn cần đăng nhập để có thể liên hệ hỗ trợ.',
                    confirmButtonText: 'Đăng nhập',
                    showCancelButton: true,
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/Auth/Login';
                    }
                });
                return;
            }
            
            // Open simple chat modal
            const modal = document.getElementById('simpleSupportChatModal');
            if (modal) {
                modal.classList.remove('hidden');
                console.log('Modal opened successfully'); // Debug log
                
                // Focus on input
                setTimeout(() => {
                    const input = document.getElementById('simpleChatMessageInput');
                    if (input) {
                        input.focus();
                        console.log('Input focused'); // Debug log
                    }
                }, 100);
                
                // Load existing conversation if any
                loadSimpleSupportConversation();
            } else {
                console.error('Modal not found!'); // Debug log
                // Fallback to redirect
                window.location.href = '/Support/Index';
            }
        }

        function closeSimpleSupportChatModal() {
            document.getElementById('simpleSupportChatModal').classList.add('hidden');
            document.getElementById('simpleChatMessageInput').value = '';
        }

        async function loadSimpleSupportConversation() {
            try {
                const token = localStorage.getItem('authToken');
                if (!token) return;

                const response = await fetch('/api/Support/user-conversations', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const conversations = await response.json();
                    if (conversations.length > 0) {
                        // Use the first conversation
                        const conversation = conversations[0];
                        await loadSimpleSupportMessages(conversation.id);
                    }
                }
            } catch (error) {
                console.error('Error loading conversation:', error);
            }
        }

        async function loadSimpleSupportMessages(conversationId) {
            try {
                const token = localStorage.getItem('authToken');
                if (!token) return;

                const response = await fetch(`/api/Support/conversation/${conversationId}/messages`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const messages = await response.json();
                    displaySimpleSupportMessages(messages);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        function displaySimpleSupportMessages(messages) {
            const container = document.getElementById('simpleChatMessages');
            let html = '';
            
            if (messages.length === 0) {
                html = '<div class="text-center text-gray-500 py-8"><i class="fas fa-comments text-4xl mb-2 text-gray-300"></i><p>Bắt đầu cuộc trò chuyện với admin</p></div>';
            } else {
                messages.forEach(message => {
                    const isFromAdmin = message.isFromAdmin;
                    const messageClass = isFromAdmin ? 'bg-blue-100 ml-8' : 'bg-white mr-8';
                    const time = new Date(message.sentAt).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
                    const senderName = isFromAdmin ? 'Admin' : 'Bạn';
                    
                    html += `
                        <div class="mb-3 ${isFromAdmin ? 'text-right' : 'text-left'}">
                            <div class="inline-block ${messageClass} rounded-lg px-3 py-2 max-w-xs lg:max-w-md">
                                <div class="text-sm">${message.content}</div>
                                <div class="text-xs text-gray-500 mt-1">${time}</div>
                            </div>
                            <div class="text-xs text-gray-400 mt-1">${senderName}</div>
                        </div>
                    `;
                });
            }
            
            container.innerHTML = html;
            container.scrollTop = container.scrollHeight;
        }

        async function sendSimpleSupportMessage() {
            const input = document.getElementById('simpleChatMessageInput');
            const content = input.value.trim();
            
            if (!content) {
                showSimpleErrorMessage('Vui lòng nhập nội dung tin nhắn');
                return;
            }

            try {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    showSimpleErrorMessage('Vui lòng đăng nhập lại');
                    return;
                }

                // Get or create conversation
                let conversationId = await getOrCreateSimpleConversation();
                
                if (!conversationId) {
                    showSimpleErrorMessage('Không thể tạo cuộc trò chuyện');
                    return;
                }

                // Send message
                const response = await fetch(`/api/Support/conversation/${conversationId}/send-message`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(content)
                });

                if (response.ok) {
                    input.value = '';
                    await loadSimpleSupportMessages(conversationId);
                    showSimpleSuccessMessage('Tin nhắn đã được gửi!');
                } else {
                    const error = await response.text();
                    showSimpleErrorMessage('Lỗi: ' + error);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showSimpleErrorMessage('Lỗi kết nối: ' + error.message);
            }
        }

        async function getOrCreateSimpleConversation() {
            try {
                const token = localStorage.getItem('authToken');
                if (!token) return null;

                // Check if user has existing conversation
                const response = await fetch('/api/Support/user-conversations', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const conversations = await response.json();
                    if (conversations.length > 0) {
                        return conversations[0].id;
                    }
                }

                // Create new conversation
                const createResponse = await fetch('/api/Support/create-conversation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        initialMessage: 'Bắt đầu cuộc trò chuyện'
                    })
                });

                if (createResponse.ok) {
                    const result = await createResponse.json();
                    return result.conversationId;
                }
            } catch (error) {
                console.error('Error getting/creating conversation:', error);
            }
            return null;
        }

        function showSimpleSuccessMessage(message) {
            if (window.Swal) {
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: message,
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                alert(message);
            }
        }

        function showSimpleErrorMessage(message) {
            if (window.Swal) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: message,
                    confirmButtonText: 'Đóng'
                });
            } else {
                alert(message);
            }
        }

        // Check for unread support messages
        async function checkUnreadSupportMessages() {
            if (!authService.isAuthenticated()) return;
            
            try {
                const token = localStorage.getItem('authToken');
                const response = await fetch('/api/Support/user-conversations', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const conversations = await response.json();
                    const totalUnread = conversations.reduce((sum, conv) => sum + (conv.unreadCount || 0), 0);
                    
                    // Update unread badge
                    const unreadBadge = document.getElementById('supportUnreadBadge');
                    if (unreadBadge) {
                        if (totalUnread > 0) {
                            unreadBadge.textContent = totalUnread > 99 ? '99+' : totalUnread;
                            unreadBadge.classList.remove('hidden');
                            
                            // Add pulse animation for new messages
                            unreadBadge.classList.add('animate-pulse');
                            setTimeout(() => {
                                unreadBadge.classList.remove('animate-pulse');
                            }, 2000);
                        } else {
                            unreadBadge.classList.add('hidden');
                        }
                    }
                }
            } catch (error) {
                console.error('Error checking unread support messages:', error);
            }
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

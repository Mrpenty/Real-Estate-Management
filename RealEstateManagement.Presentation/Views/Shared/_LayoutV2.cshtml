<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SREM.AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'orange': {
                            50: '#fff7ed',
                            100: '#ffedd5',
                            200: '#fed7aa',
                            300: '#fdba74',
                            400: '#fb923c',
                            500: '#f97316',
                            600: '#ea580c',
                            700: '#c2410c',
                            800: '#9a3412',
                            900: '#7c2d12',
                        }
                    },
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                    }
                }
            }
        }
    </script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/floating-support-button.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/RealEstateManagement.Presentation.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/layout-common.css" asp-append-version="true" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    
    <script src="~/js/config.js" asp-append-version="true"></script>
    <script src="~/js/authService.js" asp-append-version="true"></script>
    <script src="~/js/propertyService.js"></script>
    <script src="~/js/postPropertyService.js"></script>
    <script src="~/js/helper.js" asp-append-version="true"></script>
    <script src="~/js/compareProperty.js" asp-append-version="true"></script>
    <script src="~/js/userSignalR.js" asp-append-version="true"></script>
    <script src="~/js/supportChat.js" asp-append-version="true"></script>


    @await RenderSectionAsync("Styles", required: false)
    
</head>
<body class="font-inter bg-gray-50">
    <!-- Header -->
    <header class="header">
        <div class="header-container">
            <div class="header-content">
                <!-- Logo -->
                <div class="logo-section">
                    <div class="logo-container" onclick="window.location.href='/'">
                        <div class="logo-icon">
                            <i class="fas fa-home"></i>
                        </div>
                        <div class="logo-text">
                            <h1>SREM.AI</h1>
                            <p>Smart Real Estate Management</p>
                        </div>
                    </div>
                </div>

                <!-- Desktop Navigation -->
                <nav class="nav-section">
                    <a href="/" class="nav-link">
                        <i class="fas fa-home"></i>
                        <span>Trang chủ</span>
                    </a>
                    <a href="/Home/News" class="nav-link">
                        <i class="fas fa-newspaper"></i>
                        <span>Tin tức</span>
                    </a>
                    <a onclick="showFilterPopup('compare-popup')" class="nav-link" style="cursor: pointer;">
                        <i class="fas fa-balance-scale"></i>
                        <span>So sánh</span>
                    </a>
                    <a href="/Home/MyReports" class="nav-link">
                        <i class="fas fa-chart-bar"></i>
                        <span>Báo cáo</span>
                    </a>
                    <a href="#" onclick="getFavoriteList(event)" class="nav-link">
                        <i class="fas fa-heart"></i>
@*                         <span>Yêu thích</span>
 *@                    </a>
                    <a href="#" onclick="getNotificationList(event)" class="nav-link" style="position: relative;">
                        <i class="fas fa-bell"></i>
@*                         <span>Thông báo</span>
 *@                        <span id="notificationCount" class="support-unread-badge" style="position: absolute; top: -0.5rem; right: -0.5rem; width: 1.25rem; height: 1.25rem; font-size: 0.625rem;"></span>
                    </a>

                    <!-- Wallet Display -->
                    <div id="wallet-display" class="wallet-display" style="display: none;">
                        <i class="fas fa-wallet"></i>
                        <span>Ví: <span id="wallet-balance" class="wallet-balance">0 VNĐ</span></span>
                    </div>
                </nav>

                    <!-- Notification Dropdown -->
                <div id="notificationDropdown" class="notification-dropdown">
                    <div class="notification-header">
                        <h3 class="notification-title">Thông báo</h3>
                        </div>
                    <div id="notificationList" class="notification-list">
                            <!-- Notifications will be loaded here -->
                        </div>
                    </div>

                <!-- User Actions -->
                <div class="user-actions">
                    <!-- Mobile Menu Button -->
                    <button id="mobileMenuBtn" class="mobile-menu-btn">
                        <i class="fas fa-bars"></i>
                    </button>



                    <!-- Auth Buttons / User Menu -->
                    <div class="auth-buttons">
                        <!-- Register Button -->
                        <a id="registerNavItem" href="/Auth/Register" class="register-btn">
                            <i class="fas fa-user-plus"></i>
                            <span>Đăng ký</span>
                        </a>

                        <!-- Login Button -->
                        <a id="loginNavItem" href="/Auth/Login" class="login-btn">
                            <i class="fas fa-sign-in-alt"></i>
                            <span>Đăng nhập</span>
                        </a>

                        <!-- User Profile Dropdown -->
                        <div id="userProfileNavItem" class="user-profile-dropdown">
                            <button onclick="toggleDropdown()" class="user-profile-btn">
                                <div class="user-avatar">
                                    <i class="fas fa-user"></i>
                                </div>
                                <span id="userProfileLink" class="user-name"></span>
                                <i class="fas fa-chevron-down dropdown-arrow" id="dropdownIcon"></i>
                            </button>

                            <!-- User Dropdown Menu -->
                            <div id="userDropdown" class="user-dropdown-menu">
                                <div class="dropdown-menu-content">
                                    <a href="/Chat/Index" class="dropdown-menu-item">
                                        <i class="fas fa-comment-dots"></i>
                                        <span>Tin nhắn</span>
                                    </a>
                                    <a href="/Profile" class="dropdown-menu-item">
                                        <i class="fas fa-user"></i>
                                        <span>Trang cá nhân</span>
                                    </a>
                                    <a href="/Home/ListInterest" class="dropdown-menu-item">
                                        <i class="fas fa-list"></i>
                                        <span>Danh sách quan tâm</span>
                                    </a>
                                    <a href="/Deposit" class="dropdown-menu-item">
                                        <i class="fas fa-wallet"></i>
                                        <span>Nạp tiền</span>
                                    </a>
                                    <a href="/TransactionHistory" class="dropdown-menu-item">
                                        <i class="fas fa-history"></i>
                                        <span>Lịch sử thanh toán</span>
                                    </a>
                                    <hr class="dropdown-divider">
                                    <a href="#" onclick="handleLogout(event)" class="dropdown-menu-item logout-btn">
                                        <i class="fas fa-sign-out-alt"></i>
                                        <span>Đăng xuất</span>
                                    </a>
                                </div>
                            </div>
                        </div>

                        <!-- Post Property Button -->
                        <a id="postPropertyButton" href="#" onclick="createProperty(event)" class="post-property-btn" style="display: none;">
                            <i class="fas fa-plus"></i>
                            <span class=" lg:block">Bài đăng</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- Main Content -->
    <main class="main-content">
        <div class="main-container">
            <div class="main-wrapper">
            @RenderBody()
            </div>
        </div>
    </main>

    <!-- Floating Support Chat Button -->
    <div class="floating-support-btn">
        <button onclick="openSimpleSupportChat()" class="support-btn">
            <i class="fas fa-comments"></i>
            
            <!-- Unread Badge -->
            <div id="supportUnreadBadge" class="support-unread-badge" style="display: none;">
                0
            </div>
            
            <!-- Tooltip -->
            <div class="support-tooltip">
                Liên hệ hỗ trợ
                <div class="tooltip-arrow"></div>
            </div>
        </button>
    </div>

    <!-- Simple Support Chat Modal for Users -->
    <div id="simpleSupportChatModal" class="support-chat-modal">
        <div class="chat-modal-content">
            <div class="chat-modal-header">
                    <div>
                    <h3 class="chat-modal-title">💬 Chat với Admin</h3>
                    <p class="chat-modal-subtitle">Hãy để lại tin nhắn, admin sẽ phản hồi sớm nhất!</p>
                    </div>
                <button onclick="closeSimpleSupportChatModal()" class="chat-modal-close">
                    <i class="fas fa-times"></i>
                    </button>
                </div>
                
            <div id="simpleChatMessages" class="chat-messages-area">
                    <div class="text-center text-gray-500 py-8">
                        <i class="fas fa-comments text-4xl mb-2 text-gray-300"></i>
                        <p>Bắt đầu cuộc trò chuyện với admin</p>
                    </div>
                </div>
                
            <div class="chat-input-area">
                    <input type="text" id="simpleChatMessageInput" 
                       class="chat-input"
                           placeholder="Nhập tin nhắn của bạn...">
                <button onclick="sendSimpleSupportMessage()" class="chat-send-btn">
                        Gửi
                    </button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="footer-grid">
                <!-- Company Info -->
                <div class="footer-company-info">
                    <div class="footer-logo">
                        <div class="footer-logo-icon">
                            <i class="fas fa-home"></i>
                        </div>
                        <h3 class="footer-logo-text">SREM.AI</h3>
                    </div>
                    <p class="footer-description">
                        Nền tảng quản lý bất động sản thông minh, kết nối chủ nhà và người thuê một cách hiệu quả và an toàn nhất.
                    </p>
                    <div class="social-links">
                        <a href="#" class="social-link">
                            <i class="fab fa-facebook"></i>
                        </a>
                        <a href="#" class="social-link">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a href="#" class="social-link">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="#" class="social-link">
                            <i class="fab fa-linkedin"></i>
                        </a>
                    </div>
                </div>

                <!-- Quick Links -->
                <div>
                    <h4>Liên kết nhanh</h4>
                    <ul class="footer-links">
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Về chúng tôi</span></a></li>
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Dịch vụ</span></a></li>
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Tin tức</span></a></li>
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Liên hệ</span></a></li>
                    </ul>
                </div>

                <!-- Support -->
                <div>
                    <h4>Hỗ trợ</h4>
                    <ul class="footer-links">
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Trung tâm trợ giúp</span></a></li>
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Điều khoản sử dụng</span></a></li>
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>Chính sách bảo mật</span></a></li>
                        <li><a href="#" class="footer-link"><i class="fas fa-chevron-right"></i><span>FAQ</span></a></li>
                    </ul>
                </div>
            </div>

            <div class="footer-bottom">
                <p class="footer-copyright">&copy; 2024 SREM.AI. Tất cả quyền được bảo lưu.</p>
            </div>
        </div>
    </footer>

    <!-- Compare Popup -->
    <div id="compare-popup" class="compare-popup" style="display: none;">
        <div class="compare-popup-content">
            <div class="compare-popup-header">
                <div class="flex justify-between items-center">
                    <h2 class="compare-popup-title">
                        <i class="fas fa-balance-scale text-orange-500 mr-3"></i>
                        So sánh bất động sản
                    </h2>
                    <button onclick="hideFilterPopup('compare-popup')" class="compare-popup-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>

            <div class="compare-popup-body">
                <div id="compare-table-container" class="overflow-x-auto">
                    <table class="compare-table" id="compare-table">
                        <!-- Table content will be populated by JavaScript -->
                    </table>
                </div>
                <p id="compare-warning" class="compare-warning">
                    <i class="fas fa-exclamation-triangle mr-2"></i>
                    Vui lòng chọn ít nhất 2 và không quá 3 mục để so sánh.
                </p>
            </div>
        </div>
    </div>

    <script>
        // Function to update navigation based on auth status
        function updateNavigation() {
            const isAuthenticated = authService.isAuthenticated();
            const loginNavItem = document.getElementById('loginNavItem');
            const registerNavItem = document.getElementById('registerNavItem');
            const userProfileNavItem = document.getElementById('userProfileNavItem');
            const userProfileLink = document.getElementById('userProfileLink');
            const notificationBell = document.querySelector('a[onclick="getNotificationList(event)"]');
            const postPropertyButton = document.getElementById('postPropertyButton'); // Lấy nút Đăng tin

            if (isAuthenticated) {
                if (loginNavItem) loginNavItem.style.display = 'none';
                if (registerNavItem) registerNavItem.style.display = 'none';
                if (userProfileNavItem) userProfileNavItem.style.display = 'flex';
                if (notificationBell) notificationBell.style.display = 'inline-flex';

                // Set user name in dropdown
                const user = authService.getCurrentUser();
                if (user && user.name && userProfileLink) {
                    userProfileLink.innerText = `Chào, ${user.name}`;
                    userProfileLink.style.display = 'inline';
                } else if (userProfileLink) {
                    userProfileLink.style.display = 'none';
                }

                // Cập nhật hiển thị nút Đăng tin dựa trên vai trò
                if (user && user.role === 'Landlord') {
                    if (postPropertyButton) postPropertyButton.style.display = 'flex';
                } else {
                    if (postPropertyButton) postPropertyButton.style.display = 'none';
                }

                updateWalletBalance();
            } else {
                if (loginNavItem) loginNavItem.style.display = 'flex';
                if (registerNavItem) registerNavItem.style.display = 'flex';
                if (userProfileNavItem) userProfileNavItem.style.display = 'none';
                if (notificationBell) notificationBell.style.display = 'none';
                if (postPropertyButton) postPropertyButton.style.display = 'none'; // Ẩn nút nếu chưa đăng nhập

                // Ẩn ví khi người dùng chưa đăng nhập
                const walletDisplay = document.getElementById('wallet-display');
                if (walletDisplay) walletDisplay.style.display = 'none';
            }
        }


        // Toggle dropdown
        function toggleDropdown() {
            const dropdown = document.getElementById('userDropdown');
            dropdown.classList.toggle('show');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('userDropdown');
            const userProfileNavItem = document.getElementById('userProfileNavItem');

            if (!userProfileNavItem.contains(e.target)) {
                dropdown.classList.remove('show');
            }
        });

        // Handle logout
        async function handleLogout(event) {
            event.preventDefault();
            try {
                await authService.logout();
                updateNavigation();
                showSuccessMessage('Đăng xuất thành công!');
                setTimeout(() => {
                    window.location.href = '/';
                }, 1200); // Wait 1.2s for user to see the message
            } catch (error) {
                console.error('Logout failed:', error);
                alert('Logout failed. Please try again.');
            }
        }

        // Simple success message function (add to your script section)
        function showSuccessMessage(message) {
            let msgDiv = document.createElement('div');
            msgDiv.innerText = message;
            msgDiv.className = 'fixed top-6 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded shadow-lg z-50';
            document.body.appendChild(msgDiv);
            setTimeout(() => {
                msgDiv.remove();
            }, 1000);
        }

        // Get favorite list
        function getFavoriteList(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (isAuthenticated) {
                window.location.href = '/Home/ListFavorite';
            } else {
                window.location.href = '/Auth/Login';
            }
        }

        // Create property
        function createProperty(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (isAuthenticated) {
                window.location.href = '/PostProperty/ListProperty';
            } else {
                window.location.href = '/Auth/Login';
            }
        }

        // Hàm cập nhật số lượng thông báo chưa đọc khi vào trang
        async function updateNotificationCount() {
            const notificationCount = document.getElementById('notificationCount');
            console.log('updateNotificationCount called');
            console.log('authService.isAuthenticated():', authService.isAuthenticated());
            
            if (!authService.isAuthenticated()) {
                console.log('User not authenticated, skipping notification count update');
                if (notificationCount) notificationCount.textContent = '';
                return;
            }
            try {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    console.warn('No auth token found for notification count update');
                    if (notificationCount) notificationCount.textContent = '';
                    return;
                }
                
                const apiUrl = config.buildApiUrl(config.user.notifications + '/unread-count');
                console.log('config.user.notifications for count:', config.user.notifications);
                console.log('config.buildApiUrl result for count:', apiUrl);
                console.log('Fetching notification count from:', apiUrl);
                console.log('Token being sent for count:', token ? token.substring(0, 20) + '...' : 'No token');
                console.log('Authorization header for count:', `Bearer ${token ? token.substring(0, 20) + '...' : 'No token'}`);
                
                const response = await fetch(apiUrl, { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                console.log('Notification count response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Notification count API Error:', response.status, errorText);
                    throw new Error(`API Error: ${response.status} - ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Notification count data:', data);
                
                const unreadCount = data.data?.unreadCount || 0;
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
            } catch (error) {
                console.error('Error updating notification count:', error);
                if (notificationCount) notificationCount.textContent = '';
            }
        }

        // Update navigation when page loads
        document.addEventListener('DOMContentLoaded', updateNavigation);

        // Set active navigation based on URL parameters
        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const type = urlParams.get('type') || 'room';

            // Remove active class from all nav links
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });

            // Add active class to current type
            const activeLink = document.getElementById(type);
            if (activeLink) {
                activeLink.classList.add('active');
            }
        });


        // Sửa getNotificationList để toggle modal
        async function getNotificationList(event) {
            event.preventDefault();
            console.log('getNotificationList called');
            const isAuthenticated = authService.isAuthenticated();
            console.log('isAuthenticated:', isAuthenticated);
            
            if (!isAuthenticated) {
                console.log('User not authenticated, redirecting to login');
                window.location.href = '/Auth/Login';
                return;
            }
            const dropdown = document.getElementById('notificationDropdown');
            // Nếu dropdown đang mở thì ẩn đi (toggle)
            if (dropdown.style.display !== 'none') {
                closeNotificationDropdown();
                return;
            }
            // Nếu dropdown đang ẩn thì load và hiện
            const notificationList = document.getElementById('notificationList');
            const notificationCount = document.getElementById('notificationCount');
            try {
                // Use the user-specific notifications endpoint instead of all notifications
                const token = localStorage.getItem('authToken');
                if (!token) {
                    throw new Error('No authentication token found');
                }
                
                const apiUrl = config.buildApiUrl(config.user.notifications + '/my-notifications');
                console.log('config.user.notifications:', config.user.notifications);
                console.log('config.buildApiUrl result:', apiUrl);
                console.log('Fetching notifications from:', apiUrl);
                console.log('Token being sent:', token ? token.substring(0, 20) + '...' : 'No token');
                console.log('Authorization header:', `Bearer ${token ? token.substring(0, 20) + '...' : 'No token'}`);
                
                const response = await fetch(apiUrl, { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                console.log('Response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('API Error:', response.status, errorText);
                    throw new Error(`API Error: ${response.status} - ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Notifications data:', data);
                
                const notifications = data.data || [];
                // Update unread count
                const unreadCount = notifications.filter(n => !n.isRead).length;
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                
                // Render notifications with horizontal category tabs
                renderNotificationsWithTabs(notifications);
                
                // Show dropdown first, then position it
                dropdown.style.display = 'block';
                
                // Wait for DOM to update before positioning
                setTimeout(() => {
                    // Position dropdown relative to the clicked notification link
                    if (dropdown && dropdown.style.display !== 'none') {
                        const notificationLink = event.currentTarget;
                        if (notificationLink) {
                            const rect = notificationLink.getBoundingClientRect();
                            
                            // Show dropdown using CSS positioning
                            dropdown.classList.remove('notification-dropdown');
                            dropdown.classList.add('notification-dropdown-positioned');
                            
                            console.log('Dropdown shown using CSS positioning');
                        }
                    }
                }, 50);
            } catch (error) {
                console.error('Error in getNotificationList:', error);
                notificationList.innerHTML = `<p class="text-red-500 text-center p-2">Lỗi khi tải thông báo: ${error.message}</p>`;
            }
        }

        // Global variable to store grouped notifications
        let globalGroupedNotifications = {};

        // Function to render notifications with horizontal category tabs
        function renderNotificationsWithTabs(notifications) {
            const notificationList = document.getElementById('notificationList');
            
            if (notifications.length === 0) {
                notificationList.innerHTML = '<p class="text-gray-500 text-center p-2">Không có thông báo nào.</p>';
                return;
            }

            // Group notifications by type and store globally
            globalGroupedNotifications = {
                all: notifications,
                info: notifications.filter(n => n.type === 'info'),
                warning: notifications.filter(n => n.type === 'warning'),
                alert: notifications.filter(n => n.type === 'alert')
            };

            // Create tabs HTML
            const tabsHTML = `
                <div class="flex border-b border-gray-200 bg-gray-50 rounded-t-lg">
                    <button class="tab-btn active px-4 py-2 text-sm font-medium text-gray-700 bg-white border-b-2 border-orange-500 rounded-t-lg" data-type="all">
                        Tất cả (${globalGroupedNotifications.all.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="info">
                        📋 Thông tin (${globalGroupedNotifications.info.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="warning">
                        ⚠️ Cảnh báo (${globalGroupedNotifications.warning.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="alert">
                        🚨 Báo động (${globalGroupedNotifications.alert.length})
                    </button>
                </div>
                <div id="notificationsContent" class="max-h-80 overflow-y-auto">
                    ${renderNotificationsByType(globalGroupedNotifications.all, 'all')}
                </div>
            `;

            notificationList.innerHTML = tabsHTML;

            // Add event listeners to tabs
            const tabButtons = notificationList.querySelectorAll('.tab-btn');
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all tabs
                    tabButtons.forEach(btn => {
                        btn.classList.remove('active', 'bg-white', 'border-b-2', 'border-orange-500', 'rounded-t-lg');
                        btn.classList.add('text-gray-500');
                    });
                    
                    // Add active class to clicked tab
                    button.classList.add('active', 'bg-white', 'border-b-2', 'border-orange-500', 'rounded-t-lg');
                    button.classList.remove('text-gray-500');
                    button.classList.add('text-gray-700');

                    // Show notifications for selected type
                    const selectedType = button.dataset.type;
                    const notificationsContent = document.getElementById('notificationsContent');
                    notificationsContent.innerHTML = renderNotificationsByType(globalGroupedNotifications[selectedType], selectedType);
                });
            });
        }

        // Function to render notifications by type
        function renderNotificationsByType(notifications, type) {
            if (notifications.length === 0) {
                return '<p class="text-gray-500 text-center p-4">Không có thông báo nào.</p>';
            }

            const notificationsHTML = notifications.map(notification => {
                let typeColor = '';
                let typeBgColor = '';
                let typeText = '';
                
                switch(notification.type) {
                    case 'info':
                        typeColor = 'text-blue-500';
                        typeBgColor = 'bg-blue-50';
                        typeText = 'Thông tin';
                        break;
                    case 'warning':
                        typeColor = 'text-yellow-500';
                        typeBgColor = 'bg-yellow-50';
                        typeText = 'Cảnh báo';
                        break;
                    case 'alert':
                        typeColor = 'text-red-500';
                        typeBgColor = 'bg-red-50';
                        typeText = 'Báo động';
                        break;
                }

                return `
                    <div class="notification-item p-3 bg-white hover:bg-orange-50 cursor-pointer transition-colors duration-200 border-b border-gray-100 last:border-b-0" data-notification-id="${notification.notificationId}">
                        <div class="flex justify-between items-start gap-3">
                            <div class="flex-1 min-w-0">
                                <h4 class="text-sm font-medium text-gray-900 truncate">${notification.title}</h4>
                                <p class="text-xs text-gray-600 mt-1 line-clamp-2">${notification.content}</p>
                                <p class="text-xs text-gray-400 mt-1">${new Date(notification.createdAt).toLocaleString('vi-VN')}</p>
                            </div>
                            <div class="flex flex-col items-end space-y-1 flex-shrink-0">
                                <span class="text-xs font-medium px-2 py-1 rounded-full ${typeColor} ${typeBgColor}">
                                    ${typeText}
                                </span>
                                ${!notification.isRead ? '<div class="w-2 h-2 bg-orange-500 rounded-full"></div>' : ''}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            // Add event listeners to notification items
            setTimeout(() => {
                const notificationItems = document.querySelectorAll('.notification-item');
                notificationItems.forEach(item => {
                    item.addEventListener('click', () => {
                        const notificationId = item.dataset.notificationId;
                        const notification = notifications.find(n => n.notificationId == notificationId);
                        if (notification) {
                            showNotificationDetail(notification);
                        }
                    });
                });
            }, 0);

            return notificationsHTML;
        }

        // Show notification detail within dropdown and mark as read
        async function showNotificationDetail(notification) {
            const notificationList = document.getElementById('notificationList');

            try {
                const token = localStorage.getItem('authToken');
                
                // Mark notification as read
                const markReadResponse = await fetch(config.buildApiUrl(config.user.notifications + `/mark-as-read/${notification.notificationId}`), {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                // Get notification detail
                const response = await fetch(config.buildApiUrl(`/api/Notification/${notification.notificationId}`), {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch notification detail');
                }

                const data = await response.json();
                const detail = data.data;

                // Replace list with detail view
                notificationList.innerHTML = `
                    <div class="p-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-gray-900">${detail.title}</h3>
                            <button id="backToList" class="text-orange-500 hover:text-orange-600 font-medium">Quay lại</button>
                        </div>
                        <p class="text-gray-600 mb-4">${detail.content}</p>
                        <p class="text-sm text-gray-400 mb-2">Loại: ${detail.type === 'info' ? 'Thông tin' : detail.type === 'warning' ? 'Cảnh báo' : 'Báo động'}</p>
                        <p class="text-sm text-gray-400">Thời gian: ${new Date(detail.createdAt).toLocaleString('vi-VN')}</p>
                    </div>
                `;

                const backToList = document.getElementById('backToList');
                  backToList.onclick = (e) => {
                  e.stopPropagation(); 
                    // Refresh the notifications list
                    refreshNotifications();
        };

                // Update notification count after marking as read
                updateNotificationCount();
                
            } catch (error) {
                console.error('Error fetching notification detail:', error);
                notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Không thể tải chi tiết thông báo.</p>';
            }
        }

        // Function to refresh notifications
        async function refreshNotifications() {
            try {
                const token = localStorage.getItem('authToken');
                const response = await fetch(config.buildApiUrl(config.user.notifications + '/my-notifications'), { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notifications');
                const data = await response.json();
                const notifications = data.data || [];
                
                // Update unread count
                const unreadCount = notifications.filter(n => !n.isRead).length;
                const notificationCount = document.getElementById('notificationCount');
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                
                // Re-render notifications with tabs
                renderNotificationsWithTabs(notifications);
            } catch (error) {
                console.error('Error refreshing notifications:', error);
            }
        }

                        // Function to close notification dropdown and reset positioning
                function closeNotificationDropdown() {
                    const dropdown = document.getElementById('notificationDropdown');
                    if (dropdown) {
                        dropdown.style.display = 'none';
                        // Reset positioning classes
                        dropdown.classList.remove('notification-dropdown-positioned');
                        dropdown.classList.add('notification-dropdown');
                        // Reset inline styles
                        dropdown.style.left = '';
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('notificationDropdown');
            const notificationIcon = document.querySelector('a[onclick="getNotificationList(event)"]');

            if (dropdown && dropdown.style.display !== 'none' && !notificationIcon.contains(e.target) && !dropdown.contains(e.target)) {
                closeNotificationDropdown();
            }
        });

        // Close dropdown when scrolling
        window.addEventListener('scroll', () => {
            const dropdown = document.getElementById('notificationDropdown');
            if (dropdown && dropdown.style.display !== 'none') {
                closeNotificationDropdown();
            }
        });

        function hideFilterPopup(id) {
            const popup = document.getElementById(id);
            if (popup) {
                popup.style.display = 'none';
            }
        }

        function showFilterPopup(id) {
            const popup = document.getElementById(id);
            if (popup) {
                popup.style.display = 'flex';
            if(id == 'compare-popup'){
              renderComparePopup();
                }
            }
        }

        // Update navigation and notification count on load
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM Content Loaded - Starting initialization');
            console.log('Auth service available:', typeof authService !== 'undefined');
            console.log('Config available:', typeof config !== 'undefined');
            
            if (typeof authService !== 'undefined') {
                console.log('Is authenticated:', authService.isAuthenticated());
                const token = localStorage.getItem('authToken');
                console.log('Token exists:', !!token);
                if (token) {
                    console.log('Token length:', token.length);
                    console.log('Token starts with:', token.substring(0, 20) + '...');
                    
                    // Check token validity
                    checkTokenValidity();
                }
            }
            
            if (typeof config !== 'undefined') {
                console.log('API Base URL:', config.apiBaseUrl);
                console.log('User notifications endpoint:', config.user.notifications);
                
                // Test API connectivity
                testApiConnectivity();
                
                // Test token with API if user is authenticated
                if (authService.isAuthenticated()) {
                    testTokenWithAPI();
                }
            }
            
            updateNavigation();
            updateNotificationCount();
        });
        
        // Test API connectivity
        async function testApiConnectivity() {
            try {
                console.log('Testing API connectivity...');
                const response = await fetch(config.apiBaseUrl + '/api/UserNotification/my-notifications', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                console.log('API connectivity test response status:', response.status);
                if (response.status === 401) {
                    console.log('API is reachable but requires authentication (401)');
                } else if (response.status === 200) {
                    console.log('API is reachable and working');
                } else {
                    console.log('API response:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('API connectivity test failed:', error);
            }
        }
        
        // Test token with authenticated API call
        async function testTokenWithAPI() {
            const token = localStorage.getItem('authToken');
            if (!token) {
                console.log('No token to test');
                return;
            }
            
            try {
                console.log('Testing token with authenticated API call...');
                const response = await fetch(config.buildApiUrl(config.user.notifications + '/my-notifications'), {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                console.log('Token test response status:', response.status);
                if (response.status === 200) {
                    console.log('Token is valid and working!');
                } else if (response.status === 401) {
                    console.log('Token is invalid or expired (401)');
                    const errorText = await response.text();
                    console.log('Error response:', errorText);
                } else {
                    console.log('Unexpected response:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('Token test failed:', error);
            }
        }
        
        // Check token validity
        function checkTokenValidity() {
            const token = localStorage.getItem('authToken');
            if (!token) {
                console.log('No token found');
                return false;
            }
            
            // Clean the token (remove any extra whitespace or quotes)
            const cleanToken = token.trim().replace(/^["']|["']$/g, '');
            if (cleanToken !== token) {
                console.log('Token had extra characters, cleaned');
                localStorage.setItem('authToken', cleanToken);
            }
            
            try {
                const payload = JSON.parse(atob(cleanToken.split('.')[1]));
                const now = Date.now() / 1000;
                const exp = payload.exp;
                
                console.log('Token payload:', payload);
                console.log('Current time:', now);
                console.log('Token expiration:', exp);
                console.log('Token expired:', now > exp);
                console.log('Time until expiration:', exp - now, 'seconds');
                
                if (now > exp) {
                    console.log('Token has expired, clearing...');
                    localStorage.removeItem('authToken');
                    localStorage.removeItem('authTokenExpiry');
                    return false;
                }
                
                return true;
            } catch (error) {
                console.error('Error parsing token:', error);
                console.log('Token format might be invalid');
                return false;
            }
        }

                // Hàm mới để lấy và cập nhật số dư ví
        async function updateWalletBalance() {
            const walletDisplay = document.getElementById('wallet-display');
            const walletBalanceSpan = document.getElementById('wallet-balance');

            if (!authService.isAuthenticated()) {
                if (walletDisplay) walletDisplay.style.display = 'none'; // Ẩn ví nếu chưa đăng nhập
                return;
            }

            // Hiển thị khung ví nếu đã đăng nhập
            if (walletDisplay) walletDisplay.style.display = 'flex';

            try {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    console.warn("No auth token found, cannot fetch wallet balance.");
                    if (walletDisplay) walletDisplay.classList.add('hidden');
                    return;
                }

                const response = await fetch(config.buildApiUrl(config.user.wallet + '/balance'), {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    // Xử lý lỗi nếu API không thành công
                    const errorResponse = await response.json();
                    console.error('Failed to fetch wallet balance:', errorResponse.message || 'Unknown error');
                    if (walletBalanceSpan) walletBalanceSpan.textContent = 'Lỗi!'; // Hiển thị lỗi
                    return;
                }

                const data = await response.json();
                const balance = data.balance; // Giả định backend trả về JSON dạng { balance: 123456 }

                if (walletBalanceSpan) {
                    walletBalanceSpan.textContent = `${balance.toLocaleString('vi-VN')} VNĐ`;
                }

            } catch (error) {
                console.error("Error fetching wallet balance:", error);
                if (walletBalanceSpan) walletBalanceSpan.textContent = 'Lỗi tải!';
            }
        }

                // Support Chat functionality
                function openSimpleSupportChat() {
                    const modal = document.getElementById('simpleSupportChatModal');
                    if (modal) {
                        modal.classList.add('show');
                        // Focus on input after modal opens
                        setTimeout(() => {
                            const input = document.getElementById('simpleChatMessageInput');
                            if (input) {
                                input.focus();
                            }
                        }, 100);
                        
                        // Load existing conversation
                        loadSimpleSupportConversation();
                    }
                }

                function closeSimpleSupportChatModal() {
                    const modal = document.getElementById('simpleSupportChatModal');
                    if (modal) {
                        modal.classList.remove('show');
                        // Clear input when closing
                        const input = document.getElementById('simpleChatMessageInput');
                        if (input) {
                            input.value = '';
                        }
                    }
                }

                function sendSimpleSupportMessage() {
                    const input = document.getElementById('simpleChatMessageInput');
                    const message = input.value.trim();
                    
                    if (!message) {
                        return;
                    }
                    
                    // Show loading state
                    const sendBtn = document.querySelector('.chat-send-btn');
                    const originalText = sendBtn.textContent;
                    sendBtn.textContent = 'Đang gửi...';
                    sendBtn.disabled = true;
                    
                    // Send message to API
                    sendSupportMessageToAPI(message).then(() => {
                        // Clear input
                        input.value = '';
                        // Reload conversation to show new message
                        loadSimpleSupportConversation();
                    }).catch((error) => {
                        console.error('Error sending message:', error);
                        // Show error message
                        showSupportError('Không thể gửi tin nhắn. Vui lòng thử lại.');
                    }).finally(() => {
                        // Reset button state
                        sendBtn.textContent = originalText;
                        sendBtn.disabled = false;
                    });
                }

                // Send message to API
                async function sendSupportMessageToAPI(message) {
                    try {
                        const token = localStorage.getItem('authToken');
                        if (!token) {
                            throw new Error('Không có token xác thực');
                        }

                        // Get or create conversation first
                        let conversationId = await getOrCreateSupportConversation();
                        if (!conversationId) {
                            throw new Error('Không thể tạo cuộc trò chuyện');
                        }

                        // Send message using config endpoints - backend expects just the content string
                        const response = await fetch(config.buildApiUrl(`${config.chat.sendSupportMessage}/${conversationId}/send-message`), {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${token}`
                            },
                            body: JSON.stringify(message) // Backend expects just the message content
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`API Error: ${response.status} - ${errorText}`);
                        }

                        return await response.json();
                    } catch (error) {
                        console.error('Error in sendSupportMessageToAPI:', error);
                        throw error;
                    }
                }

                // Get or create support conversation
                async function getOrCreateSupportConversation() {
                    try {
                        const token = localStorage.getItem('authToken');
                        if (!token) {
                            throw new Error('Không có token xác thực');
                        }

                        // Check existing conversations using config endpoints
                        const response = await fetch(config.buildApiUrl(config.chat.userSupportConversations), {
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });

                        if (response.ok) {
                            const conversations = await response.json();
                            if (conversations.length > 0) {
                                return conversations[0].id;
                            }
                        }

                        // Create new conversation if none exists
                        const createResponse = await fetch(config.buildApiUrl(config.chat.createSupportConversation), {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${token}`
                            },
                            body: JSON.stringify({
                                initialMessage: 'Bắt đầu cuộc trò chuyện hỗ trợ'
                            })
                        });

                        if (createResponse.ok) {
                            const result = await createResponse.json();
                            return result.conversationId;
                        } else {
                            const errorText = await createResponse.text();
                            console.error('Create conversation error:', errorText);
                            throw new Error('Không thể tạo cuộc trò chuyện mới');
                        }
                    } catch (error) {
                        console.error('Error in getOrCreateSupportConversation:', error);
                        throw error;
                    }
                }

                // Load support conversation
                async function loadSimpleSupportConversation() {
                    try {
                        const token = localStorage.getItem('authToken');
                        if (!token) {
                            showSupportError('Vui lòng đăng nhập lại');
                            return;
                        }

                        const response = await fetch(config.buildApiUrl(config.chat.userSupportConversations), {
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });

                        if (response.ok) {
                            const conversations = await response.json();
                            if (conversations.length > 0) {
                                const conversation = conversations[0];
                                await loadSupportMessages(conversation.id);
                            } else {
                                // Show empty state
                                const messagesArea = document.getElementById('simpleChatMessages');
                                messagesArea.innerHTML = `
                                    <div class="text-center text-gray-500 py-8">
                                        <i class="fas fa-comments text-4xl mb-2 text-gray-300"></i>
                                        <p>Bắt đầu cuộc trò chuyện với admin</p>
                                    </div>
                                `;
                            }
                        } else {
                            throw new Error('Không thể tải cuộc trò chuyện');
                        }
                    } catch (error) {
                        console.error('Error loading conversation:', error);
                        showSupportError('Không thể tải cuộc trò chuyện');
                    }
                }

                // Load support messages
                async function loadSupportMessages(conversationId) {
                    try {
                        const token = localStorage.getItem('authToken');
                        if (!token) return;

                        const response = await fetch(config.buildApiUrl(`${config.chat.supportMessages}/${conversationId}/messages`), {
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });

                        if (response.ok) {
                            const messages = await response.json();
                            displaySupportMessages(messages);
                        } else {
                            throw new Error('Không thể tải tin nhắn');
                        }
                    } catch (error) {
                        console.error('Error loading messages:', error);
                        showSupportError('Không thể tải tin nhắn');
                    }
                }

                // Display support messages
                function displaySupportMessages(messages) {
                    const messagesArea = document.getElementById('simpleChatMessages');
                    
                    if (messages.length === 0) {
                        messagesArea.innerHTML = `
                            <div class="text-center text-gray-500 py-8">
                                <i class="fas fa-comments text-4xl mb-2 text-gray-300"></i>
                                <p>Bắt đầu cuộc trò chuyện với admin</p>
                            </div>
                        `;
                        return;
                    }

                    let html = '';
                    messages.forEach(message => {
                        // Backend returns IsFromAdmin and SenderRole
                        const isFromAdmin = message.isFromAdmin || message.senderRole === 'Admin';
                        const messageClass = isFromAdmin ? 'bg-gray-300 text-gray-800' : 'bg-red-500 text-white';
                        const time = new Date(message.sentAt).toLocaleTimeString('vi-VN', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                        });
                        const senderName = isFromAdmin ? 'Admin' : 'Bạn';
                        const alignment = isFromAdmin ? 'text-left' : 'text-right';
                        
                        html += `
                            <div class="mb-3 ${alignment}">
                                <div class="inline-block ${messageClass} px-3 py-2 rounded-lg max-w-xs lg:max-w-md">
                                    <div class="text-sm">${message.content}</div>
                                    <div class="text-xs ${isFromAdmin ? 'text-gray-500' : 'text-gray-300'} mt-1">${time}</div>
                                </div>
                                <div class="text-xs text-gray-400 mt-1">${senderName}</div>
                            </div>
                        `;
                    });
                    
                    messagesArea.innerHTML = html;
                    messagesArea.scrollTop = messagesArea.scrollHeight;
                }

                // Show support error
                function showSupportError(message) {
                    if (window.Swal) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: message,
                            confirmButtonText: 'Đóng'
                        });
                    } else {
                        alert(message);
                    }
                }

                // Close modal when clicking outside
                document.addEventListener('click', function(e) {
                    const modal = document.getElementById('simpleSupportChatModal');
                    if (modal && e.target === modal) {
                        closeSimpleSupportChatModal();
                    }
                });

                // Close modal with Escape key
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        const modal = document.getElementById('simpleSupportChatModal');
                        if (modal && modal.classList.contains('show')) {
                            closeSimpleSupportChatModal();
                        }
                    }
                });

                // Add Enter key support for chat input
                document.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        const modal = document.getElementById('simpleSupportChatModal');
                        const input = document.getElementById('simpleChatMessageInput');
                        if (modal && modal.classList.contains('show') && input && document.activeElement === input) {
                            sendSimpleSupportMessage();
                        }
                    }
                });

                // Auto-refresh support chat every 10 seconds when modal is open
                setInterval(() => {
                    const modal = document.getElementById('simpleSupportChatModal');
                    if (modal && modal.classList.contains('show')) {
                        loadSimpleSupportConversation();
                    }
                }, 10000);
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

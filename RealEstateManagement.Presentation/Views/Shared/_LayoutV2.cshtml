<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SREM.AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'orange': {
                            50: '#fff7ed',
                            100: '#ffedd5',
                            200: '#fed7aa',
                            300: '#fdba74',
                            400: '#fb923c',
                            500: '#f97316',
                            600: '#ea580c',
                            700: '#c2410c',
                            800: '#9a3412',
                            900: '#7c2d12',
                        }
                    },
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                    }
                }
            }
        }
    </script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/floating-support-button.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/RealEstateManagement.Presentation.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/_Layout.css" asp-append-version="true" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    
    <script src="~/js/config.js" asp-append-version="true"></script>
    <script src="~/js/authService.js" asp-append-version="true"></script>
    <script src="~/js/propertyService.js"></script>
    <script src="~/js/postPropertyService.js"></script>
    <script src="~/js/helper.js" asp-append-version="true"></script>
    <script src="~/js/compareProperty.js" asp-append-version="true"></script>
    <script src="~/js/userSignalR.js" asp-append-version="true"></script>
    <script src="~/js/supportChat.js" asp-append-version="true"></script>


    @await RenderSectionAsync("Styles", required: false)
    
</head>
<body class="font-inter bg-gray-50">
    <!-- Header -->
    <header class="gradient-bg glass-effect shadow-premium sticky top-0 z-50 border-b border-white/20">
        <div class="container mx-auto px-4 lg:px-6 py-4">
            <div class="flex items-center justify-between">
                <!-- Logo -->
                <div class="flex items-center">
                    <div class="flex items-center space-x-3 cursor-pointer group" onclick="window.location.href='/'">
                        <div class="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center shadow-lg logo-glow group-hover:scale-110 transition-all duration-300">
                            <i class="fas fa-home text-white text-xl"></i>
                        </div>
                        <div>
                            <h1 class="text-2xl lg:text-3xl font-bold bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent">
                                SREM.AI
                            </h1>
                            <p class="text-xs text-gray-500 -mt-1 hidden sm:block">Smart Real Estate Management</p>
                        </div>
                    </div>
                </div>

                <!-- Desktop Navigation -->
                <nav class="nav-desktop hidden lg:flex items-center space-x-8">
                    <a href="/" class="nav-link text-gray-700 hover:text-orange-600 font-medium flex items-center space-x-2 px-3 py-2">
                        <i class="fas fa-home text-sm"></i>
                        <span>Trang chủ</span>
                    </a>
                    <a href="/Home/News" class="nav-link text-gray-700 hover:text-orange-600 font-medium flex items-center space-x-2 px-3 py-2">
                        <i class="fas fa-newspaper text-sm"></i>
                        <span>Tin tức</span>
                    </a>
                    <a onclick="showFilterPopup('compare-popup')" class="nav-link text-gray-700 hover:text-orange-600 font-medium flex items-center space-x-2 px-3 py-2 cursor-pointer">
                        <i class="fas fa-balance-scale text-sm"></i>
                        <span>So sánh</span>
                    </a>
                    <a href="/Home/MyReports" class="nav-link text-gray-700 hover:text-orange-600 font-medium flex items-center space-x-2 px-3 py-2">
                        <i class="fas fa-chart-bar text-sm"></i>
                        <span>Báo cáo</span>
                    </a>

                    <!-- Wallet Display -->
                    <div id="wallet-display" class="hidden glass-effect text-gray-700 font-medium flex items-center space-x-2 px-4 py-2 rounded-xl">
                        <i class="fas fa-wallet text-orange-500 text-sm"></i>
                        <span>Ví: <span id="wallet-balance" class="font-semibold text-orange-600">0 VNĐ</span></span>
                    </div>
                </nav>

                <!-- User Actions -->
                <div class="flex items-center space-x-3">
                    <!-- Mobile Menu Button -->
                    <button id="mobileMenuBtn" class="nav-mobile lg:hidden p-2 text-gray-600 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all duration-200">
                        <i class="fas fa-bars text-xl"></i>
                    </button>

                    <!-- Favorites -->
                    <a href="#" onclick="getFavoriteList(event)" class="relative p-3 text-gray-600 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all duration-200 hover-lift">
                        <i class="fas fa-heart text-lg"></i>
                    </a>

                    <!-- Notifications -->
                    <div class="relative">
                        <a href="#" onclick="getNotificationList(event)" class="relative p-3 text-gray-600 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all duration-200 hover-lift">
                            <i class="fas fa-bell text-lg"></i>
                            <span id="notificationCount" class="absolute -top-1 -right-1 notification-badge text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-medium"></span>
                        </a>

                    <!-- Notification Dropdown -->
                    <div id="notificationDropdown" class="absolute mt-2 w-[600px] bg-white rounded-xl shadow-lg border border-gray-200 hidden z-50 overflow-y-auto max-h-96">
                        <div class="p-4 border-b border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-900">Thông báo</h3>
                        </div>
                    </div>

                    <!-- Auth Buttons / User Menu -->
                    <div class="flex items-center space-x-2">
                        <!-- Register Button -->
                        <a id="registerNavItem" href="/Auth/Register" class="hidden sm:flex items-center space-x-2 px-4 py-2 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl font-medium transition-all duration-200">
                            <i class="fas fa-user-plus text-sm"></i>
                            <span>Đăng ký</span>
                        </a>

                        <!-- Login Button -->
                        <a id="loginNavItem" href="/Auth/Login" class="btn-primary text-white font-semibold px-6 py-2.5 rounded-xl flex items-center space-x-2">
                            <i class="fas fa-sign-in-alt text-sm"></i>
                            <span>Đăng nhập</span>
                        </a>

                        <!-- User Profile Dropdown -->
                        <div id="userProfileNavItem" class="relative hidden">
                            <button onclick="toggleDropdown()" class="flex items-center space-x-2 text-gray-700 hover:text-orange-600 font-medium px-4 py-2.5 rounded-xl hover:bg-orange-50 transition-all duration-200 border border-gray-200">
                                <div class="w-8 h-8 bg-gradient-to-br from-orange-500 to-orange-600 rounded-full flex items-center justify-center">
                                    <i class="fas fa-user text-white text-xs"></i>
                                </div>
                                <span id="userProfileLink" class="hidden sm:block"></span>
                                <i class="fas fa-chevron-down text-xs transition-transform duration-200" id="dropdownIcon"></i>
                            </button>

                            <!-- User Dropdown Menu -->
                            <div id="userDropdown" class="absolute right-0 mt-3 w-56 bg-white rounded-2xl shadow-premium border border-gray-100 hidden z-50 overflow-hidden dropdown-enter">
                                <div class="p-2 space-y-1">
                                    <a href="/Chat/Index" class="flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 rounded-xl transition-all duration-200">
                                        <i class="fas fa-comment-dots w-4"></i>
                                        <span>Tin nhắn</span>
                                    </a>
                                    <a href="/Profile" class="flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 rounded-xl transition-all duration-200">
                                        <i class="fas fa-user w-4"></i>
                                        <span>Trang cá nhân</span>
                                    </a>
                                    <a href="/Deposit" class="flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 rounded-xl transition-all duration-200">
                                        <i class="fas fa-wallet w-4"></i>
                                        <span>Nạp tiền</span>
                                    </a>
                                    <a href="/TransactionHistory" class="flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-600 rounded-xl transition-all duration-200">
                                        <i class="fas fa-history w-4"></i>
                                        <span>Lịch sử thanh toán</span>
                                    </a>
                                    <hr class="my-2">
                                    <a href="#" onclick="handleLogout(event)" class="flex items-center space-x-3 px-4 py-3 text-sm text-red-600 hover:bg-red-50 rounded-xl transition-all duration-200">
                                        <i class="fas fa-sign-out-alt w-4"></i>
                                        <span>Đăng xuất</span>
                                    </a>
                                </div>
                            </div>
                        </div>

                        <!-- Post Property Button -->
                        <a id="postPropertyButton" href="#" onclick="createProperty(event)" class="hidden btn-primary text-white font-semibold px-6 py-2.5 rounded-xl flex items-center space-x-2 ml-3">
                            <i class="fas fa-plus text-sm"></i>
                            <span class="hidden lg:block">Bài đăng</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- Main Content -->
    <main class="min-h-screen bg-gradient-to-br from-gray-50 to-orange-50">
        <div class="container mx-auto px-6 py-8" style="padding-top:0px">
            @RenderBody()
        </div>
    </main>

    <!-- Floating Support Chat Button -->
    <div class="fixed bottom-6 right-6 z-50">
        <button onclick="openSimpleSupportChat()" 
                class="w-16 h-16 bg-red-500 hover:bg-red-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group floating-support-btn relative">
            <i class="fas fa-comments text-xl"></i>
            
            <!-- Unread Badge -->
            <div id="supportUnreadBadge" class="absolute -top-2 -right-2 bg-orange-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center hidden">
                0
            </div>
            
            <!-- Tooltip -->
            <div class="absolute right-full mr-3 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none">
                Liên hệ hỗ trợ
                <div class="absolute left-full top-1/2 transform -translate-y-1/2 w-0 h-0 border-l-4 border-l-gray-900 border-t-4 border-t-transparent border-b-4 border-b-transparent"></div>
            </div>
        </button>
    </div>

    <!-- Simple Support Chat Modal for Users -->
    <div id="simpleSupportChatModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">💬 Chat với Admin</h3>
                        <p class="text-sm text-gray-600">Hãy để lại tin nhắn, admin sẽ phản hồi sớm nhất!</p>
                    </div>
                    <button onclick="closeSimpleSupportChatModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <div id="simpleChatMessages" class="h-96 overflow-y-auto border rounded-md p-4 mb-4 bg-gray-50">
                    <div class="text-center text-gray-500 py-8">
                        <i class="fas fa-comments text-4xl mb-2 text-gray-300"></i>
                        <p>Bắt đầu cuộc trò chuyện với admin</p>
                    </div>
                </div>
                
                <div class="flex space-x-2 mb-4">
                    <input type="text" id="simpleChatMessageInput" 
                           class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                           placeholder="Nhập tin nhắn của bạn...">
                    <button onclick="sendSimpleSupportMessage()" 
                            class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500">
                        Gửi
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gradient-to-r from-gray-700 to-gray-600 text-white mt-20">
        <div class="container mx-auto px-4 lg:px-6 py-16">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                <!-- Company Info -->
                <div class="lg:col-span-2">
                    <div class="flex items-center space-x-3 mb-6">
                        <div class="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center">
                            <i class="fas fa-home text-white text-xl"></i>
                        </div>
                        <h3 class="text-2xl font-bold">SREM.AI</h3>
                    </div>
                    <p class="text-gray-300 mb-6 max-w-md leading-relaxed">
                        Nền tảng quản lý bất động sản thông minh, kết nối chủ nhà và người thuê một cách hiệu quả và an toàn nhất.
                    </p>
                    <div class="flex space-x-4">
                        <a href="#" class="w-10 h-10 bg-gray-700 hover:bg-orange-500 rounded-xl flex items-center justify-center transition-all duration-200 hover-lift">
                            <i class="fab fa-facebook"></i>
                        </a>
                        <a href="#" class="w-10 h-10 bg-gray-700 hover:bg-orange-500 rounded-xl flex items-center justify-center transition-all duration-200 hover-lift">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a href="#" class="w-10 h-10 bg-gray-700 hover:bg-orange-500 rounded-xl flex items-center justify-center transition-all duration-200 hover-lift">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="#" class="w-10 h-10 bg-gray-700 hover:bg-orange-500 rounded-xl flex items-center justify-center transition-all duration-200 hover-lift">
                            <i class="fab fa-linkedin"></i>
                        </a>
                    </div>
                </div>

                <!-- Quick Links -->
                <div>
                    <h4 class="text-lg font-semibold mb-6 text-orange-400">Liên kết nhanh</h4>
                    <ul class="space-y-3">
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Về chúng tôi</span></a></li>
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Dịch vụ</span></a></li>
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Tin tức</span></a></li>
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Liên hệ</span></a></li>
                    </ul>
                </div>

                <!-- Support -->
                <div>
                    <h4 class="text-lg font-semibold mb-6 text-orange-400">Hỗ trợ</h4>
                    <ul class="space-y-3">
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Trung tâm trợ giúp</span></a></li>
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Điều khoản sử dụng</span></a></li>
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>Chính sách bảo mật</span></a></li>
                        <li><a href="#" class="text-gray-300 hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2"><i class="fas fa-chevron-right text-xs"></i><span>FAQ</span></a></li>
                    </ul>
                </div>
            </div>

            <div class="border-t border-gray-700 mt-12 pt-8 text-center">
                <p class="text-gray-400">&copy; 2024 SREM.AI. Tất cả quyền được bảo lưu.</p>
            </div>
        </div>
    </footer>

    <!-- Compare Popup -->
    <div id="compare-popup" class="hidden fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-3xl w-full max-w-4xl shadow-2xl animate-slide-up max-h-[90vh] overflow-hidden">
            <div class="sticky top-0 bg-gradient-to-r from-orange-50 to-orange-100 z-10 px-6 py-4 border-b border-orange-200">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-balance-scale text-orange-500 mr-3"></i>
                        So sánh bất động sản
                    </h2>
                    <button onclick="hideFilterPopup('compare-popup')" class="w-10 h-10 flex items-center justify-center text-gray-500 hover:text-red-500 hover:bg-red-50 rounded-xl transition-all duration-200">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
            </div>

            <div class="px-6 py-4 overflow-y-auto custom-scrollbar" style="max-height: calc(90vh - 100px);">
                <div id="compare-table-container" class="overflow-x-auto">
                    <table class="table-auto w-full text-sm text-gray-700 border border-gray-200 rounded-xl overflow-hidden" id="compare-table">
                        <!-- Table content will be populated by JavaScript -->
                    </table>
                </div>
                <p id="compare-warning" class="text-red-500 text-sm mt-4 hidden bg-red-50 p-3 rounded-xl border border-red-200">
                    <i class="fas fa-exclamation-triangle mr-2"></i>
                    Vui lòng chọn ít nhất 2 và không quá 3 mục để so sánh.
                </p>
            </div>
        </div>
    </div>

    <script>
        // Function to update navigation based on auth status
        function updateNavigation() {
            const isAuthenticated = authService.isAuthenticated();
            const loginNavItem = document.getElementById('loginNavItem');
            const registerNavItem = document.getElementById('registerNavItem');
            const userProfileNavItem = document.getElementById('userProfileNavItem');
            const userProfileLink = document.getElementById('userProfileLink');
            const notificationBell = document.querySelector('a[onclick="getNotificationList(event)"]');
            const postPropertyButton = document.getElementById('postPropertyButton'); // Lấy nút Đăng tin

            if (isAuthenticated) {
                if (loginNavItem) loginNavItem.style.display = 'none';
                if (registerNavItem) registerNavItem.style.display = 'none';
                if (userProfileNavItem) userProfileNavItem.style.display = 'flex';
                if (notificationBell) notificationBell.style.display = 'inline-flex';

                // Set user name in dropdown
                const user = authService.getCurrentUser();
                if (user && user.name && userProfileLink) {
                    userProfileLink.innerText = `Chào, ${user.name}`;
                }

                // Cập nhật hiển thị nút Đăng tin dựa trên vai trò
                if (user && user.role === 'Landlord') {
                    if (postPropertyButton) postPropertyButton.style.display = 'flex';
                } else {
                    if (postPropertyButton) postPropertyButton.style.display = 'none';
                }

                updateWalletBalance();
            } else {
                if (loginNavItem) loginNavItem.style.display = 'flex';
                if (registerNavItem) registerNavItem.style.display = 'flex';
                if (userProfileNavItem) userProfileNavItem.style.display = 'none';
                if (notificationBell) notificationBell.style.display = 'none';
                if (postPropertyButton) postPropertyButton.style.display = 'none'; // Ẩn nút nếu chưa đăng nhập

                // Ẩn ví khi người dùng chưa đăng nhập
                const walletDisplay = document.getElementById('wallet-display');
                if (walletDisplay) walletDisplay.classList.add('hidden');
            }
        }


        // Toggle dropdown
        function toggleDropdown() {
            const dropdown = document.getElementById('userDropdown');
            dropdown.classList.toggle('hidden');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('userDropdown');
            const userProfileNavItem = document.getElementById('userProfileNavItem');

            if (!userProfileNavItem.contains(e.target)) {
                dropdown.classList.add('hidden');
            }
        });

        // Handle logout
        async function handleLogout(event) {
            event.preventDefault();
            try {
                await authService.logout();
                updateNavigation();
                showSuccessMessage('Đăng xuất thành công!');
                setTimeout(() => {
                    window.location.href = '/';
                }, 1200); // Wait 1.2s for user to see the message
            } catch (error) {
                console.error('Logout failed:', error);
                alert('Logout failed. Please try again.');
            }
        }

        // Simple success message function (add to your script section)
        function showSuccessMessage(message) {
            let msgDiv = document.createElement('div');
            msgDiv.innerText = message;
            msgDiv.className = 'fixed top-6 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded shadow-lg z-50';
            document.body.appendChild(msgDiv);
            setTimeout(() => {
                msgDiv.remove();
            }, 1000);
        }

        // Get favorite list
        function getFavoriteList(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (isAuthenticated) {
                window.location.href = '/Home/ListFavorite';
            } else {
                window.location.href = '/Auth/Login';
            }
        }

        // Create property
        function createProperty(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (isAuthenticated) {
                window.location.href = '/PostProperty/ListProperty';
            } else {
                window.location.href = '/Auth/Login';
            }
        }

        // Hàm cập nhật số lượng thông báo chưa đọc khi vào trang
        async function updateNotificationCount() {
            const notificationCount = document.getElementById('notificationCount');
            if (!authService.isAuthenticated()) {
                if (notificationCount) notificationCount.textContent = '';
                return;
            }
            try {
                const token = localStorage.getItem('authToken');
                const response = await fetch(config.buildApiUrl(config.user.notifications + '/unread-count'), { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notification count');
                const data = await response.json();
                const unreadCount = data.data?.unreadCount || 0;
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
            } catch {
                if (notificationCount) notificationCount.textContent = '';
            }
        }

        // Update navigation when page loads
        document.addEventListener('DOMContentLoaded', updateNavigation);

        // Set active navigation based on URL parameters
        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const type = urlParams.get('type') || 'room';

            // Remove active class from all nav links
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });

            // Add active class to current type
            const activeLink = document.getElementById(type);
            if (activeLink) {
                activeLink.classList.add('active');
            }
        });


        // Sửa getNotificationList để toggle modal
        async function getNotificationList(event) {
            event.preventDefault();
            const isAuthenticated = authService.isAuthenticated();
            if (!isAuthenticated) {
                window.location.href = '/Auth/Login';
                return;
            }
            const dropdown = document.getElementById('notificationDropdown');
            // Nếu dropdown đang mở thì ẩn đi (toggle)
            if (!dropdown.classList.contains('hidden')) {
                dropdown.classList.add('hidden');
                return;
            }
            // Nếu dropdown đang ẩn thì load và hiện
            const notificationList = document.getElementById('notificationList');
            const notificationCount = document.getElementById('notificationCount');
            try {
                // Use the user-specific notifications endpoint instead of all notifications
                const token = localStorage.getItem('authToken');
                const response = await fetch(config.buildApiUrl(config.user.notifications + '/my-notifications'), { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notifications');
                const data = await response.json();
                const notifications = data.data || [];
                // Update unread count
                const unreadCount = notifications.filter(n => !n.isRead).length;
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                
                // Render notifications with horizontal category tabs
                renderNotificationsWithTabs(notifications);
                dropdown.classList.remove('hidden');
            } catch (error) {
                notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Lỗi khi tải thông báo.</p>';
            }
        }

        // Global variable to store grouped notifications
        let globalGroupedNotifications = {};

        // Function to render notifications with horizontal category tabs
        function renderNotificationsWithTabs(notifications) {
            const notificationList = document.getElementById('notificationList');
            
            if (notifications.length === 0) {
                notificationList.innerHTML = '<p class="text-gray-500 text-center p-2">Không có thông báo nào.</p>';
                return;
            }

            // Group notifications by type and store globally
            globalGroupedNotifications = {
                all: notifications,
                info: notifications.filter(n => n.type === 'info'),
                warning: notifications.filter(n => n.type === 'warning'),
                alert: notifications.filter(n => n.type === 'alert')
            };

            // Create tabs HTML
            const tabsHTML = `
                <div class="flex border-b border-gray-200 bg-gray-50 rounded-t-lg">
                    <button class="tab-btn active px-4 py-2 text-sm font-medium text-gray-700 bg-white border-b-2 border-orange-500 rounded-t-lg" data-type="all">
                        Tất cả (${globalGroupedNotifications.all.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="info">
                        📋 Thông tin (${globalGroupedNotifications.info.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="warning">
                        ⚠️ Cảnh báo (${globalGroupedNotifications.warning.length})
                    </button>
                    <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="alert">
                        🚨 Báo động (${globalGroupedNotifications.alert.length})
                    </button>
                </div>
                <div id="notificationsContent" class="max-h-80 overflow-y-auto">
                    ${renderNotificationsByType(globalGroupedNotifications.all, 'all')}
                </div>
            `;

            notificationList.innerHTML = tabsHTML;

            // Add event listeners to tabs
            const tabButtons = notificationList.querySelectorAll('.tab-btn');
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all tabs
                    tabButtons.forEach(btn => {
                        btn.classList.remove('active', 'bg-white', 'border-b-2', 'border-orange-500', 'rounded-t-lg');
                        btn.classList.add('text-gray-500');
                    });
                    
                    // Add active class to clicked tab
                    button.classList.add('active', 'bg-white', 'border-b-2', 'border-orange-500', 'rounded-t-lg');
                    button.classList.remove('text-gray-500');
                    button.classList.add('text-gray-700');

                    // Show notifications for selected type
                    const selectedType = button.dataset.type;
                    const notificationsContent = document.getElementById('notificationsContent');
                    notificationsContent.innerHTML = renderNotificationsByType(globalGroupedNotifications[selectedType], selectedType);
                });
            });
        }

        // Function to render notifications by type
        function renderNotificationsByType(notifications, type) {
            if (notifications.length === 0) {
                return '<p class="text-gray-500 text-center p-4">Không có thông báo nào.</p>';
            }

            const notificationsHTML = notifications.map(notification => {
                let typeColor = '';
                let typeBgColor = '';
                let typeText = '';
                
                switch(notification.type) {
                    case 'info':
                        typeColor = 'text-blue-500';
                        typeBgColor = 'bg-blue-50';
                        typeText = 'Thông tin';
                        break;
                    case 'warning':
                        typeColor = 'text-yellow-500';
                        typeBgColor = 'bg-yellow-50';
                        typeText = 'Cảnh báo';
                        break;
                    case 'alert':
                        typeColor = 'text-red-500';
                        typeBgColor = 'bg-red-50';
                        typeText = 'Báo động';
                        break;
                }

                return `
                    <div class="notification-item p-3 bg-white hover:bg-orange-50 cursor-pointer transition-colors duration-200 border-b border-gray-100 last:border-b-0" data-notification-id="${notification.notificationId}">
                        <div class="flex justify-between items-start gap-3">
                            <div class="flex-1 min-w-0">
                                <h4 class="text-sm font-medium text-gray-900 truncate">${notification.title}</h4>
                                <p class="text-xs text-gray-600 mt-1 line-clamp-2">${notification.content}</p>
                                <p class="text-xs text-gray-400 mt-1">${new Date(notification.createdAt).toLocaleString('vi-VN')}</p>
                            </div>
                            <div class="flex flex-col items-end space-y-1 flex-shrink-0">
                                <span class="text-xs font-medium px-2 py-1 rounded-full ${typeColor} ${typeBgColor}">
                                    ${typeText}
                                </span>
                                ${!notification.isRead ? '<div class="w-2 h-2 bg-orange-500 rounded-full"></div>' : ''}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            // Add event listeners to notification items
            setTimeout(() => {
                const notificationItems = document.querySelectorAll('.notification-item');
                notificationItems.forEach(item => {
                    item.addEventListener('click', () => {
                        const notificationId = item.dataset.notificationId;
                        const notification = notifications.find(n => n.notificationId == notificationId);
                        if (notification) {
                            showNotificationDetail(notification);
                        }
                    });
                });
            }, 0);

            return notificationsHTML;
        }

        // Show notification detail within dropdown and mark as read
        async function showNotificationDetail(notification) {
            const notificationList = document.getElementById('notificationList');

            try {
                const token = localStorage.getItem('authToken');
                
                // Mark notification as read
                const markReadResponse = await fetch(`https://localhost:7031/api/UserNotification/mark-as-read/${notification.notificationId}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                // Get notification detail
                const response = await fetch(`https://localhost:7031/api/Notification/${notification.notificationId}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch notification detail');
                }

                const data = await response.json();
                const detail = data.data;

                // Replace list with detail view
                notificationList.innerHTML = `
                    <div class="p-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-gray-900">${detail.title}</h3>
                            <button id="backToList" class="text-orange-500 hover:text-orange-600 font-medium">Quay lại</button>
                        </div>
                        <p class="text-gray-600 mb-4">${detail.content}</p>
                        <p class="text-sm text-gray-400 mb-2">Loại: ${detail.type === 'info' ? 'Thông tin' : detail.type === 'warning' ? 'Cảnh báo' : 'Báo động'}</p>
                        <p class="text-sm text-gray-400">Thời gian: ${new Date(detail.createdAt).toLocaleString('vi-VN')}</p>
                    </div>
                `;

                const backToList = document.getElementById('backToList');
                  backToList.onclick = (e) => {
                  e.stopPropagation(); 
                    // Refresh the notifications list
                    refreshNotifications();
        };

                // Update notification count after marking as read
                updateNotificationCount();
                
            } catch (error) {
                console.error('Error fetching notification detail:', error);
                notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Không thể tải chi tiết thông báo.</p>';
            }
        }

        // Function to refresh notifications
        async function refreshNotifications() {
            try {
                const token = localStorage.getItem('authToken');
                const response = await fetch(config.buildApiUrl(config.user.notifications + '/my-notifications'), { 
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) throw new Error('Failed to fetch notifications');
                const data = await response.json();
                const notifications = data.data || [];
                
                // Update unread count
                const unreadCount = notifications.filter(n => !n.isRead).length;
                const notificationCount = document.getElementById('notificationCount');
                notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                
                // Re-render notifications with tabs
                renderNotificationsWithTabs(notifications);
            } catch (error) {
                console.error('Error refreshing notifications:', error);
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('notificationDropdown');
            const notificationIcon = document.querySelector('a[onclick="getNotificationList(event)"]');

            if (dropdown && !notificationIcon.contains(e.target) && !dropdown.contains(e.target)) {
                dropdown.classList.add('hidden');
            }
        });

        function hideFilterPopup(id) {
            document.getElementById(id).classList.add('hidden');
        }

        function showFilterPopup(id) {
            document.getElementById(id).classList.remove('hidden');
            if(id == 'compare-popup'){
              renderComparePopup();
            }
        }

        // Update navigation and notification count on load
        document.addEventListener('DOMContentLoaded', () => {
            updateNavigation();
            updateNotificationCount();
        });

                // Hàm mới để lấy và cập nhật số dư ví
        async function updateWalletBalance() {
            const walletDisplay = document.getElementById('wallet-display');
            const walletBalanceSpan = document.getElementById('wallet-balance');

            if (!authService.isAuthenticated()) {
                if (walletDisplay) walletDisplay.classList.add('hidden'); // Ẩn ví nếu chưa đăng nhập
                return;
            }

            // Hiển thị khung ví nếu đã đăng nhập
            if (walletDisplay) walletDisplay.classList.remove('hidden');

            try {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    console.warn("No auth token found, cannot fetch wallet balance.");
                    if (walletDisplay) walletDisplay.classList.add('hidden');
                    return;
                }

                const response = await fetch(config.buildApiUrl(config.user.wallet + '/balance'), {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    // Xử lý lỗi nếu API không thành công
                    const errorResponse = await response.json();
                    console.error('Failed to fetch wallet balance:', errorResponse.message || 'Unknown error');
                    if (walletBalanceSpan) walletBalanceSpan.textContent = 'Lỗi!'; // Hiển thị lỗi
                    return;
                }

                const data = await response.json();
                const balance = data.balance; // Giả định backend trả về JSON dạng { balance: 123456 }

                if (walletBalanceSpan) {
                    walletBalanceSpan.textContent = `${balance.toLocaleString('vi-VN')} VNĐ`;
                }

            } catch (error) {
                console.error("Error fetching wallet balance:", error);
                if (walletBalanceSpan) walletBalanceSpan.textContent = 'Lỗi tải!';
            }
        }

                // Support Chat functionality moved to supportChat.js
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

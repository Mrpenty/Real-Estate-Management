@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/authService.js" asp-append-version="true"></script>
    <script src="~/js/config.js" asp-append-version="true"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="~/js/Admin/AdminUserService.js" asp-append-version="true"></script>
    <script src="~/js/Admin/AdminPostService.js" asp-append-version="true"></script>
    <link rel="stylesheet" href="~/css/admin-news-management.css" />
    <link rel="stylesheet" href="~/css/admin-news-detail.css" />
    <link rel="stylesheet" href="~/css/admin-common.css" />
    <link rel="stylesheet" href="~/css/_AdminLayout.css" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

   
</head>
<body class="bg-gray-100">
    <div class="flex min-h-screen">
        <!-- Sidebar -->
        <aside class="w-64 bg-white shadow-lg flex flex-col">
            <div class="p-6 border-b">
                <span class="text-2xl font-bold text-blue-700">Admin Panel</span>
            </div>
            <nav class="flex-1 p-4 space-y-2">
                <a href="/Admin/Dashboard" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Admin dashboaerd</a>
                <a href="/Admin" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-users mr-2"></i> Quản lý người dùng</a>
                <a href="/Admin/PostManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Quản lý bài đăng</a>
                <a href="/Admin/PackageManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Quản lý gói khuyến mãi</a>
                <a href="/Admin/NotificationManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Quản lý thông báo</a>
                <a href="/Admin/NewsManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Quản lý bài báo </a>
                <a href="/Admin/SliderManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Quản lý slider</a>
                <a href="/Admin/AmenityManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-building mr-2"></i> Quản lý gói tiện ích</a>
                <a href="/Admin/ReportManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-flag mr-2"></i> Quản lý báo cáo</a>
                <a href="/Admin/SupportManagement" class="sidebar-link block px-4 py-2 rounded hover:bg-blue-100"><i class="fas fa-headset mr-2"></i> Quản lý hỗ trợ</a>
            </nav>
            <div class="p-4 border-t text-sm text-gray-500">&copy; 2024 RealEstate Admin</div>
        </aside>
        <!-- Main content -->
        <div class="flex-1 flex flex-col">
            <!-- Header -->
            <header class="bg-white shadow flex items-center justify-between px-8 py-4 border-b">
                <div class="text-xl font-semibold">@ViewBag.Title</div>
                <div class="flex items-center gap-4">
                    <!-- Notification Bell for Admin -->
                    <a href="#" onclick="getAdminNotificationList(event)" class="relative p-2 text-gray-600 hover:text-blue-600 transition-colors duration-200 hover-lift">
                        <i class="fas fa-bell text-lg"></i>
                        <span id="adminNotificationCount" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"></span>
                    </a>

                    <!-- Notification Dropdown for Admin -->
                    <div id="adminNotificationDropdown" class="absolute right-0 mt-2 w-[600px] bg-white rounded-xl shadow-lg border border-gray-200 hidden z-50 overflow-y-auto max-h-96">
                        <div class="p-4 border-b border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-900">Thông báo Admin</h3>
                        </div>
                        <div id="adminNotificationList" class="p-2 space-y-2"></div>
                    </div>

                    <span class="font-medium text-gray-700"><i class="fas fa-user-shield mr-1"></i> Admin</span>
                    <a href="#" onclick="handleLogout(event)" class="text-red-500 hover:underline"><i class="fas fa-sign-out-alt mr-1"></i> Đăng xuất</a>
                </div>
            </header>
            <main class="flex-1 p-8">
                @RenderBody()
            </main>
        </div>
    </div>

    <!-- Floating Support Chat Button for Admin -->
    <div class="fixed bottom-6 right-6 z-50">
        <button onclick="window.location.href='/Admin/SupportManagement'" 
                class="w-16 h-16 bg-red-500 hover:bg-red-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group">
            <i class="fas fa-headset text-xl"></i>
            
            <!-- Tooltip -->
            <div class="absolute right-full mr-3 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none">
                Quản lý hỗ trợ
                <div class="absolute left-full top-1/2 transform -translate-y-1/2 w-0 h-0 border-l-4 border-l-gray-900 border-t-transparent border-b-4 border-b-transparent"></div>
            </div>
        </button>
    </div>

    @RenderSection("Scripts", required: false)
    <script>
    


         // Handle logout
            async function handleLogout(event) {
                event.preventDefault();
                try {
                    await authService.logout();
                    updateNavigation();
                    showSuccessMessage('Đăng xuất thành công!');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 1200); // Wait 1.2s for user to see the message
                } catch (error) {
                    console.error('Logout failed:', error);
                    alert('Logout failed. Please try again.');
                }
            }

            // Simple success message function (add to your script section)
            function showSuccessMessage(message) {
                let msgDiv = document.createElement('div');
                msgDiv.innerText = message;
                msgDiv.className = 'fixed top-6 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded shadow-lg z-50';
                document.body.appendChild(msgDiv);
                setTimeout(() => {
                    msgDiv.remove();
                }, 1000);
            }

                // Function to update navigation based on auth status
            function updateNavigation() {
                const isAuthenticated = authService.isAuthenticated();
                const loginNavItem = document.getElementById('loginNavItem');
                const registerNavItem = document.getElementById('registerNavItem');
                const userProfileNavItem = document.getElementById('userProfileNavItem');
                const userProfileLink = document.getElementById('userProfileLink');

                if (isAuthenticated) {
                    if (loginNavItem) loginNavItem.style.display = 'none';
                    if (registerNavItem) registerNavItem.style.display = 'none';
                    if (userProfileNavItem) userProfileNavItem.style.display = 'flex';

                    // Set user name in dropdown
                    const user = authService.getCurrentUser();
                    if (user && user.name && userProfileLink) {
                        userProfileLink.innerText = `Chào, ${user.name}`;
                    }

                    // Update admin notification count
                    updateAdminNotificationCount();
                } else {
                    if (loginNavItem) loginNavItem.style.display = 'flex';
                    if (registerNavItem) registerNavItem.style.display = 'flex';
                    if (userProfileNavItem) userProfileNavItem.style.display = 'none';
                }
            }

            // Hàm cập nhật số lượng thông báo chưa đọc cho admin
            async function updateAdminNotificationCount() {
                const notificationCount = document.getElementById('adminNotificationCount');
                if (!authService.isAuthenticated()) {
                    if (notificationCount) notificationCount.textContent = '';
                    return;
                }
                try {
                    const token = localStorage.getItem('authToken');
                    const response = await fetch('https://localhost:7031/api/UserNotification/unread-count', { 
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
                    if (!response.ok) throw new Error('Failed to fetch notification count');
                    const data = await response.json();
                    const unreadCount = data.data?.unreadCount || 0;
                    notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                } catch {
                    if (notificationCount) notificationCount.textContent = '';
                }
            }

            // Sửa getAdminNotificationList để toggle modal
            async function getAdminNotificationList(event) {
                event.preventDefault();
                const isAuthenticated = authService.isAuthenticated();
                if (!isAuthenticated) {
                    window.location.href = '/Auth/Login';
                    return;
                }
                const dropdown = document.getElementById('adminNotificationDropdown');
                // Nếu dropdown đang mở thì ẩn đi (toggle)
                if (!dropdown.classList.contains('hidden')) {
                    dropdown.classList.add('hidden');
                    return;
                }
                // Nếu dropdown đang ẩn thì load và hiện
                const notificationList = document.getElementById('adminNotificationList');
                const notificationCount = document.getElementById('adminNotificationCount');
                try {
                    // Use the user-specific notifications endpoint instead of all notifications
                    const token = localStorage.getItem('authToken');
                    const response = await fetch('https://localhost:7031/api/UserNotification/my-notifications', { 
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
                    if (!response.ok) throw new Error('Failed to fetch notifications');
                    const data = await response.json();
                    const notifications = data.data || [];
                    // Update unread count
                    const unreadCount = notifications.filter(n => !n.isRead).length;
                    notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                    
                    // Render notifications with horizontal category tabs
                    renderAdminNotificationsWithTabs(notifications);
                    
                    // Position dropdown correctly before showing
                    const notificationIcon = document.querySelector('a[onclick="getAdminNotificationList(event)"]');
                    if (notificationIcon) {
                        const rect = notificationIcon.getBoundingClientRect();
                        dropdown.style.position = 'fixed';
                        dropdown.style.top = (rect.bottom + 8) + 'px';
                        dropdown.style.right = (window.innerWidth - rect.right) + 'px';
                    }
                    
                    dropdown.classList.remove('hidden');
                } catch (error) {
                    notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Lỗi khi tải thông báo.</p>';
                }
            }

            // Global variable to store grouped notifications for admin
            let globalAdminGroupedNotifications = {};

            // Function to render admin notifications with horizontal category tabs
            function renderAdminNotificationsWithTabs(notifications) {
                const notificationList = document.getElementById('adminNotificationList');
                
                if (notifications.length === 0) {
                    notificationList.innerHTML = '<p class="text-gray-500 text-center p-2">Không có thông báo nào.</p>';
                    return;
                }

                // Group notifications by type and store globally
                globalAdminGroupedNotifications = {
                    all: notifications,
                    info: notifications.filter(n => n.type === 'info'),
                    warning: notifications.filter(n => n.type === 'warning'),
                    alert: notifications.filter(n => n.type === 'alert')
                };

                // Create tabs HTML
                const tabsHTML = `
                    <div class="flex border-b border-gray-200 bg-gray-50 rounded-t-lg">
                        <button class="admin-tab-btn active px-4 py-2 text-sm font-medium text-gray-700 bg-white border-b-2 border-blue-500 rounded-t-lg" data-type="all">
                            Tất cả (${globalAdminGroupedNotifications.all.length})
                        </button>
                        <button class="admin-tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="info">
                            📋 Thông tin (${globalAdminGroupedNotifications.info.length})
                        </button>
                        <button class="admin-tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="warning">
                            ⚠️ Cảnh báo (${globalAdminGroupedNotifications.warning.length})
                        </button>
                        <button class="admin-tab-btn px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700" data-type="alert">
                            🚨 Báo động (${globalAdminGroupedNotifications.alert.length})
                        </button>
                    </div>
                    <div id="adminNotificationsContent" class="max-h-80 overflow-y-auto">
                        ${renderAdminNotificationsByType(globalAdminGroupedNotifications.all, 'all')}
                    </div>
                `;

                notificationList.innerHTML = tabsHTML;

                // Add event listeners to tabs
                const tabButtons = notificationList.querySelectorAll('.admin-tab-btn');
                tabButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        // Remove active class from all tabs
                        tabButtons.forEach(btn => {
                            btn.classList.remove('active', 'bg-white', 'border-b-2', 'border-blue-500', 'rounded-t-lg');
                            btn.classList.add('text-gray-500');
                        });
                        
                        // Add active class to clicked tab
                        button.classList.add('active', 'bg-white', 'border-b-2', 'border-blue-500', 'rounded-t-lg');
                        button.classList.remove('text-gray-500');
                        button.classList.add('text-gray-700');

                        // Show notifications for selected type
                        const selectedType = button.dataset.type;
                        const notificationsContent = document.getElementById('adminNotificationsContent');
                        notificationsContent.innerHTML = renderAdminNotificationsByType(globalAdminGroupedNotifications[selectedType], selectedType);
                    });
                });
            }

            // Function to render admin notifications by type
            function renderAdminNotificationsByType(notifications, type) {
                if (notifications.length === 0) {
                    return '<p class="text-gray-500 text-center p-4">Không có thông báo nào.</p>';
                }

                const notificationsHTML = notifications.map(notification => {
                    let typeColor = '';
                    let typeBgColor = '';
                    let typeText = '';
                    
                    switch(notification.type) {
                        case 'info':
                            typeColor = 'text-blue-500';
                            typeBgColor = 'bg-blue-50';
                            typeText = 'Thông tin';
                            break;
                        case 'warning':
                            typeColor = 'text-yellow-500';
                            typeBgColor = 'bg-yellow-50';
                            typeText = 'Cảnh báo';
                            break;
                        case 'alert':
                            typeColor = 'text-red-500';
                            typeBgColor = 'bg-red-50';
                            typeText = 'Báo động';
                            break;
                    }

                    return `
                        <div class="admin-notification-item p-3 bg-white hover:bg-blue-50 cursor-pointer transition-colors duration-200 border-b border-gray-100 last:border-b-0" data-notification-id="${notification.notificationId}">
                            <div class="flex justify-between items-start gap-3">
                                <div class="flex-1 min-w-0">
                                    <h4 class="text-sm font-medium text-gray-900 truncate">${notification.title}</h4>
                                    <p class="text-xs text-gray-600 mt-1 line-clamp-2">${notification.content}</p>
                                    <p class="text-xs text-gray-400 mt-1">${new Date(notification.createdAt).toLocaleString('vi-VN')}</p>
                                </div>
                                <div class="flex flex-col items-end space-y-1 flex-shrink-0">
                                    <span class="text-xs font-medium px-2 py-1 rounded-full ${typeColor} ${typeBgColor}">
                                        ${typeText}
                                    </span>
                                    ${!notification.isRead ? '<div class="w-2 h-2 bg-blue-500 rounded-full"></div>' : ''}
                                </div>
                            </div>
                        </div>
                    `;
                }).join('');

                // Add event listeners to notification items
                setTimeout(() => {
                    const notificationItems = document.querySelectorAll('.admin-notification-item');
                    notificationItems.forEach(item => {
                        item.addEventListener('click', () => {
                            const notificationId = item.dataset.notificationId;
                            const notification = notifications.find(n => n.notificationId == notificationId);
                            if (notification) {
                                showAdminNotificationDetail(notification);
                            }
                        });
                    });
                }, 0);

                return notificationsHTML;
            }

            // Show admin notification detail within dropdown and mark as read
            async function showAdminNotificationDetail(notification) {
                const notificationList = document.getElementById('adminNotificationList');

                try {
                    const token = localStorage.getItem('authToken');
                    
                    // Mark notification as read
                    const markReadResponse = await fetch(`https://localhost:7031/api/UserNotification/mark-as-read/${notification.notificationId}`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    // Get notification detail
                    const response = await fetch(`https://localhost:7031/api/Notification/${notification.notificationId}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch notification detail');
                    }

                    const data = await response.json();
                    const detail = data.data;

                    // Replace list with detail view
                    notificationList.innerHTML = `
                        <div class="p-4">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-semibold text-gray-900">${detail.title}</h3>
                                <button id="adminBackToList" class="text-blue-500 hover:text-blue-600 font-medium">Quay lại</button>
                            </div>
                            <p class="text-gray-600 mb-4">${detail.content}</p>
                            <p class="text-sm text-gray-400 mb-2">Loại: ${detail.type === 'info' ? 'Thông tin' : detail.type === 'warning' ? 'Cảnh báo' : 'Báo động'}</p>
                            <p class="text-sm text-gray-400">Thời gian: ${new Date(detail.createdAt).toLocaleString('vi-VN')}</p>
                        </div>
                    `;

                    const backToList = document.getElementById('adminBackToList');
                    backToList.onclick = (e) => {
                        e.stopPropagation(); 
                        // Refresh the notifications list
                        refreshAdminNotifications();
                    };

                    // Update notification count after marking as read
                    updateAdminNotificationCount();
                    
                } catch (error) {
                    console.error('Error fetching notification detail:', error);
                    notificationList.innerHTML = '<p class="text-red-500 text-center p-2">Không thể tải chi tiết thông báo.</p>';
                }
            }

            // Function to refresh admin notifications
            async function refreshAdminNotifications() {
                try {
                    const token = localStorage.getItem('authToken');
                    const response = await fetch('https://localhost:7031/api/UserNotification/my-notifications', { 
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
                    if (!response.ok) throw new Error('Failed to fetch notifications');
                    const data = await response.json();
                    const notifications = data.data || [];
                    
                    // Update unread count
                    const unreadCount = notifications.filter(n => !n.isRead).length;
                    const notificationCount = document.getElementById('adminNotificationCount');
                    notificationCount.textContent = unreadCount > 0 ? unreadCount : '';
                    
                    // Re-render notifications with tabs
                    renderAdminNotificationsWithTabs(notifications);
                } catch (error) {
                    console.error('Error refreshing notifications:', error);
                }
            }

            // Close admin notification dropdown when clicking outside
            document.addEventListener('click', (e) => {
                const dropdown = document.getElementById('adminNotificationDropdown');
                const notificationIcon = document.querySelector('a[onclick="getAdminNotificationList(event)"]');

                if (dropdown && !notificationIcon.contains(e.target) && !dropdown.contains(e.target)) {
                    dropdown.classList.add('hidden');
                }
            });

            // Update admin notification count when page loads
            document.addEventListener('DOMContentLoaded', () => {
                updateAdminNotificationCount();
            });
    </script>
    
</body>
</html> 
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title - SREM.AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">

<style type="text/tailwindcss">
    body {
        background-image: url('/image/background.png');
        background-size: cover;
        background-position: center;
        font-family: 'Montserrat', sans-serif;
    }

    .input-bootstrap {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 1px solid #ced4da;
        font-size: 1rem;
        line-height: 1.5;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .input-bootstrap:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }


    .select-bootstrap {
        display: block;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .select-bootstrap:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
</style>
</head>
<body class="min-h-screen flex items-center justify-end bg-gray-100">
    <div class="flex w-full max-w-xl rounded-3xl shadow-xl overflow-hidden mr-20">
        @RenderBody()
    </div>

    <script src="~/js/Auth/authService.js"></script>
    <script>
        // Function to get a cookie by name
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        // Check for accessToken cookie on page load
        // If found, store it in localStorage and optionally remove the cookie
        document.addEventListener('DOMContentLoaded', () => {
            const accessToken = getCookie('accessToken');
            if (accessToken && !localStorage.getItem('authToken')) {
                localStorage.setItem('authToken', accessToken);
                // Optionally, remove the cookie after storing in localStorage
                // document.cookie = 'accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            }
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html> 
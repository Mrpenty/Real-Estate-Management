@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="container mx-auto py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Quản lý bài đăng</h1>
    </div>
    <!-- Search and Filter -->
    <div class="bg-white p-4 rounded-lg shadow mb-6">
        <form id="postFilterForm" class="grid grid-cols-1 md:grid-cols-5 gap-4 items-end">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Tìm kiếm</label>
                <input id="searchInput" type="text" placeholder="Tìm theo tiêu đề hoặc chủ nhà..." class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Trạng thái</label>
                <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Tất cả</option>
                    <option value="0">Bản nháp</option>
                    <option value="1">Chờ duyệt</option>
                    <option value="2">Đã duyệt</option>
                    <option value="3">Đã từ chối</option>
                    <option value="4">Đã cho thuê</option>
                    <option value="5">Đã bán</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Từ ngày</label>
                <input id="fromDate" type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Đến ngày</label>
                <input id="toDate" type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="flex gap-2">
                <button type="button" onclick="applyFilters()" class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 flex items-center justify-center">
                    <i class="fas fa-search mr-2"></i>Lọc
                </button>
                <button type="button" onclick="resetFilters()" class="w-full bg-gray-200 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-300 flex items-center justify-center">
                    <i class="fas fa-undo mr-2"></i>Đặt lại
                </button>
            </div>
        </form>
    </div>
    <!-- Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="postTable">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tiêu đề</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Chủ nhà</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày tạo</th>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Render bằng JS -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4">
        <div class="flex-1 flex justify-between sm:hidden">
            <button onclick="previousPage()" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                Trước
            </button>
            <button onclick="nextPage()" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                Sau
            </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
                <p class="text-sm text-gray-700">
                    Hiển thị <span id="startIndex">1</span> đến <span id="endIndex">10</span> của <span id="totalItems">0</span> kết quả
                </p>
            </div>
            <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                    <button onclick="previousPage()" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div id="pageNumbers" class="flex">
                        <!-- Page numbers will be generated here -->
                    </div>
                    <button onclick="nextPage()" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </nav>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1, totalPages = 1, allPosts = [];
        let currentSearch = '', currentStatus = '', currentFromDate = '', currentToDate = '';

        const AdminPostService = window.AdminPostService || {
            async getPosts(status = '', page = 1, pageSize = 10) {
                const res = await fetch(`${ADMIN_POST_API_BASE_URL}?status=${status || ''}&page=${page}&pageSize=${pageSize}`, {
                    method: 'GET',
                    credentials: 'include'
                });
                if (!res.ok) throw new Error('Không thể lấy danh sách bài đăng');
                return await res.json();
            },
            async getPostDetail(id) {
                const res = await fetch(`${ADMIN_POST_API_BASE_URL}/${id}`, {
                    method: 'GET',
                    credentials: 'include'
                });
                if (!res.ok) throw new Error('Không thể lấy chi tiết bài đăng');
                return await res.json();
            },
            async updatePostStatus(id, status, rejectReason = null) {
                const body = rejectReason ? { status, rejectReason } : { status };
                const res = await fetch(`${ADMIN_POST_API_BASE_URL}/${id}/status`, {
                    method: 'PUT',
                    credentials: 'include',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });
                if (!res.ok) throw new Error('Không thể cập nhật trạng thái bài đăng');
                return await res.json();
            }
        };

        async function loadPosts(page = 1, status = '', search = '', fromDate = '', toDate = '') {
            try {
                const data = await AdminPostService.getPosts(status, page, 10); // Phân trang backend
                allPosts = data.posts;
                let filtered = [...allPosts];
                // Lọc thêm theo search và ngày nếu có
                if (search) {
                    const s = search.toLowerCase();
                    filtered = filtered.filter(post =>
                        (post.title || (post.property && post.property.title) || '').toLowerCase().includes(s) ||
                        (post.name || (post.landlord && (post.landlord.fullName || post.landlord.name)) || '').toLowerCase().includes(s)
                    );
                }
                if (fromDate) {
                    const from = new Date(fromDate);
                    filtered = filtered.filter(post => post.createdAt && new Date(post.createdAt) >= from);
                }
                if (toDate) {
                    const to = new Date(toDate);
                    filtered = filtered.filter(post => post.createdAt && new Date(post.createdAt) <= to);
                }
                totalPages = data.totalPages || Math.ceil((data.total || filtered.length) / 10);
                currentPage = data.page || page;
                renderPostTable(filtered);
                updatePagination(currentPage, totalPages);
            } catch (err) {
                document.querySelector('#postTable tbody').innerHTML = `<tr><td colspan='6' class='text-center text-red-500'>${err.message}</td></tr>`;
            }
        }

        function applyFilters() {
            currentSearch = document.getElementById('searchInput').value.trim();
            currentStatus = document.getElementById('statusFilter').value;
            currentFromDate = document.getElementById('fromDate').value;
            currentToDate = document.getElementById('toDate').value;
            loadPosts(1, currentStatus, currentSearch, currentFromDate, currentToDate);
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('fromDate').value = '';
            document.getElementById('toDate').value = '';
            currentSearch = '';
            currentStatus = '';
            currentFromDate = '';
            currentToDate = '';
            loadPosts(1);
        }

        function getStatusBadge(status, statusDisplay) {
            let color = 'bg-gray-200 text-gray-700';
            let display = statusDisplay || status;
            const statusMap = {
                0: 'Bản nháp',
                1: 'Chờ duyệt',
                2: 'Đã duyệt',
                3: 'Đã từ chối',
                4: 'Đã cho thuê',
                5: 'Đã bán',
                'draft': 'Bản nháp',
                'pending': 'Chờ duyệt',
                'approved': 'Đã duyệt',
                'rejected': 'Đã từ chối',
                'rented': 'Đã cho thuê',
                'sold': 'Đã bán'
            };
            if (statusMap[status] !== undefined) display = statusMap[status];
            if (status === 'pending' || status === 1) color = 'bg-yellow-100 text-yellow-800';
            else if (status === 'approved' || status === 2) color = 'bg-green-100 text-green-800';
            else if (status === 'rejected' || status === 3) color = 'bg-red-100 text-red-800';
            else if (status === 'rented' || status === 4) color = 'bg-blue-100 text-blue-800';
            else if (status === 'sold' || status === 5) color = 'bg-gray-300 text-gray-800';
            else if (status === 'draft' || status === 0) color = 'bg-gray-100 text-gray-700';
            return `<span class="px-3 py-1 rounded-full text-xs font-semibold ${color}">${display}</span>`;
        }

        function renderPostTable(posts) {
            const tbody = document.querySelector('#postTable tbody');
            if (!posts || posts.length === 0) {
                tbody.innerHTML = `<tr><td colspan='6' class='text-center'>Không có dữ liệu</td></tr>`;
                return;
            }
            tbody.innerHTML = posts.map(post => `
                <tr class="hover:bg-blue-50 transition">
                    <td class="px-6 py-4 font-medium text-gray-700">${post.id}</td>
                    <td class="px-6 py-4">
                        <a href="/Admin/PostDetail/${post.id}" class="text-blue-700 hover:underline font-semibold">
                            ${post.title || (post.property && post.property.title) || ''}
                        </a>
                    </td>
                    <td class="px-6 py-4 text-gray-800">${post.name || (post.landlord && (post.landlord.fullName || post.landlord.name)) || post.landlordId || ''}</td>
                    <td class="px-6 py-4 text-gray-600">${post.createdAt ? new Date(post.createdAt).toLocaleDateString('vi-VN') : ''}</td>
                    <td class="px-6 py-4 text-center">${getStatusBadge(post.status, post.statusDisplay)}</td>
                    <td class="px-6 py-4 text-center">
                        <a href="/Admin/PostDetail/${post.id}" class="text-blue-600 hover:text-blue-900 mr-2"><i class="fas fa-eye"></i></a>
                        <button onclick="deletePost(${post.id})" class="text-red-600 hover:text-red-900"><i class="fas fa-trash"></i></button>
                    </td>
                </tr>
            `).join('');
        }

        function updatePagination(page, totalPages) {
            const startIndex = (page - 1) * 10 + 1;
            const endIndex = Math.min(page * 10, allPosts.length);
            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;
            document.getElementById('totalItems').textContent = allPosts.length;

            const pageNumbers = document.getElementById('pageNumbers');
            pageNumbers.innerHTML = '';

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.className = `relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                    i === page
                        ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                        : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                }`;
                button.textContent = i;
                button.onclick = () => loadPosts(i, currentStatus, currentSearch, currentFromDate, currentToDate);
                pageNumbers.appendChild(button);
            }
        }

        function previousPage() {
            if (currentPage > 1) {
                loadPosts(currentPage - 1, currentStatus, currentSearch, currentFromDate, currentToDate);
            }
        }

        function nextPage() {
            if (currentPage < totalPages) {
                loadPosts(currentPage + 1, currentStatus, currentSearch, currentFromDate, currentToDate);
            }
        }

        // Chức năng xóa (giả lập, cần triển khai thực tế)
        function deletePost(id) {
            Swal.fire({
                title: 'Xác nhận xóa',
                text: 'Bạn có chắc chắn muốn xóa bài đăng này?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Gọi API xóa (cần triển khai)
                    console.log(`Deleting post with ID: ${id}`);
                    loadPosts(currentPage, currentStatus, currentSearch, currentFromDate, currentToDate); // Tải lại để cập nhật
                    Swal.fire('Đã xóa!', 'Bài đăng đã được xóa.', 'success');
                }
            });
        }

        // Khởi tạo
        loadPosts(1);
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
}
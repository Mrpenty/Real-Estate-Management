@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}



<div class="container mx-auto py-8">
    <!-- Page Header -->
    <div class="page-header">
        <h1>Quản lý bài đăng</h1>
        <p>Quản lý và duyệt các bài đăng bất động sản từ người dùng</p>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-number" id="totalPosts">0</div>
            <div class="stat-label">Tổng bài đăng</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="pendingPosts">0</div>
            <div class="stat-label">Chờ duyệt</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="approvedPosts">0</div>
            <div class="stat-label">Đã duyệt</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="rejectedPosts">0</div>
            <div class="stat-label">Đã từ chối</div>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="search-container">
        <form id="postFilterForm" class="grid grid-cols-1 md:grid-cols-5 gap-4 items-end">
            <div>
                <label class="form-label">Tìm kiếm</label>
                <input id="searchInput" type="text" placeholder="Tìm theo tiêu đề hoặc chủ nhà..." class="form-input" />
            </div>
            <div>
                <label class="form-label">Trạng thái</label>
                <select id="statusFilter" class="form-input">
                    <option value="">Tất cả</option>
                    <option value="0">Bản nháp</option>
                    <option value="1">Chờ duyệt</option>
                    <option value="2">Đã duyệt</option>
                    <option value="3">Đã từ chối</option>
                    <option value="4">Đã cho thuê</option>
                    <option value="5">Đã bán</option>
                </select>
            </div>
            <div>
                <label class="form-label">Từ ngày</label>
                <input id="fromDate" type="date" class="form-input" />
            </div>
            <div>
                <label class="form-label">Đến ngày</label>
                <input id="toDate" type="date" class="form-input" />
            </div>
            <div class="flex gap-2">
                <button type="button" onclick="applyFilters()" class="btn btn-primary flex-1">
                    <i class="fas fa-search"></i>
                    Lọc
                </button>
                <button type="button" onclick="resetFilters()" class="btn btn-secondary flex-1">
                    <i class="fas fa-undo"></i>
                    Đặt lại
                </button>
            </div>
        </form>
    </div>

    <!-- Action Bar -->
    <div class="flex justify-between items-center mb-6">
        <div class="flex items-center gap-4">
            <button onclick="refreshPosts()" class="btn btn-secondary">
                <i class="fas fa-refresh"></i>
                Làm mới
            </button>
            
        </div>
        <div class="text-sm text-gray-600">
            Hiển thị <span id="displayCount">0</span> bài đăng
        </div>
    </div>

    <!-- Table -->
    <div class="table-container">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="postTable">
                <thead class="table-header">
                    <tr>
                        <th>ID</th>
                        <th>Tiêu đề</th>
                        <th>Chủ nhà</th>
                        <th>Giá</th>
                        <th>Ngày tạo</th>
                        <th class="text-center">Trạng thái</th>
                        <th class="text-center">Hành động</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <!-- Loading State -->
                    <tr>
                        <td colspan="7" class="text-center py-8">
                            <div class="loading-spinner"></div>
                            <p class="mt-2 text-gray-600">Đang tải dữ liệu...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationBar" style="display: none;">
        <div class="flex justify-between items-center">
            <div class="pagination-info">
                Hiển thị <span id="startIndex">1</span> - <span id="endIndex">10</span> trong tổng số <span id="totalItems">0</span> bài đăng
            </div>
            <div class="pagination-buttons" id="paginationButtons">
                <!-- Pagination buttons will be rendered here -->
            </div>
        </div>
    </div>
</div>



<!-- Status Update Modal -->
<div id="statusUpdateModal" class="modal-overlay hidden">
    <div class="modal-content max-w-md">
        <div class="modal-header">
            <h3 class="modal-title">
                <i class="fas fa-edit"></i>
                Cập nhật trạng thái
            </h3>
            <button onclick="closeStatusModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="statusUpdateForm" class="space-y-4">
                <input type="hidden" id="currentPostId" />
                
                <div class="form-group">
                    <label class="form-label">Trạng thái mới</label>
                    <select id="newStatus" class="form-input" required>
                        <option value="0">Bản nháp</option>
                        <option value="1">Chờ duyệt</option>
                        <option value="2">Đã duyệt</option>
                        <option value="3">Đã từ chối</option>
                        <option value="4">Đã cho thuê</option>
                        <option value="5">Đã bán</option>
                    </select>
                </div>
                
                <div class="form-group" id="rejectReasonGroup" style="display: none;">
                    <label class="form-label">Lý do từ chối</label>
                    <textarea id="rejectReason" class="form-input form-textarea" 
                              placeholder="Nhập lý do từ chối..." maxlength="500"></textarea>
                    <div class="text-xs text-gray-500 mt-1 text-right">
                        <span id="reasonCharCount">0</span>/500 ký tự
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button onclick="closeStatusModal()" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Hủy
            </button>
            <button onclick="updatePostStatus()" class="btn btn-primary">
                <i class="fas fa-save"></i>
                Cập nhật
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let currentPage = 1, totalPages = 1, allPosts = [];
        let currentSearch = '', currentStatus = '', currentFromDate = '', currentToDate = '';

        // Sử dụng AdminPostService từ file riêng biệt

        async function loadPosts(page = 1, status = '', search = '', fromDate = '', toDate = '') {
            try {
                showLoading(true);
                const params = { page, pageSize: 10 };
                if (status) params.status = status;
                
                const data = await AdminPostService.getPosts(params);
                allPosts = data.posts || [];
                let filtered = [...allPosts];
                
                // Lọc thêm theo search và ngày nếu có
                if (search) {
                    const s = search.toLowerCase();
                    filtered = filtered.filter(post =>
                        (post.title || (post.property && post.property.title) || '').toLowerCase().includes(s) ||
                        (post.name || (post.landlord && (post.landlord.fullName || post.landlord.name)) || '').toLowerCase().includes(s)
                    );
                }
                if (fromDate) {
                    const from = new Date(fromDate);
                    filtered = filtered.filter(post => post.createdAt && new Date(post.createdAt) >= from);
                }
                if (toDate) {
                    const to = new Date(toDate);
                    filtered = filtered.filter(post => post.createdAt && new Date(post.createdAt) <= to);
                }
                
                totalPages = data.totalPages || Math.ceil((data.total || filtered.length) / 10);
                currentPage = data.page || page;
                
                updateStats(allPosts);
                renderPostTable(filtered);
                updatePagination(currentPage, totalPages);
            } catch (err) {
                showError(err.message);
            } finally {
                hideLoading();
            }
        }

        function updateStats(posts) {
            const total = posts.length;
            const pending = posts.filter(p => p.status === 1 || p.status === 'pending').length;
            const approved = posts.filter(p => p.status === 2 || p.status === 'approved').length;
            const rejected = posts.filter(p => p.status === 3 || p.status === 'rejected').length;
            
            document.getElementById('totalPosts').textContent = total;
            document.getElementById('pendingPosts').textContent = pending;
            document.getElementById('approvedPosts').textContent = approved;
            document.getElementById('rejectedPosts').textContent = rejected;
            document.getElementById('displayCount').textContent = allPosts.length;
        }

        function applyFilters() {
            currentSearch = document.getElementById('searchInput').value.trim();
            currentStatus = document.getElementById('statusFilter').value;
            currentFromDate = document.getElementById('fromDate').value;
            currentToDate = document.getElementById('toDate').value;
            loadPosts(1, currentStatus, currentSearch, currentFromDate, currentToDate);
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('fromDate').value = '';
            document.getElementById('toDate').value = '';
            currentSearch = '';
            currentStatus = '';
            currentFromDate = '';
            currentToDate = '';
            loadPosts(1);
        }

        function refreshPosts() {
            loadPosts(currentPage, currentStatus, currentSearch, currentFromDate, currentToDate);
        }

       

        function getStatusBadge(status, statusDisplay) {
            let color = 'badge-gray';
            let display = statusDisplay || status;
            const statusMap = {
                0: 'Bản nháp',
                1: 'Chờ duyệt',
                2: 'Đã duyệt',
                3: 'Đã từ chối',
                4: 'Đã cho thuê',
                5: 'Đã bán',
                'draft': 'Bản nháp',
                'pending': 'Chờ duyệt',
                'approved': 'Đã duyệt',
                'rejected': 'Đã từ chối',
                'rented': 'Đã cho thuê',
                'sold': 'Đã bán'
            };
            if (statusMap[status] !== undefined) display = statusMap[status];
            
            if (status === 'pending' || status === 1) color = 'badge-warning';
            else if (status === 'approved' || status === 2) color = 'badge-success';
            else if (status === 'rejected' || status === 3) color = 'badge-danger';
            else if (status === 'rented' || status === 4) color = 'badge-info';
            else if (status === 'sold' || status === 5) color = 'badge-gray';
            else if (status === 'draft' || status === 0) color = 'badge-gray';
            
            return `<span class="badge ${color}">${display}</span>`;
        }

        function renderPostTable(posts) {
            const tbody = document.querySelector('#postTable tbody');
            if (!posts || posts.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-8">
                            <div class="empty-state">
                                <i class="fas fa-home"></i>
                                <p>Không có bài đăng nào</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = posts.map(post => `
                <tr class="table-row">
                    <td class="font-medium">${post.id}</td>
                    <td>
                        <div class="font-medium text-gray-900">${post.title || (post.property && post.property.title) || ''}</div>

                    </td>
                    <td>${post.name || (post.landlord && (post.landlord.fullName || post.landlord.name)) || post.landlordId || ''}</td>
                    <td>
                        <span class="font-medium text-green-600">
                            ${post.property.price ? post.property.price.toLocaleString('vi-VN') + ' VNĐ' : 'N/A'}
                        </span>
                    </td>
                    <td>${post.createdAt ? new Date(post.createdAt).toLocaleDateString('vi-VN') : ''}</td>
                    <td class="text-center">${getStatusBadge(post.status, post.statusDisplay)}</td>
                    <td class="text-center">
                        <button onclick="showPostDetail(${post.id})" class="btn btn-secondary btn-sm mr-2" title="Xem chi tiết">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button onclick="showStatusUpdateModal(${post.id})" class="btn btn-primary btn-sm mr-2" title="Cập nhật trạng thái">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deletePost(${post.id})" class="btn btn-danger btn-sm" title="Xóa">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function updatePagination(page, totalPages) {
            const startIndex = (page - 1) * 10 + 1;
            const endIndex = Math.min(page * 10, allPosts.length);
            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;
            document.getElementById('totalItems').textContent = allPosts.length;

            const pageNumbers = document.getElementById('paginationButtons');
            pageNumbers.innerHTML = '';

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.className = `btn ${i === page ? 'btn-primary' : 'btn-secondary'} btn-sm`;
                button.textContent = i;
                button.onclick = () => loadPosts(i, currentStatus, currentSearch, currentFromDate, currentToDate);
                pageNumbers.appendChild(button);
            }

            if (totalPages > 0) {
                document.getElementById('paginationBar').style.display = 'block';
            }
        }

        function showPostDetail(id) {
            // Chuyển trang đến PostDetail với postId
            window.location.href = `/Admin/PostDetail/${id}`;
        }



        function showStatusUpdateModal(postId) {
            const post = allPosts.find(p => p.id === postId);
            if (!post) {
                showError('Không tìm thấy bài đăng');
                return;
            }
            
            document.getElementById('currentPostId').value = postId;
            document.getElementById('newStatus').value = post.status;
            document.getElementById('rejectReason').value = post.rejectReason || '';
            
            // Show/hide reject reason field based on status
            const rejectGroup = document.getElementById('rejectReasonGroup');
            const statusSelect = document.getElementById('newStatus');
            
            statusSelect.addEventListener('change', function() {
                if (this.value === '3') {
                    rejectGroup.style.display = 'block';
                } else {
                    rejectGroup.style.display = 'none';
                }
            });
            
            // Character count for reject reason
            const rejectReason = document.getElementById('rejectReason');
            const reasonCharCount = document.getElementById('reasonCharCount');
            rejectReason.addEventListener('input', function() {
                reasonCharCount.textContent = this.value.length;
            });
            
            document.getElementById('statusUpdateModal').classList.remove('hidden');
        }

        function closeStatusModal() {
            document.getElementById('statusUpdateModal').classList.add('hidden');
        }

        async function updatePostStatus() {
            const postId = document.getElementById('currentPostId').value;
            const newStatus = document.getElementById('newStatus').value;
            const rejectReason = document.getElementById('rejectReason').value;
            
            try {
                // Chuyển đổi status từ string sang number nếu cần
                let statusToSend = newStatus;
                if (newStatus === '1') statusToSend = 'pending';
                else if (newStatus === '2') statusToSend = 'approved';
                else if (newStatus === '3') statusToSend = 'rejected';
                else if (newStatus === '4') statusToSend = 'rented';
                else if (newStatus === '5') statusToSend = 'sold';
                else if (newStatus === '0') statusToSend = 'draft';
                
                await AdminPostService.updatePostStatus(postId, statusToSend, newStatus === '3' ? rejectReason : null);
                showSuccess('Cập nhật trạng thái thành công!');
                closeStatusModal();
                loadPosts(currentPage, currentStatus, currentSearch, currentFromDate, currentToDate);
            } catch (err) {
                showError(err.message);
            }
        }

        async function deletePost(id) {
            const result = await Swal.fire({
                title: 'Xác nhận xóa',
                text: 'Bạn có chắc chắn muốn xóa bài đăng này?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Có, xóa!',
                cancelButtonText: 'Hủy'
            });

            if (result.isConfirmed) {
                try {
                    await AdminPostService.deletePost(id);
                    showSuccess('Xóa bài đăng thành công!');
                    loadPosts(currentPage, currentStatus, currentSearch, currentFromDate, currentToDate);
                } catch (err) {
                    showError(err.message);
                }
            }
        }

        function showLoading(show) {
            const tbody = document.querySelector('#postTable tbody');
            if (show) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-8">
                            <div class="loading-spinner"></div>
                            <p class="mt-2 text-gray-600">Đang tải dữ liệu...</p>
                        </td>
                    </tr>
                `;
            }
        }

        function hideLoading() {
            // Loading is handled by renderPostTable
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi',
                text: message,
                confirmButtonText: 'Đóng'
            });
        }

        function showSuccess(message) {
            Swal.fire({
                icon: 'success',
                title: 'Thành công',
                text: message,
                confirmButtonText: 'Đóng'
            });
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            loadPosts(1);

            // Add event listeners for real-time search
            document.getElementById('searchInput').addEventListener('input', applyFilters);
            document.getElementById('statusFilter').addEventListener('change', applyFilters);
            document.getElementById('fromDate').addEventListener('change', applyFilters);
            document.getElementById('toDate').addEventListener('change', applyFilters);
        });
    </script>
}
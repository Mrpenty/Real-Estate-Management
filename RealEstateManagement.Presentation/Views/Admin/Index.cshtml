@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}



<div class="container mx-auto py-8">
    <!-- Page Header -->
    <div class="page-header">
        <h1>Quản lý người dùng</h1>
        <p>Quản lý tài khoản người dùng, phân quyền và xác thực</p>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-number" id="totalUsers">0</div>
            <div class="stat-label">Tổng người dùng</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="activeUsers">0</div>
            <div class="stat-label">Người dùng hoạt động</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="pendingVerifications">0</div>
            <div class="stat-label">Chờ xác thực</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="landlords">0</div>
            <div class="stat-label">Chủ nhà</div>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="search-container">
        <form id="userFilterForm" class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
            <div>
                <label class="form-label">Tìm kiếm</label>
                <input type="text" name="search" id="searchInput" placeholder="Tìm tên hoặc SĐT..." class="form-input" />
            </div>
            <div>
                <label class="form-label">Vai trò</label>
                <select name="role" id="roleSelect" class="form-input">
                    <option value="">Tất cả vai trò</option>
                    <option value="renter">Renter</option>
                    <option value="landlord">Landlord</option>
                </select>
            </div>
            <div>
                <label class="form-label">Trạng thái</label>
                <select name="isActive" id="activeSelect" class="form-input">
                    <option value="">Tất cả</option>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>
            <div>
                <button type="submit" class="btn btn-primary w-full">
                    <i class="fas fa-search"></i>
                    Tìm kiếm
                </button>
            </div>
        </form>
    </div>

    <!-- Table -->
    <div class="table-container">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="table-header">
                    <tr>
                        <th>ID</th>
                        <th>Tên</th>
                        <th>SĐT</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Trạng thái</th>
                        <th>Xác thực</th>
                        <th>Ngày tạo</th>
                        <th class="text-center">Hành động</th>
                    </tr>
                </thead>
                <tbody id="userTableBody" class="bg-white divide-y divide-gray-200">
                    <!-- Loading State -->
                    <tr>
                        <td colspan="9" class="text-center py-8">
                            <div class="loading-spinner"></div>
                            <p class="mt-2 text-gray-600">Đang tải dữ liệu...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationBar" style="display: none;">
        <div class="flex justify-between items-center">
            <div class="pagination-info">
                Hiển thị <span id="startIndex">1</span> - <span id="endIndex">10</span> trong tổng số <span id="totalItems">0</span> người dùng
            </div>
            <div class="pagination-buttons" id="paginationButtons">
                <!-- Pagination buttons will be rendered here -->
            </div>
        </div>
    </div>
</div>

<!-- User Detail Modal -->
<div id="userDetailModal" class="modal-overlay hidden">
    <div class="modal-content max-w-4xl">
        <div class="modal-header">
            <h3 class="modal-title">
                <i class="fas fa-user"></i>
                <span id="modalUserName">Chi tiết người dùng</span>
            </h3>
            <button onclick="closeUserDetailModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        <div class="modal-body">
            <div id="userDetailContent">
                <!-- User detail content will be rendered here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let currentPage = 1;
        let totalPages = 1;
        let lastFilter = {};
        let currentUserDetail = null;
        let users = [];

        async function loadUsers(page = 1) {
            try {
                showLoading(true);
                const search = document.getElementById('searchInput').value;
                const role = document.getElementById('roleSelect').value;
                const isActive = document.getElementById('activeSelect').value;
                const params = {
                    search,
                    role,
                    isActive: isActive === '' ? undefined : isActive,
                    page,
                    pageSize: 10
                };
                lastFilter = params;
                
                const data = await AdminUserService.getUsers(params);
                users = data.users;
                
                renderUserTable(users);
                renderPagination(data.page, data.totalPages, data.totalUsers);
                updateStats(data.users);
                
                currentPage = data.page;
                totalPages = data.totalPages;
                
                showPagination();
            } catch (err) {
                showError('Không thể tải danh sách người dùng: ' + err.message);
            } finally {
                hideLoading();
            }
        }

        function renderUserTable(users) {
            const tbody = document.getElementById('userTableBody');
            if (!users || users.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="text-center py-8">
                            <div class="empty-state">
                                <i class="fas fa-users"></i>
                                <p>Không có người dùng nào</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = users.map(user => `
                <tr class="table-row">
                    <td class="font-medium">${user.id}</td>
                    <td>
                        <a href="#" class="text-blue-600 hover:text-blue-800 font-medium" onclick="showUserDetail(${user.id});return false;">
                            ${user.name || 'N/A'}
                        </a>
                    </td>
                    <td>${user.phoneNumber || 'N/A'}</td>
                    <td>${user.email || 'N/A'}</td>
                    <td>
                        <span class="badge ${user.role === 'landlord' ? 'badge-success' : 'badge-info'}">
                            ${user.role || 'N/A'}
                        </span>
                    </td>
                    <td>
                        <span class="badge ${user.isActive ? 'badge-success' : 'badge-danger'}">
                            ${user.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td>
                        ${getVerificationStatusBadge(user.verificationStatus, user.role)}
                    </td>
                    <td>${user.createdAt ? new Date(user.createdAt).toLocaleDateString('vi-VN') : 'N/A'}</td>
                    <td class="text-center">
                        <button onclick="showUserDetail(${user.id});return false;" class="btn btn-secondary btn-sm mr-2">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteUser(${user.id})" class="btn btn-danger btn-sm">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function getVerificationStatusBadge(status, role) {
            if (role !== 'renter') {
                return '<span class="text-gray-400 text-xs">-</span>';
            }
            
            switch (status) {
                case 'pending':
                    return '<span class="badge badge-warning">Chờ duyệt</span>';
                case 'approved':
                    return '<span class="badge badge-success">Đã duyệt</span>';
                case 'rejected':
                    return '<span class="badge badge-danger">Từ chối</span>';
                default:
                    return '<span class="badge badge-gray">Chưa yêu cầu</span>';
            }
        }

        function renderPagination(page, totalPages, totalUsers) {
            const startIndex = (page - 1) * 10 + 1;
            const endIndex = Math.min(page * 10, totalUsers);
            
            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;
            document.getElementById('totalItems').textContent = totalUsers;
            
            const buttonsContainer = document.getElementById('paginationButtons');
            buttonsContainer.innerHTML = '';
            
            // Previous button
            if (page > 1) {
                buttonsContainer.innerHTML += `
                    <button onclick="goToPage(${page - 1})" class="btn btn-secondary btn-sm">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                `;
            }
            
            // Page numbers
            const startPage = Math.max(1, page - 2);
            const endPage = Math.min(totalPages, page + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                buttonsContainer.innerHTML += `
                    <button onclick="goToPage(${i})" class="btn ${i === page ? 'btn-primary' : 'btn-secondary'} btn-sm">
                        ${i}
                    </button>
                `;
            }
            
            // Next button
            if (page < totalPages) {
                buttonsContainer.innerHTML += `
                    <button onclick="goToPage(${page + 1})" class="btn btn-secondary btn-sm">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                `;
            }
        }

        function goToPage(page) {
            loadUsers(page);
        }

        function updateStats(users) {
            const totalUsers = users.length;
            const activeUsers = users.filter(u => u.isActive).length;
            const pendingVerifications = users.filter(u => u.role === 'renter' && u.verificationStatus === 'pending').length;
            const landlords = users.filter(u => u.role === 'landlord').length;
            
            document.getElementById('totalUsers').textContent = totalUsers;
            document.getElementById('activeUsers').textContent = activeUsers;
            document.getElementById('pendingVerifications').textContent = pendingVerifications;
            document.getElementById('landlords').textContent = landlords;
        }

        function showLoading(show) {
            const tbody = document.getElementById('userTableBody');
            if (show) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="text-center py-8">
                            <div class="loading-spinner"></div>
                            <p class="mt-2 text-gray-600">Đang tải dữ liệu...</p>
                        </td>
                    </tr>
                `;
            }
        }

        function hideLoading() {
            // Loading is handled by renderUserTable
        }

        function showPagination() {
            document.getElementById('paginationBar').style.display = 'block';
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: message,
                confirmButtonText: 'Đóng'
            });
        }

        function showSuccess(message) {
            Swal.fire({
                icon: 'success',
                title: 'Thành công!',
                text: message,
                confirmButtonText: 'Đóng'
            });
        }

        // Event Listeners
        document.getElementById('userFilterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            loadUsers(1);
        });

        // User Detail Modal
        async function showUserDetail(userId) {
            try {
                const user = await AdminUserService.getUserDetail(userId);
                currentUserDetail = user;
                
                document.getElementById('modalUserName').textContent = user.name;
                document.getElementById('userDetailContent').innerHTML = `
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-4">
                            <div class="form-group">
                                <label class="form-label">Email</label>
                                <div class="flex items-center gap-2">
                                    <span class="form-input bg-gray-50">${user.email}</span>
                                    ${user.emailConfirmed ? '<span class="badge badge-success">Đã xác thực</span>' : '<span class="badge badge-warning">Chưa xác thực</span>'}
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Số điện thoại</label>
                                <div class="flex items-center gap-2">
                                    <span class="form-input bg-gray-50">${user.phoneNumber || 'N/A'}</span>
                                    ${user.phoneNumberConfirmed ? '<span class="badge badge-success">Đã xác thực</span>' : '<span class="badge badge-warning">Chưa xác thực</span>'}
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Vai trò</label>
                                <span class="badge ${user.role === 'landlord' ? 'badge-success' : 'badge-info'}">${user.role}</span>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Trạng thái</label>
                                <span class="badge ${user.isActive ? 'badge-success' : 'badge-danger'}">${user.isActive ? 'Active' : 'Inactive'}</span>
                            </div>
                            ${user.role === 'renter' ? `
                                <div class="form-group">
                                    <label class="form-label">Trạng thái xác thực</label>
                                    ${getVerificationStatusBadge(user.verificationStatus, user.role)}
                                </div>
                            ` : ''}
                        </div>
                        <div class="space-y-4">
                            <div class="form-group">
                                <label class="form-label">Số CCCD</label>
                                <span class="form-input bg-gray-50">${user.citizenIdNumber || 'Chưa cập nhật'}</span>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Ngày cấp CCCD</label>
                                <span class="form-input bg-gray-50">${user.citizenIdIssuedDate ? new Date(user.citizenIdIssuedDate).toLocaleDateString('vi-VN') : 'Chưa cập nhật'}</span>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Ngày hết hạn CCCD</label>
                                <span class="form-input bg-gray-50">${user.citizenIdExpiryDate ? new Date(user.citizenIdExpiryDate).toLocaleDateString('vi-VN') : 'Chưa cập nhật'}</span>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Ngày tạo</label>
                                <span class="form-input bg-gray-50">${user.createdAt ? new Date(user.createdAt).toLocaleDateString('vi-VN') : 'N/A'}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6">
                        <h4 class="font-semibold text-lg mb-4">Ảnh căn cước công dân</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="form-label">Mặt trước</label>
                                <div class="border rounded-lg p-4 bg-gray-50">
                                                        <img src="${user.citizenIdFrontImageUrl ? config.buildApiUrl(user.citizenIdFrontImageUrl) : '/image/no-image.png'}" 
                         class="max-h-48 mx-auto object-contain" alt="CCCD mặt trước" />
                </div>
            </div>
            <div>
                <label class="form-label">Mặt sau</label>
                <div class="border rounded-lg p-4 bg-gray-50">
                    <img src="${user.citizenIdBackImageUrl ? config.buildApiUrl(user.citizenIdBackImageUrl) : '/image/no-image.png'}" 
                         class="max-h-48 mx-auto object-contain" alt="CCCD mặt sau" />
                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6">
                        <label class="form-label">Lý do từ chối</label>
                        <textarea id="rejectReasonInput" class="form-input form-textarea" 
                                  placeholder="Nhập lý do từ chối (tối đa 400 ký tự)" maxlength="400">${user.verificationRejectReason || ''}</textarea>
                        <div class="text-right text-xs text-gray-500 mt-1">
                            <span id="rejectReasonCount">0</span>/400 ký tự
                        </div>
                    </div>
                    
                    <div class="modal-footer">
                        <button onclick="closeUserDetailModal()" class="btn btn-secondary">
                            <i class="fas fa-times"></i>
                            Đóng
                        </button>
                        <button onclick="toggleRole(${user.id}, '${user.role}')" class="btn ${user.role === 'landlord' ? 'btn-warning' : 'btn-success'}">
                            <i class="fas fa-exchange-alt"></i>
                            ${user.role === 'landlord' ? 'Chuyển về Renter' : 'Duyệt thành Landlord'}
                        </button>
                        <button onclick="banUser(${user.id}, ${user.isActive ? false : true})" class="btn ${user.isActive ? 'btn-danger' : 'btn-success'}">
                            <i class="fas ${user.isActive ? 'fa-ban' : 'fa-unlock'}"></i>
                            ${user.isActive ? 'Ban' : 'Unban'}
                        </button>
                        <button onclick="rejectUser(${user.id})" class="btn btn-danger">
                            <i class="fas fa-times-circle"></i>
                            Từ chối
                        </button>
                    </div>
                `;
                
                // Character count for rejection reason
                const rejectReasonInput = document.getElementById('rejectReasonInput');
                const rejectReasonCount = document.getElementById('rejectReasonCount');
                if (rejectReasonInput && rejectReasonCount) {
                    rejectReasonCount.textContent = rejectReasonInput.value.length;
                    rejectReasonInput.addEventListener('input', function() {
                        rejectReasonCount.textContent = rejectReasonInput.value.length;
                    });
                }
                
                document.getElementById('userDetailModal').classList.remove('hidden');
            } catch (err) {
                showError(err.message);
            }
        }

        function closeUserDetailModal() {
            document.getElementById('userDetailModal').classList.add('hidden');
        }

        // User Management Functions
        async function updateUserDetail(changes) {
            if (!currentUserDetail) {
                showError('Không tìm thấy thông tin user');
                return;
            }
            
            const payload = {
                name: currentUserDetail.name,
                email: currentUserDetail.email,
                phoneNumber: currentUserDetail.phoneNumber,
                profilePictureUrl: currentUserDetail.profilePictureUrl,
                isVerified: currentUserDetail.isVerified,
                isActive: currentUserDetail.isActive,
                role: currentUserDetail.role,
                citizenIdNumber: currentUserDetail.citizenIdNumber,
                citizenIdFrontImageUrl: currentUserDetail.citizenIdFrontImageUrl,
                citizenIdBackImageUrl: currentUserDetail.citizenIdBackImageUrl,
                citizenIdIssuedDate: currentUserDetail.citizenIdIssuedDate,
                citizenIdExpiryDate: currentUserDetail.citizenIdExpiryDate,
                verificationRejectReason: currentUserDetail.verificationRejectReason,
                verificationStatus: currentUserDetail.verificationStatus,
                ...changes
            };
            
            const res = await AdminUserService.updateUser(currentUserDetail.id, payload);
            return res;
        }

        async function toggleRole(userId, currentRole) {
            const action = currentRole === 'landlord' ? 'chuyển về Renter' : 'duyệt thành Landlord';
            const result = await Swal.fire({
                title: 'Xác nhận thay đổi vai trò',
                text: `Bạn có chắc muốn ${action}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có, thay đổi!',
                cancelButtonText: 'Hủy'
            });

            if (result.isConfirmed) {
                try {
                    const newRole = currentRole === 'landlord' ? 'renter' : 'landlord';
                    const newStatus = currentRole === 'landlord' ? 'none' : 'approved';
                    
                    const res = await updateUserDetail({ 
                        role: newRole, 
                        verificationStatus: newStatus 
                    });
                    
                    if (!res.ok) throw new Error('Không thể thay đổi vai trò user');
                    
                    showSuccess(`Đã ${action} thành công!`);
                    closeUserDetailModal();
                    loadUsers(currentPage);
                } catch (err) {
                    showError(err.message);
                }
            }
        }

        async function banUser(userId, isActive) {
            const action = isActive ? 'mở khóa' : 'ban';
            const result = await Swal.fire({
                title: 'Xác nhận',
                text: `${isActive ? 'Mở khóa' : 'Ban'} user này?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: `Có, ${action}!`,
                cancelButtonText: 'Hủy'
            });

            if (result.isConfirmed) {
                try {
                    const res = await updateUserDetail({ isActive: isActive });
                    if (!res.ok) throw new Error('Không thể cập nhật trạng thái user');
                    
                    showSuccess(`Đã ${action} user thành công!`);
                    closeUserDetailModal();
                    loadUsers(currentPage);
                } catch (err) {
                    showError(err.message);
                }
            }
        }

        async function rejectUser(userId) {
            const reason = document.getElementById('rejectReasonInput').value;
            if (!reason.trim()) {
                showError('Vui lòng nhập lý do từ chối');
                return;
            }
            
            const result = await Swal.fire({
                title: 'Xác nhận từ chối',
                text: 'Từ chối yêu cầu xác thực của user này?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Có, từ chối!',
                cancelButtonText: 'Hủy'
            });

            if (result.isConfirmed) {
                try {
                    const res = await updateUserDetail({ 
                        verificationStatus: 'rejected',
                        verificationRejectReason: reason 
                    });
                    if (!res.ok) throw new Error('Không thể từ chối user');
                    
                    showSuccess('Đã từ chối yêu cầu xác thực thành công!');
                    closeUserDetailModal();
                    loadUsers(currentPage);
                } catch (err) {
                    showError(err.message);
                }
            }
        }

        async function deleteUser(userId) {
            const result = await Swal.fire({
                title: 'Xác nhận xóa',
                text: 'Bạn có chắc chắn muốn xóa user này?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Có, xóa!',
                cancelButtonText: 'Hủy'
            });

            if (result.isConfirmed) {
                try {
                    const res = await AdminUserService.deleteUser(userId);
                    
                    if (!res.ok) throw new Error('Không thể xóa user');
                    
                    showSuccess('Đã xóa user thành công!');
                    loadUsers(currentPage);
                } catch (err) {
                    showError(err.message);
                }
            }
        }

        // Load initial data
        loadUsers(1);
    </script>
} 
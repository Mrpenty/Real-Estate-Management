@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}



<div class="container mx-auto py-8">
    <!-- Page Header -->
    <div class="page-header">
        <h1>Quản lý Slider</h1>
        <p>Quản lý các banner slider hiển thị trên trang chủ</p>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-number" id="totalSliders">0</div>
            <div class="stat-label">Tổng slider</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="activeSliders">0</div>
            <div class="stat-label">Đang hoạt động</div>
        </div>
       
    </div>

    <!-- Search and Filter -->
    <div class="search-container">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="form-label">Tìm kiếm</label>
                <input type="text" id="searchInput" placeholder="Tìm theo tiêu đề..." class="form-input" />
            </div>
            <div>
                <label class="form-label">Trạng thái</label>
                <select id="statusFilter" class="form-input">
                    <option value="">Tất cả</option>
                    <option value="active">Đang hoạt động</option>
                    <option value="inactive">Không hoạt động</option>
                </select>
            </div>
           
            <div class="flex items-end">
                <button onclick="applyFilters()" class="btn btn-primary w-full">
                    <i class="fas fa-search"></i>
                    Lọc
                </button>
            </div>
        </div>
    </div>

    <!-- Action Bar -->
    <div class="flex justify-between items-center mb-6">
        <div class="flex items-center gap-4">
            <button onclick="openCreateModal()" class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Thêm slider mới
            </button>
            <button onclick="refreshSliders()" class="btn btn-secondary">
                <i class="fas fa-refresh"></i>
                Làm mới
            </button>
        </div>
        <div class="text-sm text-gray-600">
            Hiển thị <span id="displayCount">0</span> slider
        </div>
    </div>

    <!-- Slider Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="sliderGrid">
        <!-- Loading State -->
        <div class="col-span-full text-center py-12">
            <div class="loading-spinner"></div>
            <p class="mt-4 text-gray-600">Đang tải dữ liệu...</p>
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationBar" style="display: none;">
        <div class="flex justify-between items-center">
            <div class="pagination-info">
                Hiển thị <span id="startIndex">1</span> - <span id="endIndex">10</span> trong tổng số <span id="totalItems">0</span> slider
            </div>
            <div class="pagination-buttons" id="paginationButtons">
                <!-- Pagination buttons will be rendered here -->
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div id="sliderModal" class="modal-overlay hidden">
    <div class="modal-content max-w-2xl">
        <div class="modal-header">
            <h3 class="modal-title">
                <i class="fas fa-images"></i>
                <span id="modalTitle">Thêm slider mới</span>
            </h3>
            <button onclick="closeModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="sliderForm" class="space-y-6">
                <input type="hidden" id="sliderId" />
                
                <div class="form-group">
                    <label class="form-label">Tiêu đề *</label>
                    <input type="text" id="sliderTitle" required maxlength="100" class="form-input" />
                    <div class="text-xs text-gray-500 mt-1 text-right">
                        <span id="titleCharCount">0</span>/100 ký tự
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Mô tả</label>
                    <textarea id="sliderDescription" maxlength="500" rows="3" class="form-input form-textarea"></textarea>
                    <div class="text-xs text-gray-500 mt-1 text-right">
                        <span id="descriptionCharCount">0</span>/500 ký tự
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Hình ảnh *</label>
                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
                        <input type="file" id="sliderImage" accept="image/*" class="hidden" required />
                        <div id="imagePreview" class="space-y-4">
                            <i class="fas fa-cloud-upload-alt text-4xl text-gray-400"></i>
                            <div>
                                <p class="text-lg font-medium text-gray-700">Tải lên hình ảnh</p>
                                <p class="text-sm text-gray-500">PNG, JPG, JPEG tối đa 5MB</p>
                            </div>
                            <button type="button" onclick="document.getElementById('sliderImage').click()" class="btn btn-primary">
                                <i class="fas fa-upload"></i>
                                Chọn hình ảnh
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Trạng thái</label>
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="sliderIsActive" class="rounded border-gray-300 text-blue-500 focus:ring-blue-400" />
                        <span class="ml-2 text-sm text-gray-700">Đang hoạt động</span>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" onclick="closeModal()" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Hủy
            </button>
            <button type="submit" form="sliderForm" class="btn btn-primary">
                <i class="fas fa-save"></i>
                Lưu
            </button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal-overlay hidden">
    <div class="modal-content max-w-md">
        <div class="modal-body text-center">
            <i class="fas fa-exclamation-triangle text-4xl text-red-500 mb-4"></i>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Xác nhận xóa</h3>
            <p class="text-gray-600 mb-6">Bạn có chắc chắn muốn xóa slider này?</p>
        </div>
        <div class="modal-footer">
            <button onclick="closeDeleteModal()" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Hủy
            </button>
            <button onclick="confirmDelete()" class="btn btn-danger">
                <i class="fas fa-trash"></i>
                Xóa
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const SLIDER_API_BASE_URL = 'https://localhost:7031/api/Slider';
        let sliders = [];
        let currentDeleteId = null;
        let currentPage = 1;
        let pageSize = 9;
        let filteredSliders = [];

        const SliderService = {
            async getAll() {
                const res = await fetch(`${SLIDER_API_BASE_URL}`, {
                    method: 'GET',
                    credentials: 'include'
                });
                if (!res.ok) throw new Error('Không thể lấy danh sách slider');
                return await res.json();
            },

            async getById(id) {
                const res = await fetch(`${SLIDER_API_BASE_URL}/${id}`, {
                    method: 'GET',
                    credentials: 'include'
                });
                if (!res.ok) throw new Error('Không thể lấy thông tin slider');
                return await res.json();
            },

            async create(formData) {
                const res = await fetch(`${SLIDER_API_BASE_URL}`, {
                    method: 'POST',
                    credentials: 'include',
                    body: formData
                });
                if (!res.ok) throw new Error('Không thể tạo slider');
                return await res.json();
            },

            async update(id, formData) {
                const res = await fetch(`${SLIDER_API_BASE_URL}/${id}`, {
                    method: 'PUT',
                    credentials: 'include',
                    body: formData
                });
                if (!res.ok) throw new Error('Không thể cập nhật slider');
                return await res.json();
            },

            async delete(id) {
                const res = await fetch(`${SLIDER_API_BASE_URL}/${id}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                if (!res.ok) throw new Error('Không thể xóa slider');
                return true;
            }
        };

        async function loadSliders() {
            try {
                showLoading(true);
                const response = await SliderService.getAll();
                sliders = response;
                filteredSliders = [...sliders];
                updateStats(sliders);
                renderSliders();
            } catch (err) {
                showError(err.message);
            } finally {
                hideLoading();
            }
        }

        function updateStats(sliders) {
            const total = sliders.length;
            const active = sliders.filter(s => s.isActive !== false).length;
            const totalImages = sliders.length;
            const totalSize = sliders.reduce((sum, s) => sum + (s.fileSize || 0), 0);
            
            document.getElementById('totalSliders').textContent = total;
            document.getElementById('activeSliders').textContent = active;
            document.getElementById('totalImages').textContent = totalImages;
            document.getElementById('totalSize').textContent = (totalSize / 1024 / 1024).toFixed(2) + ' MB';
            document.getElementById('displayCount').textContent = filteredSliders.length;
        }

        function renderSliders() {
            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            const pageSliders = filteredSliders.slice(startIndex, endIndex);

            const grid = document.getElementById('sliderGrid');

            if (filteredSliders.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <div class="empty-state">
                            <i class="fas fa-images"></i>
                            <p>Không có slider nào</p>
                        </div>
                    </div>
                `;
                return;
            }

            grid.innerHTML = pageSliders.map(slider => `
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                    <div class="relative">
                        <img src="${slider.imageUrl ? SLIDER_API_BASE_URL.replace('/api/Slider', '') + slider.imageUrl : '/image/no-image.png'}" 
                             alt="${slider.title}" 
                             class="w-full h-48 object-cover" 
                             onerror="this.src='/image/no-image.png'" />
                        <div class="absolute top-2 right-2">
                            <span class="badge ${slider.isActive !== false ? 'badge-success' : 'badge-gray'}">
                                ${slider.isActive !== false ? 'Hoạt động' : 'Không hoạt động'}
                            </span>
                        </div>
                    </div>
                    <div class="p-4">
                        <h3 class="font-semibold text-lg text-gray-900 mb-2">${slider.title}</h3>
                        <p class="text-gray-600 text-sm mb-3 line-clamp-2">${slider.description || 'Không có mô tả'}</p>
                        <div class="flex justify-between items-center text-xs text-gray-500 mb-3">
                            <span>ID: ${slider.id}</span>
                            <span>${formatDate(slider.createdAt)}</span>
                        </div>
                        <div class="flex gap-2">
                            <button onclick="editSlider(${slider.id})" class="btn btn-primary btn-sm flex-1">
                                <i class="fas fa-edit"></i>
                                Sửa
                            </button>
                            <button onclick="deleteSlider(${slider.id})" class="btn btn-danger btn-sm">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');

            updatePagination();
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredSliders.length / pageSize);
            const startIndex = (currentPage - 1) * pageSize + 1;
            const endIndex = Math.min(currentPage * pageSize, filteredSliders.length);

            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;
            document.getElementById('totalItems').textContent = filteredSliders.length;

            const buttonsContainer = document.getElementById('paginationButtons');
            buttonsContainer.innerHTML = '';

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.className = `btn ${i === currentPage ? 'btn-primary' : 'btn-secondary'} btn-sm`;
                button.textContent = i;
                button.onclick = () => goToPage(i);
                buttonsContainer.appendChild(button);
            }

            if (totalPages > 0) {
                document.getElementById('paginationBar').style.display = 'block';
            }
        }

        function goToPage(page) {
            currentPage = page;
            renderSliders();
        }

        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const sortFilter = document.getElementById('sortFilter').value;

            filteredSliders = sliders.filter(slider => {
                const matchesSearch = slider.title.toLowerCase().includes(searchTerm) ||
                                     (slider.description && slider.description.toLowerCase().includes(searchTerm));
                const matchesStatus = statusFilter === '' || 
                                    (statusFilter === 'active' && slider.isActive !== false) ||
                                    (statusFilter === 'inactive' && slider.isActive === false);

                return matchesSearch && matchesStatus;
            });

            // Sort
            switch (sortFilter) {
                case 'newest':
                    filteredSliders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                    break;
                case 'oldest':
                    filteredSliders.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
                    break;
                case 'title':
                    filteredSliders.sort((a, b) => a.title.localeCompare(b.title));
                    break;
            }

            currentPage = 1;
            updateStats(filteredSliders);
            renderSliders();
        }

        function refreshSliders() {
            loadSliders();
        }

        function openCreateModal() {
            document.getElementById('modalTitle').textContent = 'Thêm slider mới';
            document.getElementById('sliderForm').reset();
            document.getElementById('sliderId').value = '';
            document.getElementById('imagePreview').innerHTML = `
                <i class="fas fa-cloud-upload-alt text-4xl text-gray-400"></i>
                <div>
                    <p class="text-lg font-medium text-gray-700">Tải lên hình ảnh</p>
                    <p class="text-sm text-gray-500">PNG, JPG, JPEG tối đa 5MB</p>
                </div>
                <button type="button" onclick="document.getElementById('sliderImage').click()" class="btn btn-primary">
                    <i class="fas fa-upload"></i>
                    Chọn hình ảnh
                </button>
            `;
            document.getElementById('sliderModal').classList.remove('hidden');
        }

        function editSlider(id) {
            SliderService.getById(id).then(slider => {
                document.getElementById('modalTitle').textContent = 'Chỉnh sửa slider';
                document.getElementById('sliderId').value = slider.id;
                document.getElementById('sliderTitle').value = slider.title;
                document.getElementById('sliderDescription').value = slider.description || '';
                document.getElementById('sliderIsActive').checked = slider.isActive !== false;
                
                // Show current image
                if (slider.imageUrl) {
                    document.getElementById('imagePreview').innerHTML = `
                        <img src="${SLIDER_API_BASE_URL.replace('/api/Slider', '') + slider.imageUrl}" 
                             alt="Current image" class="w-full h-32 object-cover rounded" />
                        <button type="button" onclick="document.getElementById('sliderImage').click()" class="btn btn-primary">
                            <i class="fas fa-upload"></i>
                            Thay đổi hình ảnh
                        </button>
                    `;
                }
                
                document.getElementById('sliderModal').classList.remove('hidden');
            }).catch(err => {
                showError(err.message);
            });
        }

        function closeModal() {
            document.getElementById('sliderModal').classList.add('hidden');
        }

        function deleteSlider(id) {
            currentDeleteId = id;
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
            currentDeleteId = null;
        }

        async function confirmDelete() {
            if (!currentDeleteId) return;

            try {
                await SliderService.delete(currentDeleteId);
                showSuccess('Xóa slider thành công!');
                closeDeleteModal();
                loadSliders();
            } catch (err) {
                showError(err.message);
            }
        }

        function showLoading(show) {
            const grid = document.getElementById('sliderGrid');
            if (show) {
                grid.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <div class="loading-spinner"></div>
                        <p class="mt-4 text-gray-600">Đang tải dữ liệu...</p>
                    </div>
                `;
            }
        }

        function hideLoading() {
            // Loading is handled by renderSliders
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi',
                text: message,
                confirmButtonText: 'Đóng'
            });
        }

        function showSuccess(message) {
            Swal.fire({
                icon: 'success',
                title: 'Thành công',
                text: message,
                confirmButtonText: 'Đóng'
            });
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN');
        }

        // Event Listeners
        document.getElementById('sliderForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData();
            formData.append('title', document.getElementById('sliderTitle').value);
            formData.append('description', document.getElementById('sliderDescription').value);
            formData.append('isActive', document.getElementById('sliderIsActive').checked);
            
            const imageFile = document.getElementById('sliderImage').files[0];
            if (imageFile) {
                formData.append('imageFile', imageFile);
            }

            const sliderId = document.getElementById('sliderId').value;

            try {
                if (sliderId) {
                    await SliderService.update(sliderId, formData);
                    showSuccess('Cập nhật slider thành công!');
                } else {
                    await SliderService.create(formData);
                    showSuccess('Tạo slider thành công!');
                }
                closeModal();
                loadSliders();
            } catch (err) {
                showError(err.message);
            }
        });

        // Character count for title
        document.getElementById('sliderTitle').addEventListener('input', function() {
            const chars = this.value.length;
            document.getElementById('titleCharCount').textContent = chars;
            if (chars > 100) {
                this.value = this.value.slice(0, 100);
                document.getElementById('titleCharCount').textContent = 100;
            }
        });

        // Character count for description
        document.getElementById('sliderDescription').addEventListener('input', function() {
            const chars = this.value.length;
            document.getElementById('descriptionCharCount').textContent = chars;
            if (chars > 500) {
                this.value = this.value.slice(0, 500);
                document.getElementById('descriptionCharCount').textContent = 500;
            }
        });

        // Image preview
        document.getElementById('sliderImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('imagePreview').innerHTML = `
                        <img src="${e.target.result}" alt="Preview" class="w-full h-32 object-cover rounded" />
                        <button type="button" onclick="document.getElementById('sliderImage').click()" class="btn btn-primary">
                            <i class="fas fa-upload"></i>
                            Thay đổi hình ảnh
                        </button>
                    `;
                };
                reader.readAsDataURL(file);
            }
        });

        // Add event listeners for real-time search
        document.getElementById('searchInput').addEventListener('input', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);
        document.getElementById('sortFilter').addEventListener('change', applyFilters);

        // Load sliders when page loads
        loadSliders();
    </script>
}

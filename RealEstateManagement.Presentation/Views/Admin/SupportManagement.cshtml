@{
    ViewData["Title"] = "Quản lý hỗ trợ khách hàng";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}



<div class="bg-white rounded-lg shadow-md p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-800">Quản lý hỗ trợ khách hàng</h1>
        <div class="flex space-x-2">
            <select id="statusFilter" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">Tất cả trạng thái</option>
                <option value="Open">Mở</option>
                <option value="InProgress">Đang xử lý</option>
                <option value="Resolved">Đã giải quyết</option>
                <option value="Closed">Đã đóng</option>
            </select>
        </div>
    </div>

    <!-- Support Conversations List -->
    <div id="supportConversationsList" class="space-y-4">
        <!-- Conversations will be loaded here -->
    </div>
</div>

<!-- Support Chat Modal -->
<div id="supportChatModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h3 class="text-lg font-medium text-gray-900" id="chatModalTitle">Hỗ trợ</h3>
                    <div class="flex space-x-2 mt-1">
                        <span id="chatStatus" class="px-2 py-1 text-xs rounded-full"></span>
                        <span id="chatPriority" class="px-2 py-1 text-xs rounded-full"></span>
                    </div>
                </div>
                <button onclick="closeSupportChatModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div id="chatMessages" class="h-96 overflow-y-auto border rounded-md p-4 mb-4 bg-gray-50">
                <!-- Messages will be loaded here -->
            </div>
            
            <div class="flex space-x-2 mb-4">
                <input type="text" id="chatMessageInput" 
                       class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Nhập tin nhắn...">
                <button onclick="sendSupportMessage()" 
                        class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Gửi
                </button>
            </div>
            
            <!-- Status Update Controls - Hidden for simple chat -->
            <div class="flex space-x-2 hidden">
                <select id="statusUpdate" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="Open">Mở</option>
                    <option value="InProgress">Đang xử lý</option>
                    <option value="Resolved">Đã giải quyết</option>
                    <option value="Closed">Đã đóng</option>
                </select>
                <button onclick="updateSupportStatus()" 
                        class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500">
                    Cập nhật trạng thái
                </button>
            </div>
        </div>
    </div>
</div>


<script>
    let currentSupportConversationId = null;
    let supportConnection = null;

    // Initialize admin support page
    document.addEventListener('DOMContentLoaded', function() {
        loadAllSupportConversations();
        initializeSupportSignalR();
        setupFilters();
    });

    function setupFilters() {
        document.getElementById('statusFilter').addEventListener('change', loadAllSupportConversations);
    }

    async function loadAllSupportConversations() {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) {
                showErrorMessage('Vui lòng đăng nhập lại');
                return;
            }

            const response = await fetch(config.buildApiUrl(config.chat.adminAllSupportConversations), {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const conversations = await response.json();
                displayAllSupportConversations(conversations);
            } else if (response.status === 401) {
                showErrorMessage('Phiên đăng nhập đã hết hạn, vui lòng đăng nhập lại');
            } else if (response.status === 403) {
                showErrorMessage('Bạn không có quyền truy cập trang này');
            } else {
                const errorText = await response.text();
                showErrorMessage('Không thể tải danh sách yêu cầu hỗ trợ: ' + errorText);
            }
        } catch (error) {
            console.error('Error loading conversations:', error);
            showErrorMessage('Lỗi kết nối: ' + error.message);
        }
    }

    function displayAllSupportConversations(conversations) {
        const container = document.getElementById('supportConversationsList');
        
        if (conversations.length === 0) {
            container.innerHTML = '<p class="text-gray-500 text-center py-8">Không có yêu cầu hỗ trợ nào.</p>';
            return;
        }

        let html = '';
        conversations.forEach(conversation => {
            const status = conversation.status || 'Open';
            const subject = conversation.subject || 'Yêu cầu hỗ trợ';
            
            const statusColor = getStatusColor(status);
            
            html += `
                <div class="border rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer" 
                     onclick="openSupportChat(${conversation.id}, '${subject}', '${status}')">
                    <div class="flex justify-between items-start mb-2">
                        <h3 class="font-semibold text-gray-800">${subject}</h3>
                        <div class="flex space-x-2">
                            <span class="px-2 py-1 text-xs rounded-full ${statusColor}">${status}</span>
                        </div>
                    </div>
                    <div class="text-sm text-gray-600 mb-2">
                        <span class="font-medium">Người dùng:</span> ${conversation.userName} | 
                        <span class="font-medium">Tạo lúc:</span> ${new Date(conversation.createdAt).toLocaleDateString('vi-VN')}
                    </div>
                    <div class="text-sm text-gray-500 mb-2">
                        ${conversation.lastMessage ? conversation.lastMessage.substring(0, 100) + '...' : 'Chưa có tin nhắn'}
                    </div>
                    <div class="flex justify-between items-center">
                        <div class="text-sm text-gray-500">
                            ${conversation.adminName ? `Admin: ${conversation.adminName}` : 'Chưa có admin phụ trách'}
                        </div>
                        ${conversation.unreadCount > 0 ? `<span class="bg-red-500 text-white text-xs px-2 py-1 rounded-full">${conversation.unreadCount} tin nhắn mới</span>` : ''}
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function getStatusColor(status) {
        switch (status) {
            case 'Open': return 'bg-blue-100 text-blue-800';
            case 'InProgress': return 'bg-yellow-100 text-yellow-800';
            case 'Resolved': return 'bg-green-100 text-green-800';
            case 'Closed': return 'bg-gray-100 text-gray-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    }



    async function openSupportChat(conversationId, subject, status) {
        try {
            currentSupportConversationId = conversationId;
            document.getElementById('chatModalTitle').textContent = subject;
            
            // Show status for admin view
            document.getElementById('chatStatus').style.display = 'inline-block';
            document.getElementById('chatPriority').style.display = 'none'; // Hide priority
            document.getElementById('chatStatus').textContent = status;
            document.getElementById('chatStatus').className = `px-2 py-1 text-xs rounded-full ${getStatusColor(status)}`;
            document.getElementById('statusUpdate').value = status;
            
            // Show loading state
            document.getElementById('chatMessages').innerHTML = '<p class="text-gray-500 text-center py-4">Đang tải tin nhắn...</p>';
            
            document.getElementById('supportChatModal').classList.remove('hidden');
            
            await loadSupportMessages(conversationId);
            joinSupportConversation(conversationId);
            
            // Focus on input
            setTimeout(() => {
                document.getElementById('chatMessageInput').focus();
            }, 100);
            
        } catch (error) {
            console.error('Error opening support chat:', error);
            showErrorMessage('Lỗi khi mở chat: ' + error.message);
        }
    }

    function closeSupportChatModal() {
        document.getElementById('supportChatModal').classList.add('hidden');
        
        // Clear input
        document.getElementById('chatMessageInput').value = '';
        
        // Clear messages
        document.getElementById('chatMessages').innerHTML = '';
        
        // Show status and priority again
        document.getElementById('chatStatus').style.display = 'inline-block';
        document.getElementById('chatPriority').style.display = 'inline-block';
        
        if (currentSupportConversationId) {
            leaveSupportConversation(currentSupportConversationId);
            currentSupportConversationId = null;
        }
    }

    async function loadSupportMessages(conversationId) {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) {
                showErrorMessage('Vui lòng đăng nhập lại');
                return;
            }

            const response = await fetch(config.buildApiUrl(`${config.chat.supportMessages}/${conversationId}/messages`), {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const messages = await response.json();
                displaySupportMessages(messages);
            } else if (response.status === 401) {
                showErrorMessage('Phiên đăng nhập đã hết hạn, vui lòng đăng nhập lại');
            } else if (response.status === 403) {
                showErrorMessage('Bạn không có quyền xem tin nhắn này');
            } else if (response.status === 404) {
                showErrorMessage('Không tìm thấy cuộc trò chuyện');
            } else {
                const errorText = await response.text();
                showErrorMessage('Không thể tải tin nhắn: ' + errorText);
            }
        } catch (error) {
            console.error('Error loading messages:', error);
            showErrorMessage('Lỗi kết nối: ' + error.message);
        }
    }

    function displaySupportMessages(messages) {
        const container = document.getElementById('chatMessages');
        let html = '';
        
        if (messages.length === 0) {
            html = '<p class="text-gray-500 text-center py-4">Chưa có tin nhắn nào.</p>';
        } else {
            messages.forEach(message => {
                const isFromAdmin = message.isFromAdmin;
                const messageClass = isFromAdmin ? 'bg-blue-100 ml-8' : 'bg-white mr-8';
                const time = new Date(message.sentAt).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
                const senderName = message.senderName || 'Người dùng';
                
                html += `
                    <div class="mb-3 ${isFromAdmin ? 'text-right' : 'text-left'}">
                        <div class="inline-block ${messageClass} rounded-lg px-3 py-2 max-w-xs lg:max-w-md">
                            <div class="text-sm">${message.content}</div>
                            <div class="text-xs text-gray-500 mt-1">${time}</div>
                        </div>
                        <div class="text-xs text-gray-400 mt-1">${senderName} ${isFromAdmin ? '(Admin)' : ''}</div>
                    </div>
                `;
            });
        }
        
        container.innerHTML = html;
        container.scrollTop = container.scrollHeight;
    }

    async function sendSupportMessage() {
        if (!currentSupportConversationId) return;
        
        const input = document.getElementById('chatMessageInput');
        const content = input.value.trim();
        
        if (!content) {
            showErrorMessage('Vui lòng nhập nội dung tin nhắn');
            return;
        }

        const token = localStorage.getItem('authToken');
        if (!token) {
            showErrorMessage('Vui lòng đăng nhập lại');
            return;
        }

        try {
            const response = await fetch(config.buildApiUrl(`${config.chat.adminReply}/${currentSupportConversationId}/reply`), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(content)
            });

            if (response.ok) {
                input.value = '';
                await loadSupportMessages(currentSupportConversationId);
                loadAllSupportConversations(); // Refresh conversation list
                // Bỏ thông báo thành công
            } else if (response.status === 401) {
                showErrorMessage('Phiên đăng nhập đã hết hạn, vui lòng đăng nhập lại');
            } else if (response.status === 403) {
                showErrorMessage('Bạn không có quyền gửi tin nhắn');
            } else {
                const error = await response.text();
                showErrorMessage('Lỗi: ' + error);
            }
        } catch (error) {
            console.error('Error sending message:', error);
            showErrorMessage('Lỗi kết nối: ' + error.message);
        }
    }

    async function updateSupportStatus() {
        if (!currentSupportConversationId) return;
        
        const newStatus = document.getElementById('statusUpdate').value;
        
        const token = localStorage.getItem('authToken');
        if (!token) {
            showErrorMessage('Vui lòng đăng nhập lại');
            return;
        }

        try {
            const response = await fetch(config.buildApiUrl(`${config.chat.adminUpdateStatus}/${currentSupportConversationId}/status`), {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    status: newStatus,
                    adminId: null // Will be set by the current admin
                })
            });

            if (response.ok) {
                // Bỏ thông báo thành công
                document.getElementById('chatStatus').textContent = newStatus;
                document.getElementById('chatStatus').className = `px-2 py-1 text-xs rounded-full ${getStatusColor(newStatus)}`;
                loadAllSupportConversations(); // Refresh conversation list
            } else if (response.status === 401) {
                showErrorMessage('Phiên đăng nhập đã hết hạn, vui lòng đăng nhập lại');
            } else if (response.status === 403) {
                showErrorMessage('Bạn không có quyền cập nhật trạng thái');
            } else {
                const error = await response.text();
                showErrorMessage('Lỗi: ' + error);
            }
        } catch (error) {
            console.error('Error updating status:', error);
            showErrorMessage('Lỗi kết nối: ' + error.message);
        }
    }

    // Enter key to send message
    document.getElementById('chatMessageInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendSupportMessage();
        }
    });

    function initializeSupportSignalR() {
        const token = localStorage.getItem('authToken');
        if (!token) return;

        try {
            supportConnection = new signalR.HubConnectionBuilder()
                .withUrl('https://localhost:7031/chatHub', { accessTokenFactory: () => token })
                .withAutomaticReconnect()
                .build();

            supportConnection.start()
                .then(() => {
                    console.log('Admin Support SignalR connected');
                    setupSupportSignalRHandlers();
                })
                .catch(err => {
                    console.error('Admin Support SignalR error:', err);
                    showErrorMessage('Không thể kết nối SignalR: ' + err.message);
                });

            // Handle connection errors
            supportConnection.onclose((error) => {
                console.log('SignalR connection closed:', error);
                if (error) {
                    showErrorMessage('Kết nối SignalR bị đóng: ' + error.message);
                }
            });

        } catch (error) {
            console.error('Error creating SignalR connection:', error);
            showErrorMessage('Lỗi tạo kết nối SignalR: ' + error.message);
        }
    }

    function setupSupportSignalRHandlers() {
        if (!supportConnection) return;

        supportConnection.on('NewSupportRequest', (data) => {
            showSuccessMessage(`Yêu cầu hỗ trợ mới: ${data.subject}`);
            loadAllSupportConversations();
        });

        supportConnection.on('SupportMessageReceived', (data) => {
            if (data.conversationId === currentSupportConversationId) {
                loadSupportMessages(currentSupportConversationId);
            }
            loadAllSupportConversations();
        });

        supportConnection.on('SupportStatusUpdated', (data) => {
            if (data.conversationId === currentSupportConversationId) {
                loadSupportMessages(currentSupportConversationId);
            }
            loadAllSupportConversations();
        });
    }

    function joinSupportConversation(conversationId) {
        if (supportConnection && supportConnection.state === 'Connected') {
            supportConnection.invoke('JoinConversation', conversationId.toString());
        }
    }

    function leaveSupportConversation(conversationId) {
        if (supportConnection && supportConnection.state === 'Connected') {
            supportConnection.invoke('LeaveConversation', conversationId.toString());
        }
    }

    function showSuccessMessage(message) {
        if (window.Swal) {
            Swal.fire({
                icon: 'success',
                title: 'Thành công!',
                text: message,
                timer: 2000,
                showConfirmButton: false
            });
        } else {
            alert(message);
        }
    }

    function showErrorMessage(message) {
        if (window.Swal) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: message,
                confirmButtonText: 'Đóng'
            });
        } else {
            alert(message);
        }
    }
</script> 
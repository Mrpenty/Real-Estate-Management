@{
    Layout = "~/Views/Shared/_RenterLayout.cshtml";
    ViewData["Title"] = "Tạo hợp đồng";
}



<div class="container mx-auto py-8">
    <div class="max-w-4xl mx-auto">
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold mb-4 text-gray-800">Bước 2: Thông tin hợp đồng thuê</h1>
            <p class="text-gray-600 text-lg">Hoàn tất thông tin hợp đồng để bài đăng được phê duyệt</p>
        </div>
        
        <div class="bg-orange-50 border border-orange-200 rounded-xl p-6 mb-8">
            <div class="flex items-start gap-3">
                <div class="flex-shrink-0">
                    <i class="fas fa-info-circle text-orange-600 text-xl"></i>
                </div>
                <div>
                    <h3 class="font-semibold text-orange-800 mb-2">Lưu ý quan trọng</h3>
                    <p class="text-orange-700 text-sm leading-relaxed">
                        Sau khi tạo hợp đồng, bài đăng sẽ chuyển từ trạng thái <strong>Draft</strong> sang <strong>Pending</strong> để chờ phê duyệt từ admin. 
                        Bạn có thể theo dõi trạng thái bài đăng trong mục "Danh sách tin đăng".
                    </p>
                </div>
            </div>
        </div>
        
        <form id="create-contract-form" class="form-section">
            <input type="hidden" id="propertyPostId" name="propertyPostId" value="@ViewBag.PropertyPostId">
            <script>
                // Debug: Check if PropertyPostId is set correctly
                console.log('ViewBag.PropertyPostId:', '@ViewBag.PropertyPostId');
                console.log('Hidden input value:', document.getElementById('propertyPostId').value);
                
                // Validate PropertyPostId
                const propertyPostId = document.getElementById('propertyPostId').value;
                if (!propertyPostId || propertyPostId === 'undefined' || propertyPostId === 'null' || propertyPostId === '') {
                    console.error('Invalid PropertyPostId:', propertyPostId);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi dữ liệu',
                        text: 'Không tìm thấy ID bài đăng hợp lệ. Vui lòng quay lại trang tạo bài đăng.',
                        confirmButtonColor: '#ff6b35'
                    }).then(() => {
                        window.location.href = '/PostProperty/CreateProperty';
                    });
                }
            </script>
            
            <div class="space-y-6">
                <!-- Financial Information -->
                <div class="form-row">
                    <div>
                        <label for="depositAmount" class="block mb-2 font-medium">
                            Tiền cọc <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="number" id="depositAmount" name="depositAmount" class="form-input" required min="0" step="1000" placeholder="Vd: 2000000">
                    </div>
                    <div>
                        <label for="monthlyRent" class="block mb-2 font-medium">
                            Số tiền trả mỗi tháng <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="number" id="monthlyRent" name="monthlyRent" class="form-input" required min="0" step="1000" placeholder="Vd: 5000000">
                    </div>
                </div>

                <!-- Contract Duration -->
                <div class="form-row">
                    <div>
                        <label for="contractDurationMonths" class="block mb-2 font-medium">
                            Thời hạn hợp đồng (tháng) <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="number" id="contractDurationMonths" name="contractDurationMonths" class="form-input" required min="1" max="120" placeholder="Vd: 12">
                    </div>
                    <div>
                        <label for="startDate" class="block mb-2 font-medium">
                            Ngày bắt đầu <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="date" id="startDate" name="startDate" class="form-input" required>
                    </div>
                </div>

                <!-- Payment Settings -->
                <div class="form-row">
                    <div>
                        <label for="paymentCycle" class="block mb-2 font-medium">
                            Thanh toán kỳ hạn <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <select id="paymentCycle" name="paymentCycle" class="form-select" required>
                            <option value="0">Monthly (Hàng tháng)</option>
                            <option value="1">Quarterly (Hàng quý)</option>
                            <option value="2">Yearly (Hàng năm)</option>
                        </select>
                    </div>
                    <div>
                        <label for="paymentDayOfMonth" class="block mb-2 font-medium">
                            Trả trước ngày nào của tháng <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="number" id="paymentDayOfMonth" name="paymentDayOfMonth" class="form-input" required min="1" max="31" value="5">
                    </div>
                </div>

                <!-- Contact Information -->
                <div class="form-row">
                    <div>
                        <label for="paymentMethod" class="block mb-2 font-medium">
                            Phương thức thanh toán <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="text" id="paymentMethod" name="paymentMethod" class="form-input" required placeholder="Vd: Chuyển khoản, tiền mặt, Momo...">
                    </div>
                    <div>
                        <label for="contactInfo" class="block mb-2 font-medium">
                            Thông tin liên hệ <span class="text-red-600 font-bold">(∗)</span>
                        </label>
                        <input type="text" id="contactInfo" name="contactInfo" class="form-input" required placeholder="Tên, số điện thoại, email...">
                    </div>
                </div>
            </div>

            <!-- Contract Summary -->
            <div class="contract-summary">
                <h3><i class="fas fa-file-contract mr-2"></i>Tóm tắt hợp đồng</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <span class="summary-label">Ngày kết thúc dự kiến:</span>
                        <span id="endDateDisplay" class="summary-value">-</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Tổng số tiền thuê:</span>
                        <span id="totalRentDisplay" class="summary-value">-</span>
                    </div>
                </div>
            </div>

            <div class="text-center mt-8">
                <button type="submit" class="submit-btn">
                    <i class="fas fa-check mr-2"></i>Tạo hợp đồng và hoàn tất
                </button>
            </div>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// Check authentication
let isAuthen = authService.isAuthenticated();
if(!isAuthen){
    Swal.fire({
        icon: 'warning',
        title: 'Cần đăng nhập',
        text: 'Vui lòng đăng nhập để tiếp tục',
        confirmButtonColor: '#ff6b35'
    }).then(() => {
        window.location.href = '/Auth/Login';
    });
}

// Set default start date to today
document.getElementById('startDate').value = new Date().toISOString().split('T')[0];

// Function to update contract summary
function updateContractSummary() {
    const startDate = document.getElementById('startDate').value;
    const duration = parseInt(document.getElementById('contractDurationMonths').value) || 0;
    const monthlyRent = parseFloat(document.getElementById('monthlyRent').value) || 0;
    
    if (startDate && duration > 0) {
        const endDate = new Date(startDate);
        endDate.setMonth(endDate.getMonth() + duration);
        document.getElementById('endDateDisplay').textContent = endDate.toLocaleDateString('vi-VN');
    } else {
        document.getElementById('endDateDisplay').textContent = '-';
    }
    
    if (monthlyRent > 0 && duration > 0) {
        const totalRent = monthlyRent * duration;
        document.getElementById('totalRentDisplay').textContent = totalRent.toLocaleString('vi-VN') + ' VNĐ';
    } else {
        document.getElementById('totalRentDisplay').textContent = '-';
    }
}

// Add event listeners for summary updates
document.getElementById('startDate').addEventListener('change', updateContractSummary);
document.getElementById('contractDurationMonths').addEventListener('input', updateContractSummary);
document.getElementById('monthlyRent').addEventListener('input', updateContractSummary);

// Initial summary update
updateContractSummary();

document.getElementById('create-contract-form').addEventListener('submit', async function(e) {
    e.preventDefault();

    const formData = new FormData(this);
    const API_BASE_URL = 'https://localhost:7031/api';
    const token = localStorage.getItem('authToken');
    
    // Debug: Log all form data
    console.log('Form data:', {
        propertyPostId: document.getElementById('propertyPostId').value,
        depositAmount: formData.get('depositAmount'),
        monthlyRent: formData.get('monthlyRent'),
        contractDurationMonths: formData.get('contractDurationMonths'),
        startDate: formData.get('startDate'),
        paymentMethod: formData.get('paymentMethod'),
        contactInfo: formData.get('contactInfo')
    });
    
    // Validate required fields
    const requiredFields = [
        { name: 'depositAmount', label: 'Tiền cọc' },
        { name: 'monthlyRent', label: 'Số tiền trả mỗi tháng' },
        { name: 'contractDurationMonths', label: 'Thời hạn hợp đồng' },
        { name: 'startDate', label: 'Ngày bắt đầu' },
        { name: 'paymentMethod', label: 'Phương thức thanh toán' },
        { name: 'contactInfo', label: 'Thông tin liên hệ' }
    ];
    
    for (const field of requiredFields) {
        const value = formData.get(field.name);
        if (!value || value.toString().trim() === '') {
            Swal.fire({
                icon: 'warning',
                title: 'Thông tin chưa đầy đủ',
                text: `Vui lòng điền đầy đủ: ${field.label}`,
                confirmButtonColor: '#ff6b35'
            });
            return;
        }
    }
    
    // Get current user ID from token or session
    let ownerId = null;
    
    // Try to get user info from token
    if (token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            ownerId = payload.nameid || payload.sub || payload.id || payload.userId;
            console.log('Parsed token payload:', payload);
            console.log('Extracted ownerId:', ownerId);
        } catch (e) {
            console.error('Error parsing token:', e);
            Swal.fire({
                icon: 'error',
                title: 'Lỗi xác thực',
                text: 'Không thể xác định người dùng. Vui lòng đăng nhập lại.',
                confirmButtonColor: '#ff6b35'
            });
            return;
        }
    }
    
    if (!ownerId) {
        Swal.fire({
            icon: 'error',
            title: 'Lỗi xác thực',
            text: 'Không thể xác định người dùng. Vui lòng đăng nhập lại.',
            confirmButtonColor: '#ff6b35'
        });
        return;
    }
    
    // Get propertyPostId from hidden input and validate
    const propertyPostId = document.getElementById('propertyPostId').value;
    console.log('PropertyPostId from form:', propertyPostId);
    
    if (!propertyPostId || propertyPostId === 'undefined' || propertyPostId === 'null' || propertyPostId === '') {
        Swal.fire({
            icon: 'error',
            title: 'Lỗi dữ liệu',
            text: 'Không tìm thấy ID bài đăng. Vui lòng quay lại trang tạo bài đăng.',
            confirmButtonColor: '#ff6b35'
        });
        return;
    }
    
    const data = {
        depositAmount: parseFloat(formData.get('depositAmount')),
        monthlyRent: parseFloat(formData.get('monthlyRent')),
        contractDurationMonths: parseInt(formData.get('contractDurationMonths')),
        paymentCycle: parseInt(formData.get('paymentCycle')),
        paymentDayOfMonth: parseInt(formData.get('paymentDayOfMonth')),
        startDate: formData.get('startDate'),
        paymentMethod: formData.get('paymentMethod'),
        contactInfo: formData.get('contactInfo')
    };

    try {
        // Show loading state
        const submitBtn = document.querySelector('button[type="submit"]');
        submitBtn.classList.add('loading');
        submitBtn.disabled = true;
        
        // Show loading with SweetAlert
        Swal.fire({
            title: 'Đang tạo hợp đồng...',
            text: 'Vui lòng chờ trong giây lát',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        // Log API call details for debugging
        console.log('Making API call with:', {
            url: `${API_BASE_URL}/owner/rental-contracts/${ownerId}/${propertyPostId}`,
            ownerId: ownerId,
            propertyPostId: propertyPostId,
            data: data
        });
        
        const response = await fetch(`${API_BASE_URL}/owner/rental-contracts/${ownerId}/${propertyPostId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                ...(token ? { 'Authorization': `Bearer ${token}` } : {})
            },
            body: JSON.stringify(data)
        });

        console.log('API Response status:', response.status);
        console.log('API Response headers:', response.headers);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('API Error response:', errorText);
            
            let errorMessage = 'Đã có lỗi xảy ra khi tạo hợp đồng';
            try {
                const errorJson = JSON.parse(errorText);
                errorMessage = errorJson.message || errorMessage;
            } catch (e) {
                errorMessage = errorText || errorMessage;
            }
            
            throw new Error(errorMessage);
        }

        // Close loading and show success
        Swal.close();
        
        Swal.fire({
            icon: 'success',
            title: 'Thành công!',
            text: 'Hợp đồng đã được tạo thành công. Bạn sẽ được chuyển đến trang chọn gói quảng cáo.',
            confirmButtonColor: '#ff6b35'
        }).then(() => {
            // Redirect to package selection after successful contract creation
            window.location.href = `/PostProperty/SelectPackage?propertyId=${propertyPostId}`;
        });
    } catch (err) {
        console.error(err);
        Swal.close();
        
        Swal.fire({
            icon: 'error',
            title: 'Lỗi!',
            text: `Đã có lỗi xảy ra: ${err.message}`,
            confirmButtonColor: '#ff6b35'
        });
    } finally {
        // Restore button state
        const submitBtn = document.querySelector('button[type="submit"]');
        submitBtn.classList.remove('loading');
        submitBtn.disabled = false;
    }
});
</script>

 

@{
    Layout = "../Shared/_LayoutV2.cshtml";
    ViewData["Title"] = "Cập nhật tin";
}

<div id="detailTitleId" class="bg-white px-6 pt-6 border-b flex flex-col items-center" style="position: fixed; top: 86px; left: 0; right: 0; width: 100%; z-index: 1;">
    <h1 class="text-2xl font-semibold mb-4 text-center">Đăng tin cho thuê</h1>

    <div class="flex space-x-6 text-sm font-medium justify-center w-full max-w-4xl">
        <button data-scroll="AreaId" class="tab-btn text-orange-600 border-b-2 border-orange-600 pb-2">
            Khu vực
        </button>
        <button data-scroll="DescriptionInformationId" class="tab-btn text-gray-600 hover:text-orange-600 pb-2">
            Thông tin mô tả
        </button>
        <button data-scroll="ImageId" class="tab-btn text-gray-600 hover:text-orange-600 pb-2">
            Hình ảnh
        </button>
        <button data-scroll="ContactId" class="tab-btn text-gray-600 hover:text-orange-600 pb-2">
            Thông tin liên hệ
        </button>
    </div>
</div>
<form id="property-form" style="margin-top: 100px;">
    <div class="bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8" style="margin-top:9rem">
        <h2 class="text-lg font-semibold mb-4">Loại chuyên mục</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label class="block mb-1 font-medium">
                    Danh mục <span class="text-red-600 font-bold">(∗)</span>
                </label>
                <select required id="type" name="type" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">-- Chọn danh mục --</option>
                </select>
            </div>
        </div>
    </div>

    <div id="AreaId" class="section bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <h2 class="text-lg font-semibold mb-4">Khu vực</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label class="block mb-1 font-medium">
                    Tỉnh/Thành phố <span class="text-red-600 font-bold">(∗)</span>
                </label>
                <select id="province-select" name="province-select" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option>-- Chọn Tỉnh/TP --</option>
                </select>
            </div>

            <div>
                <label class="block mb-1 font-medium">
                    Phường/Xã <span class="text-red-600 font-bold">(∗)</span>
                </label>
                <select id="ward-select" name="WardId" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option>-- Chọn phường/xã --</option>
                </select>
            </div>

            <div>
                <label class="block mb-1 font-medium">Đường phố <span class="text-red-600 font-bold">(∗)</span></label>
                <select id="street-select" name="StreetId" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option>-- Chọn đường phố --</option>
                </select>
            </div>

            <div>
                <label class="block mb-1 font-medium">Địa chỉ chi tiết</label>
                <input type="text" id="addressInfoId" name="AddressInfo" placeholder="Địa chỉ chi tiết" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>

            <div>
                <button onclick="updateMap()" type="button" class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 flex items-center gap-1">
                    <span>Tìm kiếm trên bản đồ</span>
                </button>
            </div>
        </div>
    </div>

    <div class="bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <h2 class="text-lg font-semibold mb-4">Bản đồ</h2>

        <div class="grid grid-cols-1 md:grid-cols-1 gap-4">
            <div>
                <iframe id="mapFrame"
                        width="100%"
                        height="300"
                        class="rounded border border-gray-300"
                        style="border:0"
                        loading="lazy"
                        allowfullscreen
                        referrerpolicy="no-referrer-when-downgrade"
                        src="https://www.google.com/maps?q=HoChiMinh,+Vietnam&output=embed">
                </iframe>
            </div>
        </div>
    </div>

    <div id="featuresId" class="bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <h2 class="text-lg font-semibold mb-4">Đặc điểm nổi bật</h2>

        <div id="amenities-container" class="flex mb-3">
        </div>
    </div>

    <div id="DescriptionInformationId" class="section bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <h2 class="text-lg font-semibold mb-4">Thông tin mô tả</h2>

        <div class="grid grid-cols-1 md:grid-cols-1 gap-4">
            <div>
                <label class="block mb-1 font-medium">
                    Tiêu đề <span class="text-red-600 font-bold">(∗)</span>
                </label>
                <textarea required name="title" id="title" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
            </div>

            <div class="row">
                <div class="col-4">
                    <label class="block mb-1 font-medium">
                        Giá cho thuê <span class="text-red-600 font-bold">(∗)</span>
                    </label>
                    <div class="w-full" style="width:100%">
                        <div class="mt-1 flex rounded-md">
                            <input id="price" required name="price" type="number"
                                   class="flex-1 block w-full rounded-none rounded-l-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 sm:text-sm" />
                            <select disabled class="rounded-none rounded-r-md border border-l-0 border-gray-300 bg-white px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option>đồng/tháng</option>
                                @* <option>đồng/m<sup>2</sup>/tháng</option> *@
                            </select>
                        </div>
                    </div>
                </div>

                <div class="col-4">
                    <label class="block mb-1 font-medium">
                        Diện tích <span class="text-red-600 font-bold">(∗)</span>
                    </label>
                    <div class="w-full" style="width:100%">
                        <div class="mt-1 flex rounded-md">
                            <input type="text" id="area" name="area" required
                                   class="flex-1 block w-full rounded-none rounded-l-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 sm:text-sm" />
                            <span class="inline-flex items-center rounded-r-md border border-l-0 border-gray-300 bg-gray-100 px-3 text-sm text-gray-700">
                                m<sup>2</sup>
                            </span>
                        </div>
                    </div>
                </div>

                <div class="col-4">
                    <label class="block mb-1 font-medium">
                        Số phòng ngủ <span class="text-red-600 font-bold">(∗)</span>
                    </label>
                    <div class="w-full" style="width:100%">
                        <div class="mt-1 flex rounded-md">
                            <input type="number" id="bedrooms" name="bedrooms" required
                                   class="flex-1 block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 sm:text-sm" />
                        </div>
                    </div>
                </div>

                <div class="col-4">
                    <label class="block mb-1 font-medium">
                        Số phòng tắm <span class="text-red-600 font-bold">(∗)</span>
                    </label>
                    <div class="w-full" style="width:100%">
                        <div class="mt-1 flex rounded-md">
                            <input type="number" id="bathrooms" name="bathrooms" required
                                   class="flex-1 block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 sm:text-sm" />
                        </div>
                    </div>
                </div>

                <div class="col-4">
                    <label class="block mb-1 font-medium">
                        Số tầng <span class="text-red-600 font-bold">(∗)</span>
                    </label>
                    <div class="w-full" style="width:100%">
                        <div class="mt-1 flex rounded-md">
                            <input type="number" id="floors" name="floors" required
                                   class="flex-1 block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 sm:text-sm" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="section bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <label class="block mb-1 font-medium">
            Nội dung mô tả <span class="text-red-600 font-bold">(∗)</span>
        </label>
        <button type="button" id="ai-suggest-button" class="mb-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center gap-1">
            <span>Gợi ý mô tả bởi AI</span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L18.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM10.5 7.5L12 12m-2.25-4.5L12 12m0 0 4.5 4.5M12 12l-1.5 4.5M12 12l3.75-3.75M12 12l-3.75 3.75M13.5 12h-3" />
            </svg>
        </button>
        <textarea required id="description" name="description" rows="10" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
    </div>

    <div id="ImageId" class="section bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <h2 class="text-lg font-semibold mb-4">Hình ảnh</h2>

        <div class="grid grid-cols-1 md:grid-cols-1 gap-4">
            <label for="imageUpload"
                   class="flex flex-col items-center justify-center w-full h-56 border-2 border-dashed border-blue-400 rounded-lg bg-blue-50 cursor-pointer hover:bg-blue-100 transition">
                <div class="flex flex-col items-center">
                    <img src="~/image/upload-image.png" style="width:60px" />
                    <p class="text-sm text-gray-700">Tải ảnh từ thiết bị</p>
                </div>
                <input id="imageUpload" type="file" class="hidden" multiple accept="image/*">
            </label>
            <ul class="mt-4 text-sm text-gray-600 space-y-1 list-disc list-inside">
                <li>Tải lên tối đa 8 ảnh trong một bài đăng</li>
                <li>Dung lượng ảnh tối đa 5MB</li>
                <li>Hình ảnh phải liên quan đến phòng trọ, nhà cho thuê</li>
                <li>Không chèn văn bản, số điện thoại lên ảnh</li>
            </ul>

            <div id="previewContainer" class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4"></div>
        </div>
    </div>

    <div id="ContactId" class="section bg-white p-6 rounded ml-20 mr-20 mt-8 border mb-8">
        <h2 class="text-lg font-semibold mb-4">Thông tin liên hệ</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label for="userNameIdC" class="block mb-1 font-medium">
                    Tài khoản
                </label>
                <input id="userNameIdC" type="text" disabled class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>

            <div>
                <label for="phoneNumberIdC" class="block mb-1 font-medium">
                    Số điện thoại
                </label>
                <input type="text" id="phoneNumberIdC" disabled class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
        </div>
        <div id="renterInfoContainer" class="mt-4"></div>
    </div>

    <div class="ml-20 mr-20 mb-4" id="interestListBtnContainer">
        <button type="button" onclick="viewDSQuanTam()" class="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-2 rounded-full transition">
            Danh sách quan tâm
        </button>
    </div>

    <div id="contractActionContainer" class="ml-20 mr-20 mb-6">
    </div>

    <div id="submitContainer" class="ml-20 mr-20 mb-2">
    </div>
    <div id="returnToDetailHome" class="ml-20 mr-20 mb-4">
        <a href="/Home/Detail/@ViewBag.Id?type=lardlord"
           class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 rounded-full mb-6 transition inline-block text-center">
            Thông tin chi tiết
        </a>
    </div>
</form>

<!-- Interest Popup -->
<div id="interest-popup" class="compare-popup" style="display: none;">
    <div class="compare-popup-content" style="width:50%">
        <div class="compare-popup-header">
            <div class="flex justify-between items-center">
                <h2 class="compare-popup-title">
                    <i class="fas fa-list text-orange-500 mr-3"></i>
                    Danh sách quan tâm
                </h2>
                <button onclick="hideQuanTamPopup()" class="compare-popup-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <div class="compare-popup-body">
            <div id="listQT" class="overflow-x-auto">
            </div>
        </div>
    </div>
</div>

<script>
    let clickUpdateMap = false;
    let isAuthen = authService.isAuthenticated();
    if (!isAuthen) {
        window.location.href = '/Auth/Login';
    }

    let itemPropertyBody = null;

    const apiBaseUrl = 'https://localhost:7031/api';
    const baseUrl = 'https://localhost:7031';
    const backendBaseUrl = 'https://localhost:7031';
    const provinceSelect = $('#province-select');
    const wardSelect = $('#ward-select');
    const streetSelect = $('#street-select');
    const addressInfo = $('#addressInfoId');
    const fullAddressInput = $('#open-address-modal');
    const authToken = localStorage.getItem('authToken');
    getRentalContract();

    function viewDSQuanTam() {
        $('#interest-popup').css('display', 'flex');
        $('#detailTitleId').css('z-index', '-1');
        $('#listQT').html('');
        let htmlNew = '';
        itemPropertyBody.interestedProperties.forEach(item => {
            htmlNew += `<div class="flex gap-2 items-start" style="border-bottom:1px solid gray;margin-bottom:1rem;padding-bottom:1rem;justify-content:space-between">
                            <div>
                                <div class="text-sm font-medium text-gray-800 leading-snug line-clamp-2">
                                    ${item.renterName}
                                </div>
                                <span>${item.renterPhone} - ${item.renterEmail}</span>
                                <div class="text-xs text-gray-500">${timeAgo(item.renterReplyAt)}</div>
                                <div class="text-xs font-semibold text-blue-600">${getStatusText(item.status)}</div>
                            </div>
                            <div>
                                <button onclick="landlordConfirm(${item.id}, true)"
                                    class="p-2 pl-3 pr-3 bg-white rounded-full shadow hover:bg-green-100 transition-all duration-200"
                                    title="Đồng ý cho thuê">
                                    <i class="fa-solid fa-check"></i>
                                </button>
                                <button onclick="landlordConfirm(${item.id}, false)"
                                    class="p-2 pl-3 pr-3 bg-white rounded-full shadow hover:bg-red-100 transition-all duration-200"
                                    title="Từ chối cho thuê">
                                    <i class="fa-solid fa-xmark"></i>
                                </button>
                            </div>
                        </div>`;
        });
        $('#listQT').html(htmlNew);
    }

    function getStatusText(status) {
        switch (status) {
            case 1: return "Tự động từ chối do đã chốt hợp đồng";
            case 2: return "Đang quan tâm";
            case 3: return "Muốn thuê";
            case 4: return "Đã từ chối";
            case 5: return "Đã đồng ý";
            default: return "Không xác định";
        }
    }

    function hideQuanTamPopup() {
        $('#interest-popup').css('display', 'none');
        $('#detailTitleId').css('z-index', '1');
    }

     function landlordConfirm(interestId, confirmed) {
        if (!confirm(confirmed ? "Bạn có chắc muốn đồng ý cho thuê?" : "Bạn có chắc muốn từ chối?")) return;


        fetch(`https://localhost:7031/api/Property/InterestedProperty/${interestId}/confirm?isRenter=false&confirmed=${confirmed}`, {
            method: 'POST',
            credentials: 'include'
        })
        .then(res => {
            if (!res.ok) throw new Error("Lỗi xác nhận");
            return res.json();
        })
        .then(data => {
            alert(data.message);
           //Anh Manh thên: loadPropertyDetail(itemPropertyBody.id);

        })
        .catch(err => {
            console.error("Error confirming:", err);
            alert("Có lỗi xảy ra khi xác nhận.");
        });
    }

    async function getRentalContract() {
        try {
            const response = await fetch(`https://localhost:7031/api/owner/rental-contracts/${@ViewBag.Id}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    ...(authToken ? { 'Authorization': `Bearer ${authToken}` } : {})
                }
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || data.errorMessage || 'Get property failed');
            }
        } catch (err) {}
    }

    getAmenities();
    getOwnerProperty();
    async function getOwnerProperty() {
        itemPropertyBody = await propertyService.getOwnerProperty(@ViewBag.Id);
        console.log('Full itemPropertyBody:', itemPropertyBody);
        console.log('Image URLs from API:', itemPropertyBody.imageUrls);

        const submitContainer = document.getElementById("submitContainer");
        const contractActionContainer = document.getElementById("contractActionContainer");
        const interestListBtnContainer = document.getElementById("interestListBtnContainer");
        const renterInfoContainer = document.getElementById("renterInfoContainer");

        const postStatus = itemPropertyBody.posts[0].status.toLowerCase();

        if (postStatus === "draft") {
            submitContainer.innerHTML = `
                <a href="/PostProperty/CreateContract?propertyPostId=${itemPropertyBody.posts[0].id}"
                   class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 rounded-full mb-6 transition inline-block text-center">
                   Tiếp tục
                </a>`;
        } else if (postStatus === "expired") {
            submitContainer.innerHTML = `
                <button type="submit"
                        class="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-2 rounded-full mb-6 transition">
                    Gia hạn thêm 30 ngày và cập nhật
                </button>`;
        } else if (postStatus === "rented") {
            submitContainer.innerHTML = `
                <h3>Bài đăng đã được thuê</h3>`;
            if (interestListBtnContainer) {
                interestListBtnContainer.style.display = "none";
            }
            let renterName = "";
            let renterPhone = "";
            if (itemPropertyBody.posts[0].rentalContract && itemPropertyBody.posts[0].rentalContract.renter) {
                renterName = itemPropertyBody.posts[0].rentalContract.renter.name || "";
                renterPhone = itemPropertyBody.posts[0].rentalContract.renter.phone || "";
            } else if (Array.isArray(itemPropertyBody.interestedProperties)) {
                const agreed = itemPropertyBody.interestedProperties.find(x => x.status === 5);
                if (agreed) {
                    renterName = agreed.renterName || "";
                    renterPhone = agreed.renterPhone || "";
                }
            }
            if (renterName || renterPhone) {
                renterInfoContainer.innerHTML = `
                    <div class="bg-blue-50 border border-blue-300 rounded p-4 flex flex-col md:flex-row items-start md:items-center gap-2">
                        <span class="font-semibold text-blue-700">Người đang thuê:</span>
                        <span class="text-gray-800">${renterName}</span>
                        <span class="text-gray-600">SĐT: ${renterPhone}</span>
                    </div>
                `;
            }
        } else {
            submitContainer.innerHTML = `
                <button type="submit"
                        class="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-2 rounded-full mb-6 transition">
                    Cập nhật
                </button>`;
            if (interestListBtnContainer) {
                interestListBtnContainer.style.display = "";
            }
            if (renterInfoContainer) {
                renterInfoContainer.innerHTML = "";
            }
        }

        if (itemPropertyBody.posts[0].rentalContract == null) {
            contractActionContainer.innerHTML = `
                <a href="/PostProperty/CreateContract?propertyPostId=${itemPropertyBody.posts[0].id}"
                   class="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-2 rounded-full mb-6 transition inline-block text-center">
                   Tạo hợp đồng
                </a>`;
        } else {
            contractActionContainer.innerHTML = `
                <a href="/PostProperty/ViewContract?id=${itemPropertyBody.posts[0].id}"
                   class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 rounded-full mb-6 transition inline-block text-center">
                   Xem hợp đồng
                </a>`;
        }

        $('#type').val(itemPropertyBody.type?.trim().toLowerCase());
        provinceSelect.val(itemPropertyBody.provinceId);
        addressInfo.val(itemPropertyBody.detailedAddress);

        wardSelect.empty().append('<option value="">Chọn Phường/Xã</option>');
        streetSelect.empty().append('<option value="">Chọn Đường</option>');
        if (itemPropertyBody.provinceId) {
            $.get(`${apiBaseUrl}/Property/wards/${itemPropertyBody.provinceId}`, function (data) {
                data.forEach(w => wardSelect.append(`<option value="${w.id}">${w.name}</option>`));
            });
        }
        if (itemPropertyBody.wardId) {
            $.get(`${apiBaseUrl}/Property/streets/${itemPropertyBody.wardId}`, function (data) {
                data.forEach(s => streetSelect.append(`<option value="${s.id}">${s.name}</option>`));
            });
        }

        $('#title').val(itemPropertyBody.title);
        $('#description').val(itemPropertyBody.description);
        $('#price').val(itemPropertyBody.price);
        $('#bedrooms').val(itemPropertyBody.bedrooms);
        $('#area').val(itemPropertyBody.area);
        $('#bathrooms').val(itemPropertyBody.bathrooms || 0); // Default to 0 if not present
        $('#floors').val(itemPropertyBody.floors || 0); // Default to 0 if not present

        if (Array.isArray(itemPropertyBody.amenities) && itemPropertyBody.amenities.length > 0) {
            itemPropertyBody.amenities.forEach(name => {
                if (typeof name !== 'string') name = String(name);
                const checkbox = document.querySelector(`input[name="AmenityIds"][data-name="${name}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
        }

        console.log('itemPropertyBody:', itemPropertyBody);
        console.log('imageUrls:', itemPropertyBody.imageUrls);

        if (itemPropertyBody.imageUrls && itemPropertyBody.imageUrls.length > 0) {
            itemPropertyBody.imageUrls.forEach((url, index) => {
                const wrapper = document.createElement('div');
                wrapper.className = "relative group border-2 rounded-md" + (index === 0 ? ' border-blue-500' : ' border-transparent');
                wrapper.style.cursor = 'pointer';
                wrapper.setAttribute('data-index', index);
                wrapper.setAttribute('data-old-image', 'true');
                wrapper.setAttribute('data-file-index', index);
                wrapper.setAttribute('data-old-url', url);

                const img = document.createElement('img');
                let imageUrl = url;
                if (url && !url.startsWith('http') && !url.startsWith('//')) {
                    if (url.startsWith('/')) {
                        imageUrl = backendBaseUrl + url;
                    } else {
                        imageUrl = backendBaseUrl + '/' + url;
                    }
                }
                img.src = imageUrl;
                img.className = "w-full h-32 object-cover rounded-md shadow";
                img.onerror = function() {
                    this.src = '/image/upload-image.png';
                    this.style.opacity = '0.5';
                };

                const primaryIcon = document.createElement('div');
                primaryIcon.className = "absolute top-1 left-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full z-10";
                primaryIcon.innerHTML = index === 0 ? 'Ảnh đại diện' : '';
                primaryIcon.style.display = index === 0 ? 'block' : 'none';

                wrapper.onclick = function() {
                    const clickedIndex = parseInt(this.getAttribute('data-file-index'));
                    primaryImageIndex = clickedIndex;
                    Array.from(previewContainer.children).forEach((child) => {
                        child.classList.remove('border-blue-500');
                        child.classList.add('border-transparent');
                        const icon = child.querySelector('div');
                        if (icon) icon.style.display = 'none';
                    });
                    this.classList.remove('border-transparent');
                    this.classList.add('border-blue-500');
                    primaryIcon.style.display = 'block';
                    updatePrimaryImageIndex();
                };

                const deleteBtn = document.createElement('button');
                deleteBtn.innerHTML = "<span>&times;</span>";
                deleteBtn.type = "button";
                deleteBtn.className = "absolute top-1 right-1 bg-red-500 text-white w-6 h-6 rounded-full flex items-center justify-center shadow hover:bg-red-600 z-20";
                deleteBtn.onclick = (e) => {
                    e.stopPropagation();
                    const oldUrl = wrapper.getAttribute('data-old-url');
                    if (oldUrl) {
                        const currentIndex = itemPropertyBody.imageUrls.indexOf(oldUrl);
                        if (currentIndex > -1) {
                            itemPropertyBody.imageUrls.splice(currentIndex, 1);
                        }
                    }
                    wrapper.remove();
                    updatePrimaryImageIndex();
                };

                wrapper.appendChild(img);
                wrapper.appendChild(primaryIcon);
                wrapper.appendChild(deleteBtn);
                previewContainer.appendChild(wrapper);
            });
        }

        setTimeout(() => {
            wardSelect.val(itemPropertyBody.wardId);
            streetSelect.val(itemPropertyBody.streetId);
            updateMap();
        }, 500);
    }

    $.get(`${apiBaseUrl}/Property/provinces`, function (data) {
        provinceSelect.empty().append('<option value="">Chọn Tỉnh/Thành</option>');
        data.forEach(p => provinceSelect.append(`<option value="${p.id}">${p.name}</option>`));
    });

    // Load property types dynamically
    $.get(`${apiBaseUrl}/PropertyType/GetAllPropertyTypes`, function (data) {
        const typeSelect = $('#type');
        typeSelect.empty().append('<option value="">-- Chọn danh mục --</option>');
        data.forEach(type => {
            typeSelect.append(`<option value="${type.id}">${type.name}</option>`);
        });
    });

    let createdPropertyId = null;
    let imageFiles = [];
    let primaryImageIndex = 0;

    const propertyForm = document.getElementById('property-form');
    propertyForm.onsubmit = async function(e) {
        e.preventDefault();
        const formData = new FormData(propertyForm);
        const amenityIds = Array.from(document.querySelectorAll('input[name="AmenityIds"]:checked')).map(cb => parseInt(cb.value));
        const provinceId = parseInt(formData.get('province-select'));
        const wardId = parseInt(formData.get('WardId'));
        const streetId = parseInt(formData.get('StreetId'));
        const detailedAddress = formData.get('AddressInfo') || '';
        const propertyData = {
            title: formData.get('title'),
            description: formData.get('description'),
            type: formData.get('type'), // Changed to match API expectation
            area: parseFloat(formData.get('area')),
            bedrooms: parseInt(formData.get('bedrooms')),
            bathrooms: parseInt(formData.get('bathrooms')),
            floors: parseInt(formData.get('floors')),
            price: parseFloat(formData.get('price')),
            location: '',
            amenityIds: amenityIds,
            provinceId: provinceId,
            wardId: wardId,
            streetId: streetId,
            detailedAddress: detailedAddress
        };

         if(propertyData.price <= 0){
             alert('Giá cho thuê phải lớn hơn 0');
             return;
         }

         if(propertyData.area <= 0){
             alert('Diện tích phải lớn hơn 0');
             return;
         }

         if(propertyData.bedrooms <= 0){
             alert('Số lượng phòng phải lớn hơn 0');
             return;
         }

         updateMap();
         // if(imageFiles.length == 0){
         //     alert('Cần cập nhật ảnh');
         //     return;
         // }
         // Kiểm tra dữ liệu trước khi gửi
         // for (const key in propertyData) {
         //     if (propertyData[key] === undefined || propertyData[key] === null || propertyData[key] === '' || (Array.isArray(propertyData[key]) && propertyData[key].length === 0)) {
         //         alert('Vui lòng nhập đầy đủ thông tin: ' + key);
         //         return;
         //     }
         // }
         // Gửi API tạo property

         //propertyData['location'] = await fetchLocationAndSetPropertyData();
         const token = localStorage.getItem('authToken');
         const disabledStatuses = ['rented', 'sold']
         const expiredStatuses = ['expired'];
         const propertyId = @Html.Raw(ViewBag.Id);
         let userId = 0;
            if (token) {
                const payload = JSON.parse(atob(token.split('.')[1]));
                userId = payload.id || payload.userId || 0;
            }
         const landlordId = userId;
         const extendDays = 30;

        let getOwnerProperty;
        try {
            getOwnerProperty = await propertyService.getOwnerProperty(propertyId);
        } catch (error) {
            alert('Không thể lấy thông tin property.');
            return;
        }

        const posts = getOwnerProperty?.posts;
        if (!posts || posts.length === 0) {
            alert('Không có bài đăng nào để xử lý.');
            return;
        }

        const hasRestrictedStatus = posts.some(post => disabledStatuses.includes((post.status || '').toLowerCase()));
        if (hasRestrictedStatus) {
            alert('Bạn không thể cập nhật bài viết này vì nó đang ở trạng thái Rented hoặc Sold.');
            return;
        }

        const res = await fetch(`https://localhost:7031/api/OwnerProperty/${propertyId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                ...(token ? { 'Authorization': `Bearer ${token}` } : {})
            },
            credentials: 'include',
            body: JSON.stringify(propertyData)
        });
        if (!res.ok) {
            const err = await res.json().catch(() => ({}));
            alert('Sửa property thất bại! ' + (err.message || ''));
            return;
        }

        const hasExpiredPost = posts.some(post => expiredStatuses.includes((post.status || '').toLowerCase()));
        if (hasExpiredPost) {
            const expiredPost = posts.find(post => expiredStatuses.includes((post.status || '').toLowerCase()));
            try {
                const extendRes = await fetch(`https://localhost:7031/api/OwnerProperty/extend/${expiredPost.id}/${landlordId}?days=${extendDays}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        ...(token ? { 'Authorization': `Bearer ${token}` } : {})
                    },
                    credentials: 'include',
                });

                if (!extendRes.ok) {
                    const err = await extendRes.json().catch(() => ({}));
                    alert('Gia hạn bài đăng thất bại! ' + (err.message || ''));
                    return;
                }
            } catch (error) {
                alert('Có lỗi khi gọi API gia hạn.');
                return;
            }
        }

        const currentImages = Array.from(previewContainer.children);
        const hasNewImages = imageFiles.length > 0;
        const hasOldImages = currentImages.some(img => img.getAttribute('data-old-image') === 'true');
        
        updatePrimaryImageIndex();
        const hasOldImagesDeleted = handleOldImagesDeletion();

        try {
            await uploadImages(propertyId);
            if (hasNewImages) {
                alert("Cập nhật property và ảnh thành công!");
            } else if (hasOldImagesDeleted) {
                alert("Cập nhật property thành công! Đã xóa ảnh cũ.");
            } else {
                alert("Cập nhật property thành công!");
            }
        } catch (error) {
            alert("Cập nhật property thành công nhưng có lỗi khi xử lý ảnh: " + error.message);
        }

        refreshImagePreview();
        window.location.href = `/PostProperty/ListProperty`;
    };

    let propertyImageCreateDto = [];
    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function updatePrimaryImageIndex() {
        const currentImages = Array.from(previewContainer.children);
        if (currentImages.length > 0) {
            const primaryImage = currentImages.find(img => img.classList.contains('border-blue-500'));
            if (primaryImage) {
                const primaryIndex = parseInt(primaryImage.getAttribute('data-file-index'));
                if (!isNaN(primaryIndex)) {
                    primaryImageIndex = primaryIndex;
                }
            } else {
                primaryImageIndex = 0;
                if (currentImages[0]) {
                    currentImages[0].classList.remove('border-transparent');
                    currentImages[0].classList.add('border-blue-500');
                    const icon = currentImages[0].querySelector('div');
                    if (icon) icon.style.display = 'block';
                }
            }
        }
    }

    function handleOldImagesDeletion() {
        const currentImages = Array.from(previewContainer.children);
        const remainingOldImages = currentImages.filter(img => img.getAttribute('data-old-image') === 'true');
        const originalOldImages = itemPropertyBody.imageUrls || [];
        
        if (remainingOldImages.length < originalOldImages.length) {
            itemPropertyBody.imageUrls = remainingOldImages.map(img => img.getAttribute('data-old-url')).filter(url => url);
            return true;
        }
        return false;
    }

    function refreshImagePreview() {
        previewContainer.innerHTML = "";
        if (imageFiles.length > 0) {
            imageFiles.forEach((file, index) => {
                if (file.type.startsWith("image/")) {
                    const reader = new FileReader();
                    reader.onload = () => {
                        const wrapper = document.createElement('div');
                        wrapper.className = "relative group border-2 rounded-md" + (index === primaryImageIndex ? ' border-blue-500' : ' border-transparent');
                        wrapper.style.cursor = 'pointer';
                        wrapper.setAttribute('data-index', index);
                        wrapper.setAttribute('data-file-index', index);

                        const img = document.createElement('img');
                        img.src = reader.result;
                        img.className = "w-full h-32 object-cover rounded-md shadow";

                        const primaryIcon = document.createElement('div');
                        primaryIcon.className = "absolute top-1 left-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full z-10";
                        primaryIcon.innerHTML = index === primaryImageIndex ? 'Ảnh đại diện' : '';
                        primaryIcon.style.display = index === primaryImageIndex ? 'block' : 'none';

                        const deleteBtn = document.createElement('button');
                        deleteBtn.innerHTML = "<span>&times;</span>";
                        deleteBtn.type = "button";
                        deleteBtn.className = "absolute top-1 right-1 bg-red-500 text-white w-6 h-6 rounded-full flex items-center justify-center shadow hover:bg-red-600 z-20";
                        deleteBtn.onclick = (e) => {
                            e.stopPropagation();
                            const fileIndex = parseInt(wrapper.getAttribute('data-file-index'));
                            imageFiles.splice(fileIndex, 1);
                            if (primaryImageIndex === fileIndex) {
                                primaryImageIndex = 0;
                            } else if (primaryImageIndex > fileIndex) {
                                primaryImageIndex--;
                            }
                            wrapper.remove();
                            updatePrimaryImageIndex();
                        };

                        wrapper.appendChild(img);
                        wrapper.appendChild(primaryIcon);
                        wrapper.appendChild(deleteBtn);
                        previewContainer.appendChild(wrapper);
                    };
                    reader.readAsDataURL(file);
                }
            });
        } else if (itemPropertyBody.imageUrls && itemPropertyBody.imageUrls.length > 0) {
            itemPropertyBody.imageUrls.forEach((url, index) => {
                const wrapper = document.createElement('div');
                wrapper.className = "relative group border-2 rounded-md" + (index === 0 ? ' border-blue-500' : ' border-transparent');
                wrapper.style.cursor = 'pointer';
                wrapper.setAttribute('data-index', index);
                wrapper.setAttribute('data-old-image', 'true');
                wrapper.setAttribute('data-file-index', index);
                wrapper.setAttribute('data-old-url', url);

                const img = document.createElement('img');
                let imageUrl = url;
                if (url && !url.startsWith('http') && !url.startsWith('//')) {
                    if (url.startsWith('/')) {
                        imageUrl = backendBaseUrl + url;
                    } else {
                        imageUrl = backendBaseUrl + '/' + url;
                    }
                }
                img.src = imageUrl;
                img.className = "w-full h-32 object-cover rounded-md shadow";
                img.onerror = function() {
                    this.src = '/image/upload-image.png';
                    this.style.opacity = '0.5';
                };

                const primaryIcon = document.createElement('div');
                primaryIcon.className = "absolute top-1 left-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full z-10";
                primaryIcon.innerHTML = index === 0 ? 'Ảnh đại diện' : '';
                primaryIcon.style.display = index === 0 ? 'block' : 'none';

                const deleteBtn = document.createElement('button');
                deleteBtn.innerHTML = "<span>&times;</span>";
                deleteBtn.type = "button";
                deleteBtn.className = "absolute top-1 right-1 bg-red-500 text-white w-6 h-6 rounded-full flex items-center justify-center shadow hover:bg-red-600 z-20";
                deleteBtn.onclick = (e) => {
                    e.stopPropagation();
                    const oldUrl = wrapper.getAttribute('data-old-url');
                    if (oldUrl) {
                        const currentIndex = itemPropertyBody.imageUrls.indexOf(oldUrl);
                        if (currentIndex > -1) {
                            itemPropertyBody.imageUrls.splice(currentIndex, 1);
                        }
                    }
                    wrapper.remove();
                    updatePrimaryImageIndex();
                };

                wrapper.appendChild(img);
                wrapper.appendChild(primaryIcon);
                wrapper.appendChild(deleteBtn);
                previewContainer.appendChild(wrapper);
            });
        }
    }

    async function fetchLocationAndSetPropertyData() {
        const location = `${addressInfo.val()} ${streetSelect.find("option:selected").text()} ${wardSelect.find("option:selected").text()} ${provinceSelect.find("option:selected").text()}`;
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`;
        let latlon = '';

        try {
            const response = await fetch(url);
            const data = await response.json();

            if (data.length > 0) {
                const lat = data[0].lat;
                const lon = data[0].lon;
                latlon = `${lat},${lon}`;
            } else {
                console.log("Không tìm thấy địa chỉ.");
                latlon = location.trim();
            }
        } catch (error) {
            console.error("Lỗi khi gọi API vị trí:", error);
            latlon = location.trim();
        }

        return latlon;
    }

    async function uploadImages(propertyId) {
        const token = localStorage.getItem('authToken');
        const currentImages = Array.from(previewContainer.children);
        const remainingOldImages = currentImages.filter(img => img.getAttribute('data-old-image') === 'true');

        if (imageFiles.length === 0 && remainingOldImages.length === 0) {
            try {
                const clearResponse = await fetch(`https://localhost:7031/api/properties/${propertyId}/images/clear`, {
                    method: 'DELETE',
                    headers: {
                        ...(token ? { 'Authorization': `Bearer ${token}` } : {})
                    }
                });
                if (!clearResponse.ok) {
                    console.warn('Không thể xóa ảnh cũ khỏi database');
                } else {
                    console.log('Đã xóa tất cả ảnh cũ khỏi database');
                }
            } catch (error) {
                console.warn('Lỗi khi xóa ảnh cũ khỏi database:', error);
            }
            return;
        }

        try {
            const clearResponse = await fetch(`https://localhost:7031/api/properties/${propertyId}/images/clear`, {
                method: 'DELETE',
                headers: {
                    ...(token ? { 'Authorization': `Bearer ${token}` } : {})
                }
            });
            if (!clearResponse.ok) {
                console.warn('Không thể xóa ảnh cũ khỏi database, tiếp tục xử lý');
            } else {
                console.log('Đã xóa tất cả ảnh cũ khỏi database');
            }
        } catch (error) {
            console.warn('Lỗi khi xóa ảnh cũ khỏi database:', error);
        }

        if (imageFiles.length > 0) {
            for (let idx = 0; idx < imageFiles.length; idx++) {
                const file = imageFiles[idx];
                const formData = new FormData();
                formData.append('file', file);

                const uploadResponse = await fetch(`https://localhost:7031/api/properties/${propertyId}/images/upload`, {
                    method: 'POST',
                    headers: {
                        ...(token ? { 'Authorization': `Bearer ${token}` } : {})
                    },
                    body: formData
                });

                if (!uploadResponse.ok) {
                    const error = await uploadResponse.text();
                    throw new Error(`Upload ảnh thất bại: ${error}`);
                }

                const uploadResult = await uploadResponse.json();
                const imageUrl = uploadResult.imageUrl;
                console.log('Image URL from API:', imageUrl);

                const dto = {
                    url: imageUrl,
                    isPrimary: idx === primaryImageIndex,
                    order: idx
                };

                const saveResponse = await fetch(`https://localhost:7031/api/properties/${propertyId}/images`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...(token ? { 'Authorization': `Bearer ${token}` } : {})
                    },
                    body: JSON.stringify(dto)
                });

                if (!saveResponse.ok) {
                    const error = await saveResponse.text();
                    throw new Error(`Lưu thông tin ảnh thất bại: ${error}`);
                }

                const savedImage = await saveResponse.json();
                console.log('Saved image to database:', savedImage);
            }
        }
    }

    provinceSelect.on('change', async function () {
        const provinceId = $(this).val();
        wardSelect.empty().append('<option value="">Chọn Phường/Xã</option>');
        streetSelect.empty().append('<option value="">Chọn Đường</option>');
        if (provinceId) {
            $.get(`${apiBaseUrl}/Property/wards/${provinceId}`, async function (data) {
                data.forEach(w => wardSelect.append(`<option value="${w.id}">${w.name}</option>`));
            });
        }
    });

    wardSelect.on('change', async function () {
        const wardId = $(this).val();
        streetSelect.empty().append('<option value="">Chọn Đường</option>');
        if (wardId) {
            $.get(`${apiBaseUrl}/Property/streets/${wardId}`, async function (data) {
                data.forEach(s => streetSelect.append(`<option value="${s.id}">${s.name}</option>`));
            });
        }
    });

    function updateMap() {
        if (provinceSelect.val() == '') {
            alert('Chọn tỉnh/thành phố');
            return;
        }
        if (wardSelect.val() == '') {
            alert('Chọn phường/xã');
            return;
        }
        if (streetSelect.val() == '') {
            alert('Chọn đường phố');
            return;
        }

        const location = `${addressInfo.val()} ${streetSelect.find("option:selected").text()} ${wardSelect.find("option:selected").text()} ${provinceSelect.find("option:selected").text()}`;
        const iframe = document.getElementById("mapFrame");

        if (location.trim() !== "") {
            const encodedLocation = encodeURIComponent(location.trim());
            iframe.src = `https://www.google.com/maps?q=${encodedLocation}&output=embed`;
        }
    }

    async function getAmenities() {
        let listData = await getAllAmenities();
        const amenitiesContainer = $('#amenities-container');
        listData.forEach(amenity => {
            amenitiesContainer.append(`
                <div class="flex items-center mr-4">
                    <input type="checkbox" name="AmenityIds" data-name="${amenity.name}" value="${amenity.id}" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                    <label class="ml-2 block text-sm text-gray-900">${amenity.name}</label>
                </div>
            `);
        });
    }

    let isScrollingByClick = false;

    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            document.querySelectorAll('.tab-btn').forEach(b => {
                b.classList.remove('text-orange-600', 'border-b-2', 'border-orange-600');
                b.classList.add('text-gray-600', 'font-semibold');
            });

            this.classList.remove('text-gray-600', 'font-semibold');
            this.classList.add('text-orange-600', 'border-b-2', 'border-orange-600');

            const sectionId = this.getAttribute('data-scroll');
            const sectionEl = document.getElementById(sectionId);
            if (sectionEl) {
                isScrollingByClick = true;
                const offset = 190;
                const y = sectionEl.getBoundingClientRect().top + window.pageYOffset - offset;
                window.scrollTo({ top: y, behavior: 'smooth' });
            }

            setTimeout(() => {
                isScrollingByClick = false;
            }, 600);
        });
    });

    const tabButtons = document.querySelectorAll('.tab-btn');
    const sections = document.querySelectorAll('.section');

    const sectionMap = {};
    tabButtons.forEach(btn => {
        const id = btn.getAttribute('data-scroll');
        sectionMap[id] = btn;
    });

    const observer = new IntersectionObserver(
        (entries) => {
            if (isScrollingByClick) return;

            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    tabButtons.forEach(btn => {
                        btn.classList.remove('text-orange-600', 'border-b-2', 'border-orange-600');
                        btn.classList.add('text-gray-600', 'font-semibold');
                    });

                    const id = entry.target.getAttribute('id');
                    const activeBtn = sectionMap[id];
                    if (activeBtn) {
                        activeBtn.classList.remove('text-gray-600', 'font-semibold');
                        activeBtn.classList.add('text-orange-600', 'border-b-2', 'border-orange-600');
                    }
                }
            });
        },
        {
            rootMargin: '-30% 0px -40% 0px',
            threshold: 0.1
        }
    );

    sections.forEach(section => observer.observe(section));

    const imageUpload = document.getElementById('imageUpload');
    const previewContainer = document.getElementById('previewContainer');

    imageUpload.addEventListener('change', () => {
        try {
            imageFiles = [];
            previewContainer.innerHTML = "";
            const fileAlls = Array.from(imageUpload.files);
            if (fileAlls.length > 8) {
                alert("Chỉ được tải tối đa 8 ảnh!");
                imageUpload.value = "";
                return;
            }
            const files = fileAlls.slice(0, 8);
            imageFiles = files;
            primaryImageIndex = 0;

            for (const file of files) {
                if (file.size > 5 * 1024 * 1024) {
                    alert(`Ảnh "${file.name}" vượt quá 5MB. Vui lòng chọn ảnh nhẹ hơn.`);
                    imageUpload.value = "";
                    return;
                }
            }

            files.forEach((file, index) => {
                if (!file.type.startsWith("image/")) return;

                const reader = new FileReader();
                reader.onload = () => {
                    const wrapper = document.createElement('div');
                    wrapper.className = "relative group border-2 rounded-md" + (index === 0 ? ' border-blue-500' : ' border-transparent');
                    wrapper.style.cursor = 'pointer';
                    wrapper.setAttribute('data-index', index);
                    wrapper.setAttribute('data-file-index', index);

                    const img = document.createElement('img');
                    img.src = reader.result;
                    img.className = "w-full h-32 object-cover rounded-md shadow";

                    const primaryIcon = document.createElement('div');
                    primaryIcon.className = "absolute top-1 left-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full z-10";
                    primaryIcon.innerHTML = index === 0 ? 'Ảnh đại diện' : '';
                    primaryIcon.style.display = index === 0 ? 'block' : 'none';

                    wrapper.onclick = function() {
                        const clickedIndex = parseInt(this.getAttribute('data-file-index'));
                        primaryImageIndex = clickedIndex;
                        Array.from(previewContainer.children).forEach((child) => {
                            child.classList.remove('border-blue-500');
                            child.classList.add('border-transparent');
                            const icon = child.querySelector('div');
                            if (icon) icon.style.display = 'none';
                        });
                        this.classList.remove('border-transparent');
                        this.classList.add('border-blue-500');
                        primaryIcon.style.display = 'block';
                        updatePrimaryImageIndex();
                    };

                    const deleteBtn = document.createElement('button');
                    deleteBtn.innerHTML = "<span>&times;</span>";
                    deleteBtn.type = "button";
                    deleteBtn.className = "absolute top-1 right-1 bg-red-500 text-white w-6 h-6 rounded-full flex items-center justify-center shadow hover:bg-red-600 z-20";
                    deleteBtn.onclick = (e) => {
                        e.stopPropagation();
                        const fileIndex = parseInt(wrapper.getAttribute('data-file-index'));
                        files.splice(fileIndex, 1);
                        imageFiles = files;
                        if (primaryImageIndex === fileIndex) {
                            primaryImageIndex = 0;
                        } else if (primaryImageIndex > fileIndex) {
                            primaryImageIndex--;
                        }
                        wrapper.remove();
                        updatePrimaryImageIndex();
                    };

                    wrapper.appendChild(img);
                    wrapper.appendChild(primaryIcon);
                    wrapper.appendChild(deleteBtn);
                    previewContainer.appendChild(wrapper);
                };
                reader.readAsDataURL(file);
            });
        } catch (error) {
            console.log(error);
        }
    });

    document.getElementById('ai-suggest-button').addEventListener('click', async function() {
        const formData = new FormData(propertyForm);
        const amenityIds = Array.from(document.querySelectorAll('input[name="AmenityIds"]:checked')).map(cb => parseInt(cb.value));

        const provinceName = provinceSelect.find("option:selected").text();
        const wardName = wardSelect.find("option:selected").text();
        const streetName = streetSelect.find("option:selected").text();
        const fullAddressDisplay = `${addressInfo.val() || ''} ${streetName === '-- Chọn đường phố --' ? '' : streetName} ${wardName === '-- Chọn phường/xã --' ? '' : wardName} ${provinceName === '-- Chọn Tỉnh/Thành --' ? '' : provinceName}`.trim();

        const propertyDataForAI = {
            title: formData.get('title') || '',
            address: fullAddressDisplay,
            type: formData.get('type') || '',
            area: parseFloat(formData.get('area')) || 0,
            bedrooms: parseInt(formData.get('bedrooms')) || 0,
            bathrooms: parseInt(formData.get('bathrooms')) || 0,
            floors: parseInt(formData.get('floors')) || 0,
            price: parseFloat(formData.get('price')) || 0,
            amenityIds: amenityIds,
            provinceId: parseInt(formData.get('province-select')) || 0,
            wardId: parseInt(formData.get('WardId')) || 0,
            streetId: parseInt(formData.get('StreetId')) || 0,
            detailedAddress: formData.get('AddressInfo') || ''
        };

        for (const key in propertyDataForAI) {
            if (propertyDataForAI[key] === 0 || propertyDataForAI[key] === '' || (Array.isArray(propertyDataForAI[key]) && propertyDataForAI[key].length === 0)) {
                delete propertyDataForAI[key];
            }
        }

        const confirmation = confirm("Bạn có chắc chắn muốn sử dụng tính năng gợi ý AI? Thao tác này sẽ trừ 100 VNĐ từ ví của bạn.");

        if (!confirmation) {
            this.textContent = 'Gợi ý mô tả bởi AI'; // Khôi phục trạng thái nút
            this.disabled = false;
            return;
        }

        // Nếu người dùng đồng ý, tiếp tục logic gọi API
        console.log("Dữ liệu gửi lên AI:", propertyDataForAI);

        try {
            this.textContent = 'Đang tạo mô tả...';
            this.disabled = true;

            const token = localStorage.getItem('authToken');

            if (!token) {
                alert('Bạn cần đăng nhập để sử dụng chức năng này.');
                return;
            }

            const response = await fetch(`https://localhost:7031/api/PropertyPosts/suggest-description`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(propertyDataForAI)
            });

            // Xử lý các mã trạng thái phản hồi
            if (!response.ok) {
                const errorResponse = await response.json(); // Cố gắng đọc JSON lỗi
                let errorMessage = errorResponse.message || errorResponse.title || 'Lỗi không xác định từ server.';

                // Kiểm tra lỗi thiếu tiền cụ thể từ backend
                if (response.status === 400 && errorResponse.code === "INSUFFICIENT_BALANCE") { // Giả định backend trả về code "INSUFFICIENT_BALANCE"
                    errorMessage = "Số dư trong ví của bạn không đủ để sử dụng tính năng này. Vui lòng nạp thêm tiền.";
                } else if (response.status === 401 || response.status === 403) {
                     errorMessage = "Bạn không có quyền truy cập hoặc phiên đăng nhập đã hết hạn. Vui lòng đăng nhập lại.";
                }

                throw new Error(`API Error: ${response.status} - ${errorMessage}`);
            }

            const result = await response.text();
            document.getElementById('description').value = result.suggestedDescription || result.description || JSON.stringify(result);
            alert("Gợi ý mô tả đã được tạo thành công! Ví của bạn đã bị trừ 100 VNĐ."); // Thông báo thành công

        } catch (error) {
            console.error("Lỗi khi gọi API gợi ý mô tả AI:", error);
            alert(`Đã xảy ra lỗi khi tạo mô tả. Vui lòng thử lại! Chi tiết: ${error.message}`);
        } finally {
            this.innerHTML = `<span>Gợi ý mô tả bởi AI</span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L18.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM10.5 7.5L12 12m-2.25-4.5L12 12m0 0 4.5 4.5M12 12l-1.5 4.5M12 12l3.75-3.75M12 12l-3.75 3.75M13.5 12h-3" />
                </svg>
            `;
            this.disabled = false;
        }
    });
</script>

@{
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Quản lý hợp đồng cho thuê</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, white 0%, white 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

            .header h1 {
                font-size: 2.5rem;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

            .header p {
                font-size: 1.1rem;
                opacity: 0.9;
            }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
            max-width: 1200px;
            margin-left: auto;
            margin-right: auto;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            text-align: center;
        }

            .stat-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }

            .stat-card i {
                font-size: 2.5rem;
                margin-bottom: 15px;
                color: orange;
            }

            .stat-card h3 {
                font-size: 2rem;
                color: #333;
                margin-bottom: 5px;
            }

            .stat-card p {
                color: #666;
                font-weight: 500;
            }

        .controls {
            max-width: 1200px;
            margin: 0 auto 30px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        .search-box {
            flex: 1;
            min-width: 250px;
            position: relative;
        }

            .search-box input {
                width: 100%;
                padding: 12px 45px 12px 15px;
                border: none;
                border-radius: 25px;
                background: white;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                font-size: 16px;
                outline: none;
            }

            .search-box i {
                position: absolute;
                right: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: #666;
            }

        .filter-btn {
            padding: 12px 20px;
            border: none;
            border-radius: 25px;
            background: white;
            color: orange;
            font-weight: 600;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

            .filter-btn:hover, .filter-btn.active {
                background: orange;
                color: white;
                transform: translateY(-2px);
            }

        .table-container {
            margin: 0 auto;
            max-width: 1400px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .table-wrapper {
            overflow-x: auto;
            max-height: 600px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 13px;
            min-width: 1800px;
        }

        th {
            background: linear-gradient(135deg, orange, orange);
            color: white;
            text-align: left;
            padding: 16px 10px;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 11px;
            letter-spacing: 1px;
            position: sticky;
            top: 0;
            z-index: 100;
            white-space: nowrap;
            border-right: 1px solid rgba(255,255,255,0.2);
        }

            th:last-child {
                border-right: none;
            }

            th i {
                margin-right: 5px;
            }

        td {
            padding: 12px 10px;
            border-bottom: 1px solid #f0f0f0;
            vertical-align: middle;
            border-right: 1px solid #f8f9fa;
            white-space: nowrap;
        }

            td:last-child {
                border-right: none;
                white-space: normal;
            }

        tr {
            transition: all 0.3s ease;
        }

        tbody tr:hover {
            background: linear-gradient(90deg, #f8f9ff, #fff);
            transform: scale(1.01);
        }

        .status {
            display: inline-flex;
            align-items: center;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .status i {
                margin-right: 5px;
                font-size: 10px;
            }

            .status.active {
                background: linear-gradient(135deg, #28a745, #20c997);
                color: white;
            }

            .status.terminated {
                background: linear-gradient(135deg, #dc3545, #e74c3c);
                color: white;
            }

        .price {
            font-weight: 700;
            color: #28a745;
            font-size: 15px;
        }

        .days-remaining {
            padding: 4px 8px;
            border-radius: 12px;
            font-weight: 600;
            font-size: 12px;
            text-align: center;
        }

            .days-remaining.urgent {
                background: #fff3cd;
                color: #856404;
                border: 1px solid #ffeaa7;
            }

            .days-remaining.expired {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }

            .days-remaining.safe {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }

        .payment-section {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .payment-checkbox {
            width: 20px;
            height: 20px;
            accent-color: #667eea;
            cursor: pointer;
        }

        .late-note {
            font-size: 11px;
            color: #dc3545;
            font-weight: 600;
            margin-top: 5px;
            display: block;
        }

        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
            font-size: 18px;
        }

            .loading i {
                animation: spin 1s linear infinite;
                margin-right: 10px;
            }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .error {
            text-align: center;
            padding: 50px;
            color: #dc3545;
            font-size: 16px;
        }

        .contact-info {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .phone {
            color: #667eea;
            font-weight: 600;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

            .close:hover {
                color: #000;
            }

        @@media (max-width: 768px) {
            .header h1

        {
            font-size: 2rem;
        }

        .stats-container {
            grid-template-columns: repeat(2, 1fr);
        }

        .controls {
            flex-direction: column;
        }

        .search-box {
            min-width: 100%;
        }

        table {
            font-size: 12px;
        }

        th, td {
            padding: 10px 8px;
        }

        }
    </style>
    </head>
    <body>
        <div class="controls">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Tìm kiếm theo tên thuộc tính, người thuê...">
                <i class="fas fa-search"></i>
            </div>
            <button class="filter-btn active" data-filter="all">Tất cả</button>
            <button class="filter-btn" data-filter="active">Đang thuê</button>
            <button class="filter-btn" data-filter="expiring">Sắp hết hạn</button>
            <button class="filter-btn" data-filter="terminated">Đã kết thúc</button>
        </div>

        <div class="table-container">
            <div class="table-wrapper">
                <table id="contractsTable">
                    <thead>
                        <tr>
                            <th><i class="fas fa-home"></i> Tên nhà cho thuê</th>
                            <th><i class="fas fa-user"></i> Người thuê</th>
                            <th><i class="fas fa-phone"></i> Liên hệ</th>
                            <th><i class="fas fa-money-bill-wave"></i> Giá thuê/tháng</th>
                            <th><i class="fas fa-calendar-plus"></i> Ngày bắt đầu</th>
                            <th><i class="fas fa-calendar-times"></i> Ngày kết thúc</th>
                            <th><i class="fas fa-hourglass-half"></i> Thời gian còn lại</th>
                            <th><i class="fas fa-info-circle"></i> Trạng thái</th>
                            <th><i class="fas fa-sync-alt"></i> Chu kỳ thanh toán</th>
                            <th><i class="fas fa-calendar-day"></i> Ngày thanh toán</th>
                            <th><i class="fas fa-history"></i> TT gần nhất</th>
                            <th><i class="fas fa-calendar-check"></i> TT tiếp theo</th>
                            <th><i class="fas fa-tools"></i> Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="contractsTableBody">
                        <tr>
                            <td colspan="19" class="loading">
                                <i class="fas fa-spinner"></i> Đang tải dữ liệu...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Payment Confirmation Modal -->
        <div id="paymentModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-credit-card"></i> Xác nhận thanh toán</h2>
                    <span class="close">&times;</span>
                </div>
                <div id="paymentDetails"></div>
                <div style="text-align: center; margin-top: 20px;">
                    <button id="confirmPayment" type="button" class="filter-btn" style="background: #28a745; color: white; margin-right: 10px;">
                        <i class="fas fa-check"></i> Xác nhận
                    </button>
                     <button id="cancelPayment" type="button" class="filter-btn">
                        <i class="fas fa-times"></i> Hủy
                    </button>
                </div>
            </div>
        </div>

        <!-- Terminate Confirmation Modal -->
        <div id="terminateModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-ban"></i> Chấm dứt hợp đồng</h2>
                    <span class="close-terminate">&times;</span>
                </div>
                <div id="terminateDetails"></div>
                <div style="text-align: center; margin-top: 20px;">
                    <button id="confirmTerminate" type="button" class="terminate-btn" style="margin-right: 10px;">
                        <i class="fas fa-check"></i> Xác nhận
                    </button>
                    <button id="cancelTerminate" type="button" class="filter-btn">
                        <i class="fas fa-times"></i> Hủy
                    </button>
                </div>
            </div>
        </div>
        <!-- Modal gia hạn -->
        <div id="extendModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="document.getElementById('extendModal').style.display='none'">&times;</span>
                <h2>Gia hạn hợp đồng</h2>
                <div id="extendDetails"></div>
                <label for="proposedRent">Giá thuê mới (VND):</label>
                <input type="number" id="proposedRent" placeholder="Nhập giá thuê mới"><br><br>
                <label for="proposedCycle">Kỳ hạn thanh toán:</label>
                <select id="proposedCycle">
                    <option value="0">Hàng tháng</option>
                    <option value="1">Hàng quý</option>
                    <option value="2">Hàng năm</option>
                </select><br><br>
                <label for="proposedDay">Ngày thanh toán trong tháng:</label>
                <input type="number" id="proposedDay" min="1" max="28"><br><br>
                <button id="confirmExtend">Xác nhận</button>
                <button id="cancelExtend">Hủy</button>
            </div>
        </div>

        <script>
            const API_URL = "https://localhost:7031/api/OwnerProperty/GetMyRentedProperties";
            const USER_INFO_API = "https://localhost:7031/api/User/basic-info?userId=";
            const token = localStorage.getItem("authToken");

            let allContracts = [];
            let currentFilter = 'all';

            function getContractStatusText(status) {
                if (status === 1) return "Đang thuê";
                if (status === 2) return "Chấm dứt hợp đồng";
                return "-";
            }

            async function fetchUserInfo(userId) {
                if (!userId) return { fullName: "-", phoneNumber: "-" };
                try {
                    const res = await fetch(USER_INFO_API + userId, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + token
                        }
                    });
                    if (!res.ok) return { fullName: "-", phoneNumber: "-" };
                    return await res.json();
                } catch {
                    return { fullName: "-", phoneNumber: "-" };
                }
            }

            async function fetchContracts() {
                try {
                    const res = await fetch(API_URL, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + token
                        }
                    });

                    if (!res.ok) {
                        throw new Error("HTTP error " + res.status);
                    }

                    const data = await res.json();
                    await renderContracts(data);
                } catch (err) {
                    console.error("Fetch error:", err);
                    document.querySelector("#contractsTable tbody").innerHTML =
                        `<tr><td colspan="7" style="color:red;text-align:center;">${err}</td></tr>`;
                }
            }

            async function renderContracts(properties) {
                const tbody = document.querySelector("#contractsTableBody");
                tbody.innerHTML = "";
                allContracts = [];

                for (const p of properties) {
                    for (const post of p.posts) {
                        let contract = post.rentalContract;
                        if (!contract) continue;

                        let renterInfo = await fetchUserInfo(contract.renterId);
                        let contractStatus = contract ? getContractStatusText(contract.status) : "-";
                        let startDate = new Date(contract.startDate).toLocaleDateString('vi-VN');
                        let endDate = new Date(contract.endDate).toLocaleDateString('vi-VN');
                        let monthlyRent = contract.monthlyRent.toLocaleString() + " VND";
                        let daysRemaining = calculateDaysRemaining(contract.endDate);
                        let nextPayment = calculateNextPaymentDate(contract.startDate, contract.paymentCycle, contract.paymentDayOfMonth);
                        let lastPayment = contract.lastPaymentDate ? new Date(contract.lastPaymentDate).toLocaleDateString("vi-VN") : "-";

                        let contractData = {
                            id: contract.id,
                            title: p.title,
                            status: contract.status,
                            endDate: contract.endDate,
                            monthlyRent: contract.monthlyRent,
                            renterName: renterInfo.name,
                            nextPaymentDate: nextPayment
                        };
                        allContracts.push(contractData);
                        let terminateBtn = '';
                        if (contract.status === 1) {
                        terminateBtn = `<button class="terminate-btn" onclick="showTerminateModal(${contract.id}, '${p.title}', '${renterInfo.name}')"><i class="fas fa-ban"></i> Chấm dứt</button>`;
                        }
                        let extendBtn = '';
                        if (contract.status === 1) {
                            extendBtn = `<button class="extend-btn" onclick="showExtendModal(${contract.id}, '${p.title}', '${renterInfo.name}')"><i class="fas fa-sync-alt"></i> Gia hạn</button>`;
                        }

                        let row = `
                            <tr data-contract-id="${contract.id}" data-status="${contract.status}" data-title="${p.title.toLowerCase()}" data-renter="${renterInfo.name.toLowerCase()}">
                                <td><strong>${p.title}</strong></td>
                                 <td>
                                    <div class="contact-info">
                                        <span><i class="fas fa-user"></i> ${renterInfo.name}</span>
                                    </div>
                                </td>
                                <td>
                                    <span class="phone"><i class="fas fa-phone"></i> ${renterInfo.phoneNumber}</span>
                                </td>
                                <td class="price">${monthlyRent}</td>
                                <td>${startDate}</td>
                                <td>${endDate}</td>
                               <td>${getDaysRemainingHTML(daysRemaining)}</td>
                                <td>
                                    <span class="status">
                                        ${contractStatus}
                                    </span>
                                </td>
                                <td>
                                    <span class="fas fa-${contract.paymentCycle === 0 ? 'calendar-alt' : contract.paymentCycle === 1 ? 'calendar-check' : 'calendar-day'}"></span>
                                    ${contract.paymentCycle === 0 ? 'Hàng tháng' : contract.paymentCycle === 1 ? 'Hàng quý' : 'Hàng năm'}
                                </td>

                                <td>
                                    <span class="fas fa-calendar-day"></span>
                                ${contract.paymentDayOfMonth ? contract.paymentDayOfMonth + " ngày" : "Không xác định"}
                                </td>
                                <td>${lastPayment}</td>
                                <td>
                                    <div class="payment-section">
                                        <span id="nextPayment-${contract.id}">${nextPayment}</span>
                                        <input type="checkbox" class="payment-checkbox"
                                            onclick="showPaymentModal(event, ${contract.id}, '${nextPayment}', ${contract.paymentCycle})">
                                        <small id="lateNote-${contract.id}" class="late-note"></small>
                                    </div>
                                </td>
                                <td>
                                ${terminateBtn}
                                ${extendBtn}
                                </td>

                            </tr>
                        `;
                        tbody.insertAdjacentHTML("beforeend", row);
                    }
                }

                filterContracts(currentFilter);
            }

            function getDaysRemainingHTML(daysText) {
                if (daysText === "-" || daysText === "Đã hết hạn") {
                    return `<span class="days-remaining expired">${daysText}</span>`;
                }

                let days = parseInt(daysText);
                let className = days <= 30 ? 'urgent' : 'safe';

                return `<span class="days-remaining ${className}">${daysText}</span>`;
            }

            function calculateDaysRemaining(endDate) {
                if (!endDate) return "-";
                let now = new Date();
                let end = new Date(endDate);
                let diff = Math.ceil((end - now) / (1000 * 60 * 60 * 24));
                return diff >= 0 ? diff + " ngày" : "Đã hết hạn";
            }

            function calculateNextPaymentDate(startDate, cycle, paymentDay) {
                if (!startDate) return "-";
                let now = new Date();
                let next = new Date(startDate);

                while (true) {
                    if (cycle === 0) next.setMonth(next.getMonth() + 1);
                    else if (cycle === 1) next.setMonth(next.getMonth() + 3);
                    else if (cycle === 2) next.setFullYear(next.getFullYear() + 1);

                    next.setDate(paymentDay);

                    if (next > now) break;
                }
                return next.toLocaleDateString("vi-VN");
            }

            function addMonths(date, months) {
                let d = new Date(date);
                d.setMonth(d.getMonth() + months);
                return d;
            }

            function getCycleMonths(cycle) {
                if (cycle === 0) return 1; // Monthly
                if (cycle === 1) return 3; // Quarterly
                if (cycle === 2) return 12; // Yearly
                return 1;
            }

            function updateStats() {
                let totalContracts = allContracts.length;
                let activeContracts = allContracts.filter(c => c.status === 1).length;
                let expiringSoon = allContracts.filter(c => {
                    let days = Math.ceil((new Date(c.endDate) - new Date()) / (1000 * 60 * 60 * 24));
                    return days <= 30 && days > 0;
                }).length;
                let totalRevenue = allContracts
                    .filter(c => c.status === 1)
                    .reduce((sum, c) => sum + c.monthlyRent, 0);

                document.getElementById('totalContracts').textContent = totalContracts;
                document.getElementById('activeContracts').textContent = activeContracts;
                document.getElementById('expiringSoon').textContent = expiringSoon;
                document.getElementById('totalRevenue').textContent = (totalRevenue / 1000000).toFixed(1) + 'M';
            }

            // Search functionality
            document.getElementById('searchInput').addEventListener('input', function(e) {
                let searchTerm = e.target.value.toLowerCase();
                let rows = document.querySelectorAll('#contractsTableBody tr');

                rows.forEach(row => {
                    let title = row.dataset.title || '';
                    let renter = row.dataset.renter || '';
                    let isVisible = title.includes(searchTerm) || renter.includes(searchTerm);
                    row.style.display = isVisible ? '' : 'none';
                });
            });

            // Filter functionality
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentFilter = this.dataset.filter;
                    filterContracts(currentFilter);
                });
            });

            function filterContracts(filter) {
                let rows = document.querySelectorAll('#contractsTableBody tr');

                rows.forEach(row => {
                    let status = parseInt(row.dataset.status);
                    let contractId = row.dataset.contractId;
                    let contract = allContracts.find(c => c.id == contractId);

                    let shouldShow = false;

                    if (filter === 'all') {
                        shouldShow = true;
                    } else if (filter === 'active') {
                        shouldShow = status === 1;
                    } else if (filter === 'terminated') {
                        shouldShow = status === 2;
                    } else if (filter === 'expiring') {
                        if (contract) {
                            let days = Math.ceil((new Date(contract.endDate) - new Date()) / (1000 * 60 * 60 * 24));
                            shouldShow = days <= 30 && days > 0;
                        }
                    }

                    row.style.display = shouldShow ? '' : 'none';
                });
            }
             // Modal functionality
            function showPaymentModal(e, contractId, nextPaymentDate, cycle) {
                e.preventDefault();
                e.stopPropagation();
                let modal = document.getElementById('paymentModal');
                let details = document.getElementById('paymentDetails');

                details.innerHTML = `
                    <p><strong>Mã hợp đồng:</strong> ${contractId}</p>
                    <p><strong>Ngày thanh toán:</strong> ${nextPaymentDate}</p>
                    <p><strong>Chu kỳ:</strong> ${cycle === 0 ? 'Hàng tháng' : cycle === 1 ? 'Hàng quý' : 'Hàng năm'}</p>
                    <p style="color: #dc3545; margin-top: 15px;"><i class="fas fa-info-circle"></i> Bạn có chắc chắn muốn xác nhận thanh toán?</p>
                `;

                modal.style.display = 'block';

                document.getElementById('confirmPayment').onclick = (ev) => {
                    ev.preventDefault();
                    handlePayment(contractId, nextPaymentDate, cycle);
                };
                document.getElementById('cancelPayment').onclick = (ev) => {
                    ev.preventDefault();    
                    modal.style.display = 'none';
                };
            }

            // Terminate modal functionality
            function showTerminateModal(contractId, propertyTitle, renterName) {
                let modal = document.getElementById('terminateModal');
                let details = document.getElementById('terminateDetails');
                details.innerHTML = `
                    <p><strong>Mã hợp đồng:</strong> ${contractId}</p>
                    <p><strong>Thuộc tính:</strong> ${propertyTitle}</p>
                    <p><strong>Người thuê:</strong> ${renterName}</p>
                    <p style="color: #dc3545; margin-top: 15px;"><i class="fas fa-info-circle"></i> Bạn có chắc chắn muốn chấm dứt hợp đồng này?</p>
                `;
                modal.style.display = 'block';

                document.getElementById('confirmTerminate').onclick = async (ev) => {
                    ev.preventDefault();
                    await handleTerminate(contractId);
                };
                document.getElementById('cancelTerminate').onclick = (ev) => {
                    ev.preventDefault();
                    modal.style.display = 'none';
                };
            }

            function showExtendModal(contractId, propertyTitle, renterName) {
                let modal = document.getElementById('extendModal');
                let details = document.getElementById('extendDetails');
                details.innerHTML = `
                    <p><strong>Mã hợp đồng:</strong> ${contractId}</p>
                    <p><strong>Thuộc tính:</strong> ${propertyTitle}</p>
                    <p><strong>Người thuê:</strong> ${renterName}</p>
                    <p style="color: #007bff; margin-top: 15px;"><i class="fas fa-info-circle"></i> Nhập thông tin gia hạn hợp đồng.</p>
                `;
                modal.style.display = 'block';

                document.getElementById('confirmExtend').onclick = async (ev) => {
                    ev.preventDefault();
                    await handleExtend(contractId);
                };
                document.getElementById('cancelExtend').onclick = (ev) => {
                    ev.preventDefault();
                    modal.style.display = 'none';
                };
            }


            // Close modal when clicking X or outside
            document.querySelector('.close').onclick = () => document.getElementById('paymentModal').style.display = 'none';
            window.onclick = (e) => {
            let modal = document.getElementById('paymentModal');
            if (e.target === modal) modal.style.display = 'none';
            // Bỏ fetchContracts() ở đây
            }

            async function handlePayment(contractId, nextPaymentDate, cycle) {
                let now = new Date();
                let due = new Date(nextPaymentDate);

                if (now < due) {
                    alert("Chưa đến hạn thanh toán, không thể tick!");
                    return;
                }

                try {
                    const res = await fetch(`https://localhost:7031/api/owner/rental-contracts/${contractId}/pay`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + token
                        }
                    });

                    if (!res.ok) {
                        const err = await res.json();
                        alert("Thanh toán thất bại: " + (err.message || res.status));
                        return;
                    }

                    const data = await res.json();
                    document.getElementById('paymentModal').style.display = 'none';
                    alert("Thanh toán thành công!\nNgày thanh toán tiếp theo: " + new Date(data.nextPaymentDate).toLocaleDateString("vi-VN")
                        + (data.lateDays > 0 ? `\nTrễ ${data.lateDays} ngày` : "")
                    );

                    // reload lại table
                    await fetchContracts();
                } catch (e) {
                    console.error(e);
                    alert("Lỗi kết nối server");
                }
            }

                async function handleTerminate(contractId) {
                    try {
                        const res = await fetch(`https://localhost:7031/api/owner/rental-contracts/${contractId}/terminate`, {
                            method: "PUT",
                            headers: {
                                "Content-Type": "application/json",
                                "Authorization": "Bearer " + token
                            }
                        });

                        if (!res.ok) {
                            const err = await res.json();
                            alert("Chấm dứt hợp đồng thất bại: " + (err.message || res.status));
                            return;
                        }

                        document.getElementById('terminateModal').style.display = 'none';
                        alert("Chấm dứt hợp đồng thành công!");
                        await fetchContracts();
                    } catch (e) {
                        console.error(e);
                        alert("Lỗi kết nối server");
                    }
                }

            async function handleExtend(contractId) {
                let rent = parseFloat(document.getElementById('proposedRent').value);
                let cycle = parseInt(document.getElementById('proposedCycle').value);
                let day = parseInt(document.getElementById('proposedDay').value);

                if (!rent || rent <= 0) {
                    alert("Giá thuê không hợp lệ");
                    return;
                }
                if (day < 1 || day > 28) {
                    alert("Ngày thanh toán phải từ 1 đến 28");
                    return;
                }

                try {
                    const res = await fetch(`https://localhost:7031/api/owner/rental-contracts/${contractId}/extend`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + token
                        },
                        body: JSON.stringify({
                            proposedMonthlyRent: rent,
                            proposedPaymentCycle: cycle,
                            proposedPaymentDayOfMonth: day
                        })
                    });

                    if (!res.ok) {
                        const err = await res.json();
                        alert("Gia hạn hợp đồng thất bại: " + (err.message || res.status));
                        return;
                    }

                    document.getElementById('extendModal').style.display = 'none';
                    alert("Gửi yêu cầu gia hạn thành công!");
                    await fetchContracts();
                } catch (e) {
                    console.error(e);
                    alert("Lỗi kết nối server");
                }
            }

            fetchContracts();
        </script>
    </body>
    </html>

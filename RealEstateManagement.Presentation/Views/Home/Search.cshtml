@{
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
    ViewData["Title"] = "Tìm kiếm bất động sản";
}

<link rel="stylesheet" href="~/css/search.css">



<div class="search-container">
    <!-- Search Header -->
    <div class="search-header">
        <h1>Tìm kiếm bất động sản</h1>
        <p>Khám phá những ngôi nhà tuyệt vời phù hợp với nhu cầu của bạn</p>
    </div>

    <!-- Search Bar -->
    <div class="search-bar">
        <form id="searchForm" class="search-form">
            <div class="form-group">
                <label for="searchType">Loại bất động sản</label>
                <select id="searchType" name="type">
                    <option value="">Tất cả loại</option>
                </select>
            </div>
            <div class="form-group">
                <label for="searchProvince">Tỉnh/Thành phố</label>
                <select id="searchProvince" name="province">
                    <option value="">Tất cả tỉnh</option>
                </select>
            </div>
            <div class="form-group">
                <label for="searchKeyword">Từ khóa</label>
                <input type="text" id="searchKeyword" name="keyword" placeholder="Nhập từ khóa tìm kiếm...">
            </div>
            <button type="submit" class="search-btn">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                Tìm kiếm
            </button>
        </form>
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
        <div class="filter-header">
            <h3>Bộ lọc nâng cao</h3>
            <button type="button" class="filter-toggle" id="filterToggle">Hiện bộ lọc</button>
        </div>
        <div class="filter-content" id="filterContent" style="display: none;">
            <div class="filter-group">
                <label>Giá (triệu VNĐ/tháng)</label>
                <div class="dual-range-container">
                    <div class="dual-range-track">
                        <div class="dual-range-filled" id="priceRangeFilled"></div>
                    </div>
                    <input type="range" id="minPrice" name="minPrice" min="0" max="50" value="0" step="1">
                    <input type="range" id="maxPrice" name="maxPrice" min="0" max="50" value="50" step="1">
                    <div class="range-values">
                        <span id="minPriceValue">0 triệu</span>
                        <span id="maxPriceValue">50 triệu</span>
                    </div>
                </div>
            </div>
            <div class="filter-group">
                <label>Diện tích (m²)</label>
                <div class="dual-range-container">
                    <div class="dual-range-track">
                        <div class="dual-range-filled" id="areaRangeFilled"></div>
                    </div>
                    <input type="range" id="minArea" name="minArea" min="0" max="500" value="0" step="10">
                    <input type="range" id="maxArea" name="maxArea" min="0" max="500" value="500" step="10">
                    <div class="range-values">
                        <span id="minAreaValue">0 m²</span>
                        <span id="maxAreaValue">500 m²</span>
                    </div>
                </div>
            </div>
            <div class="filter-group">
                <label>Số phòng</label>
                <div class="dual-range-container">
                    <div class="dual-range-track">
                        <div class="dual-range-filled" id="roomRangeFilled"></div>
                    </div>
                    <input type="range" id="minRoom" name="minRoom" min="0" max="10" value="0" step="1">
                    <input type="range" id="maxRoom" name="maxRoom" min="0" max="10" value="10" step="1">
                    <div class="range-values">
                        <span id="minRoomValue">0</span>
                        <span id="maxRoomValue">10</span>
                    </div>
                </div>
            </div>
            <div class="filter-group">
                <label for="searchWard">Quận/Huyện</label>
                <select id="searchWard" name="ward">
                    <option value="">Tất cả quận/huyện</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="searchStreet">Đường/Phố</label>
                <select id="searchStreet" name="street">
                    <option value="">Tất cả đường/phố</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="results-section">
        <div class="results-header">
            <div class="results-count">
                Tìm thấy <strong id="totalResults">0</strong> bất động sản
            </div>
            <div class="sort-options">
                <label for="sortBy">Sắp xếp theo:</label>
                <select id="sortBy" name="sortBy">
                    <option value="newest">Mới nhất</option>
                    <option value="price_asc">Giá tăng dần</option>
                    <option value="price_desc">Giá giảm dần</option>
                    <option value="area_asc">Diện tích tăng dần</option>
                    <option value="area_desc">Diện tích giảm dần</option>
                </select>
            </div>
        </div>

        <!-- Properties Grid -->
        <div id="propertiesContainer">
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>Đang tải dữ liệu...</p>
            </div>
        </div>

        <!-- Pagination -->
        <div class="pagination" id="pagination" style="display: none;">
            <button class="pagination-btn" id="prevPage" disabled>Trước</button>
            <div id="pageNumbers"></div>
            <button class="pagination-btn" id="nextPage">Tiếp</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/helper.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const apiBaseUrl = 'https://localhost:7031/api';
            const urlBase = 'https://localhost:7031';
            let currentPage = 1;
            let currentPageSize = 12;
            let totalPages = 0;
            let totalItems = 0;
            let currentFilters = {};

            // Initialize
            loadProvinces();
            loadPropertyTypes();
            loadAmenities();
            setupDualRangeSliders();

            // Filter toggle
            document.getElementById('filterToggle').addEventListener('click', function() {
                const filterContent = document.getElementById('filterContent');
                const isVisible = filterContent.style.display !== 'none';
                filterContent.style.display = isVisible ? 'none' : 'grid';
                this.textContent = isVisible ? 'Hiện bộ lọc' : 'Ẩn bộ lọc';
                this.classList.toggle('active');
            });

            // Search form submit
            document.getElementById('searchForm').addEventListener('submit', function(e) {
                e.preventDefault();
                currentPage = 1;
                performSearch();
            });

            // Province change
            document.getElementById('searchProvince').addEventListener('change', function() {
                const provinceId = this.value;
                loadWards(provinceId);
                document.getElementById('searchWard').innerHTML = '<option value="">Tất cả quận/huyện</option>';
                document.getElementById('searchStreet').innerHTML = '<option value="">Tất cả đường/phố</option>';
            });

            // Ward change
            document.getElementById('searchWard').addEventListener('change', function() {
                const wardId = this.value;
                loadStreets(wardId);
                document.getElementById('searchStreet').innerHTML = '<option value="">Tất cả đường/phố</option>';
            });

            // Sort change
            document.getElementById('sortBy').addEventListener('change', function() {
                performSearch();
            });

            // Load provinces
            async function loadProvinces() {
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/provinces`);
                    const provinces = await response.json();
                    const provinceSelect = document.getElementById('searchProvince');
                    provinces.forEach(province => {
                        const option = document.createElement('option');
                        option.value = province.id;
                        option.textContent = province.name;
                        provinceSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading provinces:', error);
                }
            }

            // Load wards for a specific province
            async function loadWards(provinceId) {
                if (!provinceId) return;
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/wards/${provinceId}`);
                    const wards = await response.json();
                    const wardSelect = document.getElementById('searchWard');
                    wardSelect.innerHTML = '<option value="">Tất cả quận/huyện</option>';
                    wards.forEach(ward => {
                        const option = document.createElement('option');
                        option.value = ward.id;
                        option.textContent = ward.name;
                        wardSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading wards:', error);
                }
            }

            // Load streets for a specific ward
            async function loadStreets(wardId) {
                if (!wardId) return;
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/streets/${wardId}`);
                    const streets = await response.json();
                    const streetSelect = document.getElementById('searchStreet');
                    streetSelect.innerHTML = '<option value="">Tất cả đường/phố</option>';
                    streets.forEach(street => {
                        const option = document.createElement('option');
                        option.value = street.id;
                        option.textContent = street.name;
                        streetSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading streets:', error);
                }
            }

            // Load property types
            async function loadPropertyTypes() {
                try {
                    const response = await fetch(`${apiBaseUrl}/PropertyType/GetAllPropertyTypes`);
                    const propertyTypes = await response.json();
                    const typeSelect = document.getElementById('searchType');
                    typeSelect.innerHTML = '<option value="">Tất cả loại</option>';
                    propertyTypes.forEach(type => {
                        const option = document.createElement('option');
                        option.value = type.name;
                        option.textContent = type.name;
                        typeSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading property types:', error);
                    document.getElementById('searchType').innerHTML = '<option value="">Không thể tải loại</option>';
                }
            }

            // Load amenities
            async function loadAmenities() {
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/amenities`);
                    const amenities = await response.json();
                    window.amenities = amenities;
                } catch (error) {
                    console.error('Error loading amenities:', error);
                }
            }

            // Setup dual-range sliders
            function setupDualRangeSliders() {
                const sliders = [
                    {
                        minId: 'minPrice',
                        maxId: 'maxPrice',
                        filledId: 'priceRangeFilled',
                        minValueId: 'minPriceValue',
                        maxValueId: 'maxPriceValue',
                        min: 0,
                        max: 50,
                        step: 1,
                        format: value => `${value} triệu`
                    },
                    {
                        minId: 'minArea',
                        maxId: 'maxArea',
                        filledId: 'areaRangeFilled',
                        minValueId: 'minAreaValue',
                        maxValueId: 'maxAreaValue',
                        min: 0,
                        max: 500,
                        step: 10,
                        format: value => `${value} m²`
                    },
                    {
                        minId: 'minRoom',
                        maxId: 'maxRoom',
                        filledId: 'roomRangeFilled',
                        minValueId: 'minRoomValue',
                        maxValueId: 'maxRoomValue',
                        min: 0,
                        max: 10,
                        step: 1,
                        format: value => value
                    }
                ];

                sliders.forEach(slider => {
                    const minInput = document.getElementById(slider.minId);
                    const maxInput = document.getElementById(slider.maxId);
                    const filledTrack = document.getElementById(slider.filledId);
                    const minValueSpan = document.getElementById(slider.minValueId);
                    const maxValueSpan = document.getElementById(slider.maxValueId);

                    // Initialize values
                    minValueSpan.textContent = slider.format(minInput.value);
                    maxValueSpan.textContent = slider.format(maxInput.value);
                    updateFilledTrack(slider);

                    // Event listeners
                    minInput.addEventListener('input', () => {
                        if (parseFloat(minInput.value) > parseFloat(maxInput.value)) {
                            minInput.value = maxInput.value;
                        }
                        minValueSpan.textContent = slider.format(minInput.value);
                        maxValueSpan.textContent = slider.format(maxInput.value);
                        updateFilledTrack(slider);
                        debounceSearch();
                    });

                    maxInput.addEventListener('input', () => {
                        if (parseFloat(maxInput.value) < parseFloat(minInput.value)) {
                            maxInput.value = minInput.value;
                        }
                        minValueSpan.textContent = slider.format(minInput.value);
                        maxValueSpan.textContent = slider.format(maxInput.value);
                        updateFilledTrack(slider);
                        debounceSearch();
                    });

                    // Update filled track
                    function updateFilledTrack(slider) {
                        const minValue = parseFloat(minInput.value);
                        const maxValue = parseFloat(maxInput.value);
                        const range = slider.max - slider.min;
                        const leftPercent = ((minValue - slider.min) / range) * 100;
                        const rightPercent = ((maxValue - slider.min) / range) * 100;
                        filledTrack.style.left = `${leftPercent}%`;
                        filledTrack.style.width = `${rightPercent - leftPercent}%`;
                    }
                });
            }

            // Debounce search to limit API calls
            let debounceTimeout;
            function debounceSearch() {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(performSearch, 300);
            }

            // Helper function để xử lý ảnh
            function getPropertyImageUrl(property) {
                const defaultImage = '/image/no-image.png';
                if (!property.imageUrls || !Array.isArray(property.imageUrls) || property.imageUrls.length === 0) {
                    if (property.primaryImageUrl && property.primaryImageUrl.trim() !== '') {
                        return property.primaryImageUrl.includes('http') ? property.primaryImageUrl : `https://localhost:7031${property.primaryImageUrl}`;
                    }
                    return defaultImage;
                }
                let selectedImage = property.imageUrls.find(img => typeof img === 'object' && img.isPrimary === true);
                if (!selectedImage) selectedImage = property.imageUrls[0];
                if (selectedImage) {
                    if (typeof selectedImage === 'object' && selectedImage.url) {
                        return selectedImage.url.includes('http') ? selectedImage.url : `https://localhost:7031${selectedImage.url}`;
                    } else if (typeof selectedImage === 'string' && selectedImage.trim() !== '') {
                        return selectedImage.includes('http') ? selectedImage : `https://localhost:7031${selectedImage}`;
                    }
                }
                if (property.primaryImageUrl && property.primaryImageUrl.trim() !== '') {
                    return property.primaryImageUrl.includes('http') ? property.primaryImageUrl : `https://localhost:7031${property.primaryImageUrl}`;
                }
                return defaultImage;
            }

            // Handle image loading errors
            function handleImageError(img) {
                img.src = '/image/no-image.png';
                img.alt = 'Không có ảnh';
                img.onerror = null;
            }

            // Perform search
            async function performSearch() {
                const searchParams = new URLSearchParams();
                searchParams.append('page', currentPage);
                searchParams.append('pageSize', currentPageSize);

                const type = document.getElementById('searchType').value;
                const province = document.getElementById('searchProvince').value;
                const ward = document.getElementById('searchWard').value;
                const street = document.getElementById('searchStreet').value;
                const keyword = document.getElementById('searchKeyword').value;
                const minPrice = document.getElementById('minPrice').value;
                const maxPrice = document.getElementById('maxPrice').value;
                const minArea = document.getElementById('minArea').value;
                const maxArea = document.getElementById('maxArea').value;
                const minRoom = document.getElementById('minRoom').value;
                const maxRoom = document.getElementById('maxRoom').value;
                const sortBy = document.getElementById('sortBy').value;

                if (type && type.trim() !== '') searchParams.append('type', type);
                if (province) searchParams.append('provinces', province);
                if (ward) searchParams.append('wards', ward);
                if (street) searchParams.append('streets', street);

                // Xử lý tìm kiếm theo từ khóa (có thể là địa chỉ hoặc title)
                if (keyword && keyword.trim() !== '') {
                    // Clean và normalize từ khóa
                    const cleanKeyword = keyword.trim().replace(/\s+/g, ' ');
                    console.log('Original keyword:', keyword);
                    console.log('Clean keyword:', cleanKeyword);

                    // Nếu từ khóa chứa dấu phẩy, có thể là địa chỉ đầy đủ
                    if (cleanKeyword.includes(',')) {
                        console.log('Keyword contains commas, might be full address');
                        // Gửi cả keyword và address để API có thể xử lý tốt hơn
                        searchParams.append('keyword', cleanKeyword);
                        searchParams.append('address', cleanKeyword);
                    } else {
                        // Từ khóa đơn giản, chỉ gửi keyword
                        searchParams.append('keyword', cleanKeyword);
                    }
                }

                if (minPrice && minPrice !== '0') searchParams.append('minPrice', minPrice);
                if (maxPrice && maxPrice !== '50') searchParams.append('maxPrice', maxPrice);
                if (minArea && minArea !== '0') searchParams.append('minArea', minArea);
                if (maxArea && maxArea !== '500') searchParams.append('maxArea', maxArea);
                if (minRoom && minRoom !== '0') searchParams.append('minRoom', minRoom);
                if (maxRoom && maxRoom !== '10') searchParams.append('maxRoom', maxRoom);
                if (sortBy && sortBy !== 'newest') searchParams.append('sortBy', sortBy);

                currentFilters = Object.fromEntries(searchParams.entries());

                // Debug log for search parameters
                console.log('Search parameters:', Object.fromEntries(searchParams.entries()));
                console.log('Search URL:', `${apiBaseUrl}/Property/homepage-paginated?${searchParams.toString()}`);

                showLoading();

                try {
                    const response = await fetch(`${apiBaseUrl}/Property/homepage-paginated?${searchParams.toString()}`);
                    const result = await response.json();

                    // Debug log for API response
                    console.log('API Response:', result);
                    console.log('Total items:', result.totalItems);
                    console.log('Data length:', result.data ? result.data.length : 0);

                    if (response.ok) {
                        displayResults(result);
                    } else {
                        showError(result.message || 'Có lỗi xảy ra khi tìm kiếm');
                    }
                } catch (error) {
                    console.error('Search error:', error);
                    showError('Không thể kết nối đến server');
                }
            }

            // Display results
            function displayResults(result) {
                const container = document.getElementById('propertiesContainer');
                if (!result.data || result.data.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <p>Không tìm thấy bất động sản nào phù hợp với tiêu chí tìm kiếm</p>
                        </div>
                    `;
                    document.getElementById('pagination').style.display = 'none';
                    document.getElementById('totalResults').textContent = '0';
                    return;
                }

                totalItems = result.totalItems || result.data.length;
                totalPages = Math.ceil(totalItems / currentPageSize);
                document.getElementById('totalResults').textContent = totalItems;

                // Debug log for first property to understand data structure
                if (result.data.length > 0) {
                    console.log('First property data structure:', result.data[0]);
                    console.log('All properties:', result.data);
                }

                const propertiesHtml = result.data.map(property => createPropertyCard(property)).join('');
                container.innerHTML = propertiesHtml;

                renderPagination();
                document.getElementById('pagination').style.display = 'flex';
            }

            // Create property card
            function createPropertyCard(property) {
                // Sử dụng cả thuộc tính cũ và mới để đảm bảo tương thích
                const propertyType = property.propertyTypeName || property.type || 'N/A';
                const imageUrl = getPropertyImageUrl(property);

                // Xây dựng địa chỉ đầy đủ từ các thành phần
                let fullAddress = '';

                // Kiểm tra và xử lý từng trường địa chỉ
                if (property.detailedAddress && property.detailedAddress.trim() !== '') {
                    // Kiểm tra xem detailedAddress có phải là số đơn giản không
                    if (/^\d+$/.test(property.detailedAddress.trim())) {
                        console.warn(`Property ${property.id}: detailedAddress is just a number: ${property.detailedAddress}`);
                        // Nếu chỉ là số, thử tìm địa chỉ đầy đủ từ các trường khác
                        if (property.streetName && property.wardName && property.provinceName) {
                            fullAddress = `${property.detailedAddress} ${property.streetName}, ${property.wardName}, ${property.provinceName}`;
                            console.log(`Property ${property.id}: Combining number with streetName+wardName+provinceName: ${fullAddress}`);
                        } else {
                            fullAddress = property.detailedAddress;
                        }
                    } else {
                        fullAddress = property.detailedAddress;
                        console.log(`Property ${property.id}: Using detailedAddress: ${fullAddress}`);
                    }
                } else if (property.streetName && property.wardName && property.provinceName) {
                    fullAddress = `${property.streetName}, ${property.wardName}, ${property.provinceName}`;
                    console.log(`Property ${property.id}: Using streetName+wardName+provinceName: ${fullAddress}`);
                } else if (property.street && property.ward && property.province) {
                    fullAddress = `${property.street}, ${property.ward}, ${property.province}`;
                    console.log(`Property ${property.id}: Using street+ward+province: ${fullAddress}`);
                } else if (property.location && property.location.trim() !== '') {
                    fullAddress = property.location;
                    console.log(`Property ${property.id}: Using location: ${fullAddress}`);
                } else if (property.address && property.address.trim() !== '') {
                    fullAddress = property.address;
                    console.log(`Property ${property.id}: Using address: ${fullAddress}`);
                } else if (property.streetName && property.streetName.trim() !== '') {
                    fullAddress = property.streetName;
                    console.log(`Property ${property.id}: Using only streetName: ${fullAddress}`);
                } else if (property.wardName && property.wardName.trim() !== '') {
                    fullAddress = property.wardName;
                    console.log(`Property ${property.id}: Using only wardName: ${fullAddress}`);
                } else if (property.provinceName && property.provinceName.trim() !== '') {
                    fullAddress = property.provinceName;
                    console.log(`Property ${property.id}: Using only provinceName: ${fullAddress}`);
                } else {
                    fullAddress = 'N/A';
                    console.log(`Property ${property.id}: No address found, using N/A`);
                }

                // Debug log để kiểm tra dữ liệu
                console.log('Property data:', {
                    id: property.id,
                    title: property.title,
                    detailedAddress: property.detailedAddress,
                    streetName: property.streetName,
                    wardName: property.wardName,
                    provinceName: property.provinceName,
                    street: property.street,
                    ward: property.ward,
                    province: property.province,
                    location: property.location,
                    address: property.address,
                    fullAddress: fullAddress,
                    promotionPackageName: property.promotionPackageName,
                    isPromoted: property.isPromoted
                });

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.detailedAddress && property.detailedAddress.length < 10) {
                    console.warn(`Property ${property.id}: detailedAddress seems too short: "${property.detailedAddress}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.streetName && property.streetName.length < 5) {
                    console.warn(`Property ${property.id}: streetName seems too short: "${property.streetName}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.wardName && property.wardName.length < 5) {
                    console.warn(`Property ${property.id}: wardName seems too short: "${property.wardName}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.provinceName && property.provinceName.length < 5) {
                    console.warn(`Property ${property.id}: provinceName seems too short: "${property.provinceName}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.address && property.address.length < 5) {
                    console.warn(`Property ${property.id}: address seems too short: "${property.address}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.location && property.location.length < 5) {
                    console.warn(`Property ${property.id}: location seems too short: "${property.location}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.street && property.street.length < 5) {
                    console.warn(`Property ${property.id}: street seems too short: "${property.street}"`);
                }

                // Kiểm tra xem có phải địa chỉ bị cắt ngắn không
                if (property.ward && property.ward.length < 5) {
                    console.warn(`Property ${property.id}: ward seems too short: "${property.ward}"`);
                }



                // Tạo HTML string cho property card với thông tin mới
                // Tạo promotion badge dựa trên promotionPackageName
                let promotionBadge = '';
                if (property.promotionPackageName && property.promotionPackageName.trim() !== '') {
                    promotionBadge = `<div class="promotion-badge">${property.promotionPackageName}</div>`;
                    console.log(`Property ${property.id}: Promotion badge created with: ${property.promotionPackageName}`);
                } else {
                    console.log(`Property ${property.id}: No promotion package name (${property.promotionPackageName})`);
                }

                // Xác định URL chi tiết dựa trên quyền sở hữu
                const token = localStorage.getItem("authToken");
                let isOwner = false;
                let detailUrl = `/Home/Detail/${property.id}`;

                if (token) {
                    const userId = getUserIdFromToken(token);
                    if (userId && property.landlordId && userId === property.landlordId) {
                        isOwner = true;
                        detailUrl = `/PostProperty/DetailProperty/${property.id}`;
                    }
                }

                return `
                    <div class="property-card">
                        <div class="property-image-container">
                            <img
                                onerror="handleImageError(this)"
                                src="${imageUrl}"
                                alt="${property.title || 'Bất động sản'}"
                                class="property-image"
                            >
                            <div class="property-overlay"></div>

                            <!-- Promotion Badge -->
                            ${promotionBadge}

                            <!-- Property Actions -->
                            <div class="property-actions">
                                <button
                                    id="btnFavourite-${property.id}"
                                    onclick="updateFavorite(${property.id}, ${property.isFavorite || false})"
                                    class="action-btn heart ${property.isFavorite ? 'active' : ''}"
                                    title="Yêu thích"
                                >
                                    ${property.isFavorite
                                        ? `<svg id="heart-icon-${property.id}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 7.284a5.754 5.754 0 00-9.406-1.045L12 7.158l-.346-.92A5.754 5.754 0 002.248 7.284c-1.1 2.238-.432 4.92 1.528 6.596l7.04 6.211a.75.75 0 001.368 0l7.04-6.211c1.96-1.676 2.628-4.358 1.528-6.596z" />
                                           </svg>`
                                        : `<svg id="heart-icon-${property.id}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 7.284a5.754 5.754 0 00-9.406-1.045L12 7.158l-.346-.92A5.754 5.754 0 002.248 7.284c-1.1 2.238-.432 4.92 1.528 6.596l7.04 6.211a.75.75 0 001.368 0l7.04-6.211c1.96-1.676 2.628-4.358 1.528-6.596z" />
                                           </svg>`
                                    }
                                </button>
                                <button
                                    id="btn-compare-${property.id}"
                                    onclick="addToCompare(${property.id})"
                                    class="action-btn compare"
                                    title="So sánh"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
                                    </svg>
                                </button>
                                <button
                                    id="interest-${property.id}"
                                    onclick="clickInterest(${property.id},${property.isInterested || false},${property.interestedStatus || 0},${property.isReminderRenterConfirmInterested || 0},${property.interestedId || 0})"
                                    class="action-btn interest"
                                    title="Quan tâm"
                                >
                                    <i class="fa-solid fa-square-plus ${property.isInterested && property.interestedStatus != 1 ? 'text-red-500' : ''}"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Property Content -->
                        <div class="property-content">
                            <div class="property-header">
                                <div class="property-type-badge">
                                    <i class="fas fa-building text-blue-500 mr-2"></i>
                                    ${propertyType}
                                </div>
                                <div class="property-status">
                                    ${StatusInterest(property)}
                                </div>
                            </div>

                            <h3
                                onclick="window.location.href='${detailUrl}'"
                                class="property-title"
                                title="${property.title || 'Không có tiêu đề'}"
                            >
                                ${property.title || 'Không có tiêu đề'}
                            </h3>

                            <div class="property-price">
                                ${property.price ? property.price.toLocaleString('vi-VN') : '0'} <span class="text-sm font-normal">triệu/tháng</span>
                            </div>

                            <div class="property-location">
                                <i class="fas fa-map-marker-alt location-icon"></i>
                                <div class="location-text">
                                    ${property.area || 0} m² · ${fullAddress}
                                </div>
                            </div>

                            <p class="property-description" title="${property.description || ''}">
                                ${property.description || 'Không có mô tả'}
                            </p>
                        </div>

                        <!-- Property Footer -->
                        <div class="property-footer">
                            <div class="landlord-info">
                                <div
                                    class="landlord-avatar"
                                    onclick="window.location.href='/Home/Landlord/${property.landlordId || 0}'"
                                    title="Xem thông tin chủ nhà"
                                >
                                    <img
                                        onerror="handleImageError(this)"
                                        src="${property.landlordProfilePictureUrl?.includes('http') ? property.landlordProfilePictureUrl : (property.landlordProfilePictureUrl ? urlBase + property.landlordProfilePictureUrl : '/image/default-avatar.png')}"
                                        alt="Ảnh chủ nhà"
                                        class="w-full h-full object-cover"
                                    >
                                </div>
                                <div class="landlord-details">
                                    <div
                                        class="landlord-name"
                                        onclick="window.location.href='/Home/Landlord/${property.landlordId || 0}'"
                                        title="Xem thông tin chủ nhà"
                                    >
                                        ${property.landlordName || 'Không xác định'}
                                    </div>
                                    <div class="landlord-date">
                                        ${timeAgo(property.createdAt)}
                                    </div>
                                </div>
                            </div>

                            <div class="property-rating">
                                <div class="rating-item">
                                    <span class="rating-stars">
                                        ${property.rating && property.rating > 0 ? `
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" style="width:14px;height:14px" viewBox="0 0 24 24">
                                                <path d="M12 .587l3.668 7.568L24 9.423l-6 5.854L19.335 24 12 20.202 4.665 24 6 15.277 0 9.423l8.332-1.268z" />
                                            </svg>` : ''}
                                    </span>
                                    <span class="font-semibold text-gray-800">
                                        ${!property.rating || property.rating == 0 ? 'Chưa có đánh giá' : property.rating}
                                    </span>
                                </div>
                                <div class="rating-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" style="width:14px;height:14px" class="rating-comments">
                                        <path d="M20 2H4C1.8 2 0 3.8 0 6v12c0 2.2 1.8 4 4 4h4v2.4c0 .6.4 1 1 1 .2 0 .5-.1.7-.3L14.3 22H20c2.2 0 4-1.8 4-4V6c0-2.2-1.8-4-4-4z" />
                                    </svg>
                                    <span class="rating-comments">
                                        ${!property.ratingNo || property.ratingNo == 0 ? 'Chưa có bình luận' : `${property.ratingNo} bình luận`}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Render pagination
            function renderPagination() {
                const pageNumbers = document.getElementById('pageNumbers');
                const prevBtn = document.getElementById('prevPage');
                const nextBtn = document.getElementById('nextPage');

                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages;

                let pageNumbersHtml = '';
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    pageNumbersHtml += `
                        <button class="pagination-btn ${i === currentPage ? 'active' : ''}"
                                onclick="goToPage(${i})">${i}</button>
                    `;
                }

                pageNumbers.innerHTML = pageNumbersHtml;
            }

            // Navigation functions
            window.goToPage = function(page) {
                currentPage = page;
                performSearch();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            };

            function viewProperty(propertyId) {
                window.location.href = `/Home/Detail/${propertyId}`;
            }

            // Utility functions
            function showLoading() {
                document.getElementById('propertiesContainer').innerHTML = `
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <p>Đang tìm kiếm...</p>
                    </div>
                `;
                document.getElementById('pagination').style.display = 'none';
            }

            function showError(message) {
                document.getElementById('propertiesContainer').innerHTML = `
                    <div class="empty-state">
                        <p style="color: #dc2626;">${message}</p>
                    </div>
                `;
                document.getElementById('pagination').style.display = 'none';
            }

            // Helper functions
            function getUserIdFromToken(token) {
                try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    return parseInt(payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"]);
                } catch (error) {
                    console.error("Không thể giải mã token:", error);
                    return null;
                }
            }

            function StatusInterest(item) {
                if (!item.isInterested) return "";
                if (item.interestedStatus == 2) {
                    if (item.isReminderRenterConfirmInterested == 2) return `<span style="color:red">Quá hạn xác nhận quan tâm</span>`;
                    if (item.isReminderRenterConfirmInterested == 1) return `<span style="color:green">Xác nhận quan tâm lại</span>`;
                    if (item.isReminderRenterConfirmInterested == 0) return `<span style="color:blue">Chờ phản hồi hệ thống</span>`;
                }
                if (item.interestedStatus == 0) return "";
                if (item.interestedStatus == 3) {
                    if (item.isReminderRenterConfirmInterested == 0) return `<span style="color:blue">Chờ xác nhận từ người cho thuê</span>`;
                }
            }

            // Favorite functions
            async function updateFavorite(propertyId, isFavorite) {
                try {
                    const token = localStorage.getItem('authToken');
                    if (!token) {
                        window.location.href = '/Auth/Login';
                        return;
                    }

                    const response = await fetch(`/api/Property/${isFavorite ? 'remove-favorite' : 'add-favorite'}/${propertyId}`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // Refresh the page or update the UI
                        location.reload();
                    } else {
                        console.error('Failed to update favorite');
                    }
                } catch (error) {
                    console.error('Error updating favorite:', error);
                }
            }

            function checkAuthStatus() {
                const token = localStorage.getItem('authToken');
                return !!token;
            }

            // Add to compare function
            function addToCompare(propertyId) {
                try {
                    const token = localStorage.getItem('authToken');
                    if (!token) {
                        window.location.href = '/Auth/Login';
                        return;
                    }

                    // Lấy danh sách so sánh từ localStorage
                    let compareList = JSON.parse(localStorage.getItem('compareList') || '[]');

                    // Kiểm tra xem property đã có trong danh sách chưa
                    if (compareList.includes(propertyId)) {
                        alert('Bất động sản này đã có trong danh sách so sánh!');
                        return;
                    }

                    // Kiểm tra giới hạn số lượng (tối đa 3)
                    if (compareList.length >= 3) {
                        alert('Danh sách so sánh đã đầy (tối đa 3 bất động sản)!');
                        return;
                    }

                    // Thêm vào danh sách
                    compareList.push(propertyId);
                    localStorage.setItem('compareList', JSON.stringify(compareList));

                    alert('Đã thêm vào danh sách so sánh!');

                    // Cập nhật UI nếu cần
                    const compareBtn = document.getElementById(`btn-compare-${propertyId}`);
                    if (compareBtn) {
                        compareBtn.classList.add('active');
                    }
                } catch (error) {
                    console.error('Error adding to compare:', error);
                    alert('Có lỗi xảy ra khi thêm vào danh sách so sánh!');
                }
            }

            // Click interest function
            function clickInterest(propertyId, isInterested, interestedStatus, isReminderRenterConfirmInterested, interestedId) {
                try {
                    const token = localStorage.getItem('authToken');
                    if (!token) {
                        window.location.href = '/Auth/Login';
                        return;
                    }

                    // Gọi API để cập nhật trạng thái quan tâm
                    fetch(`/api/Property/interest/${propertyId}`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Cập nhật UI
                            const interestBtn = document.getElementById(`interest-${propertyId}`);
                            if (interestBtn) {
                                interestBtn.classList.toggle('active');
                                const icon = interestBtn.querySelector('i');
                                if (icon) {
                                    icon.classList.toggle('text-red-500');
                                }
                            }

                            // Reload để cập nhật trạng thái
                            setTimeout(() => {
                                performSearch();
                            }, 500);
                        } else {
                            alert(data.message || 'Có lỗi xảy ra!');
                        }
                    })
                    .catch(error => {
                        console.error('Error updating interest:', error);
                        alert('Có lỗi xảy ra khi cập nhật trạng thái quan tâm!');
                    });
                } catch (error) {
                    console.error('Error in clickInterest:', error);
                    alert('Có lỗi xảy ra!');
                }
            }

            // Time ago function
            function timeAgo(dateString) {
                if (!dateString) return 'Không xác định';

                const date = new Date(dateString);
                const now = new Date();
                const diffInSeconds = Math.floor((now - date) / 1000);

                if (diffInSeconds < 60) return 'Vừa xong';
                if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} phút trước`;
                if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} giờ trước`;
                if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} ngày trước`;
                if (diffInSeconds < 31536000) return `${Math.floor(diffInSeconds / 2592000)} tháng trước`;

                return `${Math.floor(diffInSeconds / 31536000)} năm trước`;
            }

            // Handle image error function
            function handleImageError(img) {
                img.src = '/image/no-image.png';
                img.alt = 'Không có ảnh';
                img.onerror = null;
            }

            // Check URL parameters for initial search
            const urlParams = new URLSearchParams(window.location.search);

            // Debug log for URL parameters
            console.log('URL Parameters:', Object.fromEntries(urlParams.entries()));
            console.log('Raw URL:', window.location.href);
            console.log('Search string:', window.location.search);

            // Handle featured and recommended parameters
            if (urlParams.has('featured') && urlParams.get('featured') === 'true') {
                document.getElementById('searchType').value = '';
                document.getElementById('searchKeyword').value = 'Bất động sản nổi bật';
                // Set promotion filter
                setTimeout(() => performSearch(), 1000);
                return;
            }

            if (urlParams.has('recommended') && urlParams.get('recommended') === 'true') {
                document.getElementById('searchType').value = '';
                document.getElementById('searchKeyword').value = 'Bất động sản dành cho bạn';
                // Set non-promotion filter
                setTimeout(() => performSearch(), 1000);
                return;
            }

            // Handle search parameters from Home page
            if (urlParams.has('type') || urlParams.has('province') || urlParams.has('keyword') || urlParams.has('address') ||
                urlParams.has('minRoom') || urlParams.has('maxRoom') || urlParams.has('minPrice') ||
                urlParams.has('maxPrice') || urlParams.has('minArea') || urlParams.has('maxArea')) {

                console.log('Setting search parameters from URL...');

                // Set property type
                if (urlParams.has('type') && urlParams.get('type').trim() !== '') {
                    const typeElement = document.getElementById('searchType');
                    if (typeElement) typeElement.value = urlParams.get('type');
                }

                // Set province
                if (urlParams.has('province')) {
                    const provinceElement = document.getElementById('searchProvince');
                    if (provinceElement) {
                        provinceElement.value = urlParams.get('province');
                        // Load wards for the selected province
                        loadWards(urlParams.get('province'));
                    }
                }

                // Set keyword and address
                if (urlParams.has('keyword') && urlParams.get('keyword').trim() !== '') {
                    const keywordElement = document.getElementById('searchKeyword');
                    if (keywordElement) {
                        const keywordValue = decodeURIComponent(urlParams.get('keyword'));
                        console.log('Setting keyword:', keywordValue);
                        keywordElement.value = keywordValue;
                    }
                } else if (urlParams.has('address') && urlParams.get('address').trim() !== '') {
                    const keywordElement = document.getElementById('searchKeyword');
                    if (keywordElement) {
                        const addressValue = decodeURIComponent(urlParams.get('address'));
                        console.log('Setting address as keyword:', addressValue);
                        keywordElement.value = addressValue;
                    }
                }

                // Set room range
                if (urlParams.has('minRoom')) {
                    const minRoomElement = document.getElementById('minRoom');
                    if (minRoomElement) {
                        minRoomElement.value = urlParams.get('minRoom');
                        document.getElementById('minRoomValue').textContent = urlParams.get('minRoom');
                    }
                }

                if (urlParams.has('maxRoom')) {
                    const maxRoomElement = document.getElementById('maxRoom');
                    if (maxRoomElement) {
                        maxRoomElement.value = urlParams.get('maxRoom');
                        document.getElementById('maxRoomValue').textContent = urlParams.get('maxRoom');
                    }
                }

                // Set price range
                if (urlParams.has('minPrice')) {
                    const minPriceElement = document.getElementById('minPrice');
                    if (minPriceElement) {
                        minPriceElement.value = urlParams.get('minPrice');
                        document.getElementById('minPriceValue').textContent = `${urlParams.get('minPrice')} triệu`;
                    }
                }

                if (urlParams.has('maxPrice')) {
                    const maxPriceElement = document.getElementById('maxPrice');
                    if (maxPriceElement) {
                        maxPriceElement.value = urlParams.get('maxPrice');
                        document.getElementById('maxPriceValue').textContent = `${urlParams.get('maxPrice')} triệu`;
                    }
                }

                // Set area range
                if (urlParams.has('minArea')) {
                    const minAreaElement = document.getElementById('minArea');
                    if (minAreaElement) {
                        minAreaElement.value = urlParams.get('minArea');
                        document.getElementById('minAreaValue').textContent = `${urlParams.get('minArea')} m²`;
                    }
                }

                if (urlParams.has('maxArea')) {
                    const maxAreaElement = document.getElementById('maxArea');
                    if (maxAreaElement) {
                        maxAreaElement.value = urlParams.get('maxArea');
                        document.getElementById('maxAreaValue').textContent = `${urlParams.get('maxArea')} m²`;
                    }
                }

                // Update filled tracks for range sliders
                setTimeout(() => {
                    ['price', 'area', 'room'].forEach(prefix => {
                        const minInput = document.getElementById(`min${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                        const maxInput = document.getElementById(`max${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                        const filledTrack = document.getElementById(`${prefix}RangeFilled`);
                        if (minInput && maxInput && filledTrack) {
                            const slider = {
                                minId: minInput.id,
                                maxId: maxInput.id,
                                filledId: filledTrack.id,
                                min: parseFloat(minInput.min),
                                max: parseFloat(maxInput.max)
                            };
                            const minValue = parseFloat(minInput.value);
                            const maxValue = parseFloat(maxInput.value);
                            const range = slider.max - slider.min;
                            const leftPercent = ((minValue - slider.min) / range) * 100;
                            const rightPercent = ((maxValue - slider.min) / range) * 100;
                            filledTrack.style.left = `${leftPercent}%`;
                            filledTrack.style.width = `${rightPercent - leftPercent}%`;
                        }
                    });
                }, 500);

                // Perform search with the set parameters
                setTimeout(() => performSearch(), 1000);
            } else {
                // Check for session storage data (fallback)
                const searchFilterData = sessionStorage.getItem('searchFilterData');
                if (searchFilterData) {
                    try {
                        const filterData = JSON.parse(searchFilterData);

                        if (filterData.type && filterData.type.trim() !== '') {
                            const typeElement = document.getElementById('searchType');
                            if (typeElement) typeElement.value = filterData.type;
                        }

                        if (filterData.province) {
                            const provinceElement = document.getElementById('searchProvince');
                            if (provinceElement) {
                                provinceElement.value = filterData.province;
                                loadWards(filterData.province);
                            }
                        }

                        if (filterData.keyword) {
                            const keywordElement = document.getElementById('searchKeyword');
                            if (keywordElement) {
                                console.log('Setting keyword from session storage:', filterData.keyword);
                                keywordElement.value = filterData.keyword;
                            }
                        } else if (filterData.address) {
                            const keywordElement = document.getElementById('searchKeyword');
                            if (keywordElement) {
                                console.log('Setting address from session storage:', filterData.address);
                                keywordElement.value = filterData.address;
                            }
                        }

                        if (filterData.minRoom) {
                            const minRoomElement = document.getElementById('minRoom');
                            if (minRoomElement) {
                                minRoomElement.value = filterData.minRoom;
                                document.getElementById('minRoomValue').textContent = filterData.minRoom;
                            }
                        }

                        if (filterData.maxRoom) {
                            const maxRoomElement = document.getElementById('maxRoom');
                            if (maxRoomElement) {
                                maxRoomElement.value = filterData.maxRoom;
                                document.getElementById('maxRoomValue').textContent = filterData.maxRoom;
                            }
                        }

                        if (filterData.minPrice) {
                            const minPriceElement = document.getElementById('minPrice');
                            if (minPriceElement) {
                                minPriceElement.value = filterData.minPrice;
                                document.getElementById('minPriceValue').textContent = `${filterData.minPrice} triệu`;
                            }
                        }

                        if (filterData.maxPrice) {
                            const maxPriceElement = document.getElementById('maxPrice');
                            if (maxPriceElement) {
                                maxPriceElement.value = filterData.maxPrice;
                                document.getElementById('maxPriceValue').textContent = `${filterData.maxPrice} triệu`;
                            }
                        }

                        if (filterData.minArea) {
                            const minAreaElement = document.getElementById('minArea');
                            if (minAreaElement) {
                                minAreaElement.value = filterData.minArea;
                                document.getElementById('minAreaValue').textContent = `${filterData.minArea} m²`;
                            }
                        }

                        if (filterData.maxArea) {
                            const maxAreaElement = document.getElementById('maxArea');
                            if (maxAreaElement) {
                                maxAreaElement.value = filterData.maxArea;
                                document.getElementById('maxAreaValue').textContent = `${filterData.maxArea} m²`;
                            }
                        }

                        // Update filled tracks
                        setTimeout(() => {
                            ['price', 'area', 'room'].forEach(prefix => {
                                const minInput = document.getElementById(`min${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                                const maxInput = document.getElementById(`max${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                                const filledTrack = document.getElementById(`${prefix}RangeFilled`);
                                if (minInput && maxInput && filledTrack) {
                                    const slider = {
                                        minId: minInput.id,
                                        maxId: maxInput.id,
                                        filledId: filledTrack.id,
                                        min: parseFloat(minInput.min),
                                        max: parseFloat(maxInput.max)
                                    };
                                    const minValue = parseFloat(minInput.value);
                                    const maxValue = parseFloat(maxInput.value);
                                    const range = slider.max - slider.min;
                                    const leftPercent = ((minValue - slider.min) / range) * 100;
                                    const rightPercent = ((maxValue - slider.min) / range) * 100;
                                    filledTrack.style.left = `${leftPercent}%`;
                                    filledTrack.style.width = `${rightPercent - leftPercent}%`;
                                }
                            });
                        }, 500);

                        setTimeout(() => performSearch(), 1000);
                        sessionStorage.removeItem('searchFilterData');
                    } catch (error) {
                        console.error('Error parsing search filter data:', error);
                    }
                }
            }

            // Event listeners for pagination
            document.getElementById('prevPage').addEventListener('click', function() {
                if (currentPage > 1) {
                    goToPage(currentPage - 1);
                }
            });

            document.getElementById('nextPage').addEventListener('click', function() {
                if (currentPage < totalPages) {
                    goToPage(currentPage + 1);
                }
            });
        });
    </script>
}



@{
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
    ViewData["Title"] = "Tìm kiếm bất động sản";
}

<link rel="stylesheet" href="~/css/search.css">

<style>
    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .dual-range-container {
        position: relative;
        width: 100%;
        padding: 10px 0;
    }

    .dual-range-track {
        position: relative;
        height: 6px;
        background: #e5e7eb;
        border-radius: 3px;
    }

    .dual-range-filled {
        position: absolute;
        height: 6px;
        background: #2563eb;
        border-radius: 3px;
    }

    .dual-range-container input[type="range"] {
        position: absolute;
        width: 100%;
        height: 6px;
        margin: 0;
        pointer-events: none;
        background: none;
        -webkit-appearance: none;
    }

        .dual-range-container input[type="range"]::-webkit-slider-thumb {
            pointer-events: auto;
            width: 16px;
            height: 16px;
            background: #2563eb;
            border-radius: 50%;
            cursor: pointer;
            -webkit-appearance: none;
        }

    .range-values {
        display: flex;
        justify-content: space-between;
        font-size: 14px;
        color: #333;
        margin-top: 5px;
    }
</style>

<div class="search-container">
    <!-- Search Header -->
    <div class="search-header">
        <h1>Tìm kiếm bất động sản</h1>
        <p>Khám phá những ngôi nhà tuyệt vời phù hợp với nhu cầu của bạn</p>
    </div>

    <!-- Search Bar -->
    <div class="search-bar">
        <form id="searchForm" class="search-form">
            <div class="form-group">
                <label for="searchType">Loại bất động sản</label>
                <select id="searchType" name="type">
                    <option value="">Tất cả loại</option>
                </select>
            </div>
            <div class="form-group">
                <label for="searchProvince">Tỉnh/Thành phố</label>
                <select id="searchProvince" name="province">
                    <option value="">Tất cả tỉnh</option>
                </select>
            </div>
            <div class="form-group">
                <label for="searchKeyword">Từ khóa</label>
                <input type="text" id="searchKeyword" name="keyword" placeholder="Nhập từ khóa tìm kiếm...">
            </div>
            <button type="submit" class="search-btn">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                Tìm kiếm
            </button>
        </form>
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
        <div class="filter-header">
            <h3>Bộ lọc nâng cao</h3>
            <button type="button" class="filter-toggle" id="filterToggle">Hiện bộ lọc</button>
        </div>
        <div class="filter-content" id="filterContent" style="display: none;">
            <div class="filter-group">
                <label>Giá (triệu VNĐ/tháng)</label>
                <div class="dual-range-container">
                    <div class="dual-range-track">
                        <div class="dual-range-filled" id="priceRangeFilled"></div>
                    </div>
                    <input type="range" id="minPrice" name="minPrice" min="0" max="50" value="0" step="1">
                    <input type="range" id="maxPrice" name="maxPrice" min="0" max="50" value="50" step="1">
                    <div class="range-values">
                        <span id="minPriceValue">0 triệu</span>
                        <span id="maxPriceValue">50 triệu</span>
                    </div>
                </div>
            </div>
            <div class="filter-group">
                <label>Diện tích (m²)</label>
                <div class="dual-range-container">
                    <div class="dual-range-track">
                        <div class="dual-range-filled" id="areaRangeFilled"></div>
                    </div>
                    <input type="range" id="minArea" name="minArea" min="0" max="500" value="0" step="10">
                    <input type="range" id="maxArea" name="maxArea" min="0" max="500" value="500" step="10">
                    <div class="range-values">
                        <span id="minAreaValue">0 m²</span>
                        <span id="maxAreaValue">500 m²</span>
                    </div>
                </div>
            </div>
            <div class="filter-group">
                <label>Số phòng</label>
                <div class="dual-range-container">
                    <div class="dual-range-track">
                        <div class="dual-range-filled" id="roomRangeFilled"></div>
                    </div>
                    <input type="range" id="minRoom" name="minRoom" min="0" max="10" value="0" step="1">
                    <input type="range" id="maxRoom" name="maxRoom" min="0" max="10" value="10" step="1">
                    <div class="range-values">
                        <span id="minRoomValue">0</span>
                        <span id="maxRoomValue">10</span>
                    </div>
                </div>
            </div>
            <div class="filter-group">
                <label for="searchWard">Quận/Huyện</label>
                <select id="searchWard" name="ward">
                    <option value="">Tất cả quận/huyện</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="searchStreet">Đường/Phố</label>
                <select id="searchStreet" name="street">
                    <option value="">Tất cả đường/phố</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="results-section">
        <div class="results-header">
            <div class="results-count">
                Tìm thấy <strong id="totalResults">0</strong> bất động sản
            </div>
            <div class="sort-options">
                <label for="sortBy">Sắp xếp theo:</label>
                <select id="sortBy" name="sortBy">
                    <option value="newest">Mới nhất</option>
                    <option value="price_asc">Giá tăng dần</option>
                    <option value="price_desc">Giá giảm dần</option>
                    <option value="area_asc">Diện tích tăng dần</option>
                    <option value="area_desc">Diện tích giảm dần</option>
                </select>
            </div>
        </div>

        <!-- Properties Grid -->
        <div id="propertiesContainer">
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>Đang tải dữ liệu...</p>
            </div>
        </div>

        <!-- Pagination -->
        <div class="pagination" id="pagination" style="display: none;">
            <button class="pagination-btn" id="prevPage" disabled>Trước</button>
            <div id="pageNumbers"></div>
            <button class="pagination-btn" id="nextPage">Tiếp</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/helper.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const apiBaseUrl = 'https://localhost:7031/api';
            let currentPage = 1;
            let currentPageSize = 12;
            let totalPages = 0;
            let totalItems = 0;
            let currentFilters = {};

            // Initialize
            loadProvinces();
            loadPropertyTypes();
            loadAmenities();
            setupDualRangeSliders();

            // Filter toggle
            document.getElementById('filterToggle').addEventListener('click', function() {
                const filterContent = document.getElementById('filterContent');
                const isVisible = filterContent.style.display !== 'none';
                filterContent.style.display = isVisible ? 'none' : 'grid';
                this.textContent = isVisible ? 'Hiện bộ lọc' : 'Ẩn bộ lọc';
                this.classList.toggle('active');
            });

            // Search form submit
            document.getElementById('searchForm').addEventListener('submit', function(e) {
                e.preventDefault();
                currentPage = 1;
                performSearch();
            });

            // Province change
            document.getElementById('searchProvince').addEventListener('change', function() {
                const provinceId = this.value;
                loadWards(provinceId);
                document.getElementById('searchWard').innerHTML = '<option value="">Tất cả quận/huyện</option>';
                document.getElementById('searchStreet').innerHTML = '<option value="">Tất cả đường/phố</option>';
            });

            // Ward change
            document.getElementById('searchWard').addEventListener('change', function() {
                const wardId = this.value;
                loadStreets(wardId);
                document.getElementById('searchStreet').innerHTML = '<option value="">Tất cả đường/phố</option>';
            });

            // Sort change
            document.getElementById('sortBy').addEventListener('change', function() {
                performSearch();
            });

            // Load provinces
            async function loadProvinces() {
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/provinces`);
                    const provinces = await response.json();
                    const provinceSelect = document.getElementById('searchProvince');
                    provinces.forEach(province => {
                        const option = document.createElement('option');
                        option.value = province.id;
                        option.textContent = province.name;
                        provinceSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading provinces:', error);
                }
            }

            // Load wards for a specific province
            async function loadWards(provinceId) {
                if (!provinceId) return;
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/wards/${provinceId}`);
                    const wards = await response.json();
                    const wardSelect = document.getElementById('searchWard');
                    wardSelect.innerHTML = '<option value="">Tất cả quận/huyện</option>';
                    wards.forEach(ward => {
                        const option = document.createElement('option');
                        option.value = ward.id;
                        option.textContent = ward.name;
                        wardSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading wards:', error);
                }
            }

            // Load streets for a specific ward
            async function loadStreets(wardId) {
                if (!wardId) return;
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/streets/${wardId}`);
                    const streets = await response.json();
                    const streetSelect = document.getElementById('searchStreet');
                    streetSelect.innerHTML = '<option value="">Tất cả đường/phố</option>';
                    streets.forEach(street => {
                        const option = document.createElement('option');
                        option.value = street.id;
                        option.textContent = street.name;
                        streetSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading streets:', error);
                }
            }

            // Load property types
            async function loadPropertyTypes() {
                try {
                    const response = await fetch(`${apiBaseUrl}/PropertyType/GetAllPropertyTypes`);
                    const propertyTypes = await response.json();
                    const typeSelect = document.getElementById('searchType');
                    typeSelect.innerHTML = '<option value="">Tất cả loại</option>';
                    propertyTypes.forEach(type => {
                        const option = document.createElement('option');
                        option.value = type.name;
                        option.textContent = type.name;
                        typeSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error loading property types:', error);
                    document.getElementById('searchType').innerHTML = '<option value="">Không thể tải loại</option>';
                }
            }

            // Load amenities
            async function loadAmenities() {
                try {
                    const response = await fetch(`${apiBaseUrl}/Property/amenities`);
                    const amenities = await response.json();
                    window.amenities = amenities;
                } catch (error) {
                    console.error('Error loading amenities:', error);
                }
            }

            // Setup dual-range sliders
            function setupDualRangeSliders() {
                const sliders = [
                    {
                        minId: 'minPrice',
                        maxId: 'maxPrice',
                        filledId: 'priceRangeFilled',
                        minValueId: 'minPriceValue',
                        maxValueId: 'maxPriceValue',
                        min: 0,
                        max: 50,
                        step: 1,
                        format: value => `${value} triệu`
                    },
                    {
                        minId: 'minArea',
                        maxId: 'maxArea',
                        filledId: 'areaRangeFilled',
                        minValueId: 'minAreaValue',
                        maxValueId: 'maxAreaValue',
                        min: 0,
                        max: 500,
                        step: 10,
                        format: value => `${value} m²`
                    },
                    {
                        minId: 'minRoom',
                        maxId: 'maxRoom',
                        filledId: 'roomRangeFilled',
                        minValueId: 'minRoomValue',
                        maxValueId: 'maxRoomValue',
                        min: 0,
                        max: 10,
                        step: 1,
                        format: value => value
                    }
                ];

                sliders.forEach(slider => {
                    const minInput = document.getElementById(slider.minId);
                    const maxInput = document.getElementById(slider.maxId);
                    const filledTrack = document.getElementById(slider.filledId);
                    const minValueSpan = document.getElementById(slider.minValueId);
                    const maxValueSpan = document.getElementById(slider.maxValueId);

                    // Initialize values
                    minValueSpan.textContent = slider.format(minInput.value);
                    maxValueSpan.textContent = slider.format(maxInput.value);
                    updateFilledTrack(slider);

                    // Event listeners
                    minInput.addEventListener('input', () => {
                        if (parseFloat(minInput.value) > parseFloat(maxInput.value)) {
                            minInput.value = maxInput.value;
                        }
                        minValueSpan.textContent = slider.format(minInput.value);
                        maxValueSpan.textContent = slider.format(maxInput.value);
                        updateFilledTrack(slider);
                        debounceSearch();
                    });

                    maxInput.addEventListener('input', () => {
                        if (parseFloat(maxInput.value) < parseFloat(minInput.value)) {
                            maxInput.value = minInput.value;
                        }
                        minValueSpan.textContent = slider.format(minInput.value);
                        maxValueSpan.textContent = slider.format(maxInput.value);
                        updateFilledTrack(slider);
                        debounceSearch();
                    });

                    // Update filled track
                    function updateFilledTrack(slider) {
                        const minValue = parseFloat(minInput.value);
                        const maxValue = parseFloat(maxInput.value);
                        const range = slider.max - slider.min;
                        const leftPercent = ((minValue - slider.min) / range) * 100;
                        const rightPercent = ((maxValue - slider.min) / range) * 100;
                        filledTrack.style.left = `${leftPercent}%`;
                        filledTrack.style.width = `${rightPercent - leftPercent}%`;
                    }
                });
            }

            // Debounce search to limit API calls
            let debounceTimeout;
            function debounceSearch() {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(performSearch, 300);
            }

            // Helper function để xử lý ảnh
            function getPropertyImageUrl(property) {
                const defaultImage = '/image/no-image.png';
                if (!property.imageUrls || !Array.isArray(property.imageUrls) || property.imageUrls.length === 0) {
                    if (property.primaryImageUrl && property.primaryImageUrl.trim() !== '') {
                        return property.primaryImageUrl.includes('http') ? property.primaryImageUrl : `https://localhost:7031${property.primaryImageUrl}`;
                    }
                    return defaultImage;
                }
                let selectedImage = property.imageUrls.find(img => typeof img === 'object' && img.isPrimary === true);
                if (!selectedImage) selectedImage = property.imageUrls[0];
                if (selectedImage) {
                    if (typeof selectedImage === 'object' && selectedImage.url) {
                        return selectedImage.url.includes('http') ? selectedImage.url : `https://localhost:7031${selectedImage.url}`;
                    } else if (typeof selectedImage === 'string' && selectedImage.trim() !== '') {
                        return selectedImage.includes('http') ? selectedImage : `https://localhost:7031${selectedImage}`;
                    }
                }
                if (property.primaryImageUrl && property.primaryImageUrl.trim() !== '') {
                    return property.primaryImageUrl.includes('http') ? property.primaryImageUrl : `https://localhost:7031${property.primaryImageUrl}`;
                }
                return defaultImage;
            }

            // Handle image loading errors
            function handleImageError(img) {
                img.src = '/image/no-image.png';
                img.alt = 'Không có ảnh';
                img.onerror = null;
            }

            // Perform search
            async function performSearch() {
                const searchParams = new URLSearchParams();
                searchParams.append('page', currentPage);
                searchParams.append('pageSize', currentPageSize);

                const type = document.getElementById('searchType').value;
                const province = document.getElementById('searchProvince').value;
                const ward = document.getElementById('searchWard').value;
                const street = document.getElementById('searchStreet').value;
                const keyword = document.getElementById('searchKeyword').value;
                const minPrice = document.getElementById('minPrice').value;
                const maxPrice = document.getElementById('maxPrice').value;
                const minArea = document.getElementById('minArea').value;
                const maxArea = document.getElementById('maxArea').value;
                const minRoom = document.getElementById('minRoom').value;
                const maxRoom = document.getElementById('maxRoom').value;
                const sortBy = document.getElementById('sortBy').value;

                if (type && type.trim() !== '') searchParams.append('type', type);
                if (province) searchParams.append('provinces', province);
                if (ward) searchParams.append('wards', ward);
                if (street) searchParams.append('streets', street);
                
                // Xử lý tìm kiếm theo từ khóa (có thể là địa chỉ hoặc title)
                if (keyword && keyword.trim() !== '') {
                    searchParams.append('keyword', keyword);
                    // Không cần gửi address riêng vì keyword đã bao gồm cả địa chỉ và title
                }
                
                if (minPrice && minPrice !== '0') searchParams.append('minPrice', minPrice);
                if (maxPrice && maxPrice !== '50') searchParams.append('maxPrice', maxPrice);
                if (minArea && minArea !== '0') searchParams.append('minArea', minArea);
                if (maxArea && maxArea !== '500') searchParams.append('maxArea', maxArea);
                if (minRoom && minRoom !== '0') searchParams.append('minRoom', minRoom);
                if (maxRoom && maxRoom !== '10') searchParams.append('maxRoom', maxRoom);
                if (sortBy && sortBy !== 'newest') searchParams.append('sortBy', sortBy);

                currentFilters = Object.fromEntries(searchParams.entries());

                // Debug log for search parameters
                console.log('Search parameters:', Object.fromEntries(searchParams.entries()));

                showLoading();

                try {
                    const response = await fetch(`${apiBaseUrl}/Property/homepage-paginated?${searchParams.toString()}`);
                    const result = await response.json();
                    if (response.ok) {
                        displayResults(result);
                    } else {
                        showError(result.message || 'Có lỗi xảy ra khi tìm kiếm');
                    }
                } catch (error) {
                    console.error('Search error:', error);
                    showError('Không thể kết nối đến server');
                }
            }

            // Display results
            function displayResults(result) {
                const container = document.getElementById('propertiesContainer');
                if (!result.data || result.data.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <p>Không tìm thấy bất động sản nào phù hợp với tiêu chí tìm kiếm</p>
                        </div>
                    `;
                    document.getElementById('pagination').style.display = 'none';
                    document.getElementById('totalResults').textContent = '0';
                    return;
                }

                totalItems = result.totalItems || result.data.length;
                totalPages = Math.ceil(totalItems / currentPageSize);
                document.getElementById('totalResults').textContent = totalItems;

                const propertiesHtml = result.data.map(property => createPropertyCard(property)).join('');
                container.innerHTML = propertiesHtml;

                renderPagination();
                document.getElementById('pagination').style.display = 'flex';
            }

            // Create property card
            function createPropertyCard(property) {
                const card = document.createElement('div');
                card.className = 'property-card';
                
                // Sử dụng cả thuộc tính cũ và mới để đảm bảo tương thích
                const propertyType = property.propertyTypeName || property.type || 'N/A';
                const imageUrl = property.imageUrl || property.primaryImageUrl || '/images/default-property.jpg';
                const address = property.detailedAddress || property.streetName || property.wardName || property.provinceName || 
                               property.street || property.ward || property.province || property.location || 'N/A';
                
                // Tạo HTML cho property card với thông tin mới
                card.innerHTML = `
                    <div class="property-image">
                        <img src="${imageUrl}" alt="${property.title}" onerror="this.src='/images/default-property.jpg'">
                        ${property.isPromoted ? '<div class="promotion-badge">VIP</div>' : ''}
                        <button class="favorite-btn ${property.isInterested ? 'active' : ''}" onclick="updateFavorite(${property.id}, ${property.isInterested})">
                            <i class="fas fa-heart"></i>
                        </button>
                    </div>
                    <div class="property-content">
                        <h3 class="property-title">${property.title}</h3>
                        <div class="property-info-section">
                            <div class="property-type">
                                <i class="fas fa-home"></i>
                                <span>${propertyType}</span>
                            </div>
                            <div class="property-rooms">
                                <i class="fas fa-bed"></i>
                                <span>${property.bedrooms || 0} phòng ngủ</span>
                            </div>
                            <div class="property-price-info">
                                <i class="fas fa-tag"></i>
                                <span class="price-value">${property.price ? property.price.toLocaleString('vi-VN') : '0'} triệu/tháng</span>
                            </div>
                            <div class="property-address">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>${address}</span>
                            </div>
                        </div>
                        <div class="property-footer">
                            <div class="property-meta">
                                <span><i class="fas fa-ruler-combined"></i> ${property.area} m²</span>
                                <span><i class="fas fa-bath"></i> ${property.bathrooms || 0} phòng tắm</span>
                            </div>
                            <div class="property-actions">
                                <button class="btn btn-primary btn-sm" onclick="viewProperty(${property.id})">Xem chi tiết</button>
                            </div>
                        </div>
                    </div>
                `;
                
                return card;
            }

            // Render pagination
            function renderPagination() {
                const pageNumbers = document.getElementById('pageNumbers');
                const prevBtn = document.getElementById('prevPage');
                const nextBtn = document.getElementById('nextPage');

                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages;

                let pageNumbersHtml = '';
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    pageNumbersHtml += `
                        <button class="pagination-btn ${i === currentPage ? 'active' : ''}"
                                onclick="goToPage(${i})">${i}</button>
                    `;
                }

                pageNumbers.innerHTML = pageNumbersHtml;
            }

            // Navigation functions
            window.goToPage = function(page) {
                currentPage = page;
                performSearch();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            };

            function viewProperty(propertyId) {
                window.location.href = `/Home/Detail/${propertyId}`;
            }

            // Utility functions
            function showLoading() {
                document.getElementById('propertiesContainer').innerHTML = `
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <p>Đang tìm kiếm...</p>
                    </div>
                `;
                document.getElementById('pagination').style.display = 'none';
            }

            function showError(message) {
                document.getElementById('propertiesContainer').innerHTML = `
                    <div class="empty-state">
                        <p style="color: #dc2626;">${message}</p>
                    </div>
                `;
                document.getElementById('pagination').style.display = 'none';
            }

            // Helper functions
            function getUserIdFromToken(token) {
                try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    return parseInt(payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"]);
                } catch (error) {
                    console.error("Không thể giải mã token:", error);
                    return null;
                }
            }

            function StatusInterest(item) {
                if (!item.isInterested) return "";
                if (item.interestedStatus == 2) {
                    if (item.isReminderRenterConfirmInterested == 2) return `<span style="color:red">Quá hạn xác nhận quan tâm</span>`;
                    if (item.isReminderRenterConfirmInterested == 1) return `<span style="color:green">Xác nhận quan tâm lại</span>`;
                    if (item.isReminderRenterConfirmInterested == 0) return `<span style="color:blue">Chờ phản hồi hệ thống</span>`;
                }
                if (item.interestedStatus == 0) return "";
                if (item.interestedStatus == 3) {
                    if (item.isReminderRenterConfirmInterested == 0) return `<span style="color:blue">Chờ xác nhận từ người cho thuê</span>`;
                }
            }

            // Favorite functions
            async function updateFavorite(propertyId, isFavorite) {
                try {
                    const token = localStorage.getItem('authToken');
                    if (!token) {
                        window.location.href = '/Auth/Login';
                        return;
                    }

                    const response = await fetch(`/api/Property/${isFavorite ? 'remove-favorite' : 'add-favorite'}/${propertyId}`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // Refresh the page or update the UI
                        location.reload();
                    } else {
                        console.error('Failed to update favorite');
                    }
                } catch (error) {
                    console.error('Error updating favorite:', error);
                }
            }

            function checkAuthStatus() {
                const token = localStorage.getItem('authToken');
                return !!token;
            }

            // Check URL parameters for initial search
            const urlParams = new URLSearchParams(window.location.search);
            
            // Handle featured and recommended parameters
            if (urlParams.has('featured') && urlParams.get('featured') === 'true') {
                document.getElementById('searchType').value = '';
                document.getElementById('searchKeyword').value = 'Bất động sản nổi bật';
                // Set promotion filter
                setTimeout(() => performSearch(), 1000);
                return;
            }
            
            if (urlParams.has('recommended') && urlParams.get('recommended') === 'true') {
                document.getElementById('searchType').value = '';
                document.getElementById('searchKeyword').value = 'Bất động sản dành cho bạn';
                // Set non-promotion filter
                setTimeout(() => performSearch(), 1000);
                return;
            }
            
            // Handle search parameters from Home page
            if (urlParams.has('type') || urlParams.has('province') || urlParams.has('keyword') || urlParams.has('address') ||
                urlParams.has('minRoom') || urlParams.has('maxRoom') || urlParams.has('minPrice') ||
                urlParams.has('maxPrice') || urlParams.has('minArea') || urlParams.has('maxArea')) {

                // Set property type
                if (urlParams.has('type') && urlParams.get('type').trim() !== '') {
                    const typeElement = document.getElementById('searchType');
                    if (typeElement) typeElement.value = urlParams.get('type');
                }

                // Set province
                if (urlParams.has('province')) {
                    const provinceElement = document.getElementById('searchProvince');
                    if (provinceElement) {
                        provinceElement.value = urlParams.get('province');
                        // Load wards for the selected province
                        loadWards(urlParams.get('province'));
                    }
                }

                // Set keyword and address
                if (urlParams.has('keyword') && urlParams.get('keyword').trim() !== '') {
                    const keywordElement = document.getElementById('searchKeyword');
                    if (keywordElement) keywordElement.value = urlParams.get('keyword');
                } else if (urlParams.has('address') && urlParams.get('address').trim() !== '') {
                    const keywordElement = document.getElementById('searchKeyword');
                    if (keywordElement) keywordElement.value = urlParams.get('address');
                }

                // Set room range
                if (urlParams.has('minRoom')) {
                    const minRoomElement = document.getElementById('minRoom');
                    if (minRoomElement) {
                        minRoomElement.value = urlParams.get('minRoom');
                        document.getElementById('minRoomValue').textContent = urlParams.get('minRoom');
                    }
                }

                if (urlParams.has('maxRoom')) {
                    const maxRoomElement = document.getElementById('maxRoom');
                    if (maxRoomElement) {
                        maxRoomElement.value = urlParams.get('maxRoom');
                        document.getElementById('maxRoomValue').textContent = urlParams.get('maxRoom');
                    }
                }

                // Set price range
                if (urlParams.has('minPrice')) {
                    const minPriceElement = document.getElementById('minPrice');
                    if (minPriceElement) {
                        minPriceElement.value = urlParams.get('minPrice');
                        document.getElementById('minPriceValue').textContent = `${urlParams.get('minPrice')} triệu`;
                    }
                }

                if (urlParams.has('maxPrice')) {
                    const maxPriceElement = document.getElementById('maxPrice');
                    if (maxPriceElement) {
                        maxPriceElement.value = urlParams.get('maxPrice');
                        document.getElementById('maxPriceValue').textContent = `${urlParams.get('maxPrice')} triệu`;
                    }
                }

                // Set area range
                if (urlParams.has('minArea')) {
                    const minAreaElement = document.getElementById('minArea');
                    if (minAreaElement) {
                        minAreaElement.value = urlParams.get('minArea');
                        document.getElementById('minAreaValue').textContent = `${urlParams.get('minArea')} m²`;
                    }
                }

                if (urlParams.has('maxArea')) {
                    const maxAreaElement = document.getElementById('maxArea');
                    if (maxAreaElement) {
                        maxAreaElement.value = urlParams.get('maxArea');
                        document.getElementById('maxAreaValue').textContent = `${urlParams.get('maxArea')} m²`;
                    }
                }

                // Update filled tracks for range sliders
                setTimeout(() => {
                    ['price', 'area', 'room'].forEach(prefix => {
                        const minInput = document.getElementById(`min${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                        const maxInput = document.getElementById(`max${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                        const filledTrack = document.getElementById(`${prefix}RangeFilled`);
                        if (minInput && maxInput && filledTrack) {
                            const slider = {
                                minId: minInput.id,
                                maxId: maxInput.id,
                                filledId: filledTrack.id,
                                min: parseFloat(minInput.min),
                                max: parseFloat(maxInput.max)
                            };
                            const minValue = parseFloat(minInput.value);
                            const maxValue = parseFloat(maxInput.value);
                            const range = slider.max - slider.min;
                            const leftPercent = ((minValue - slider.min) / range) * 100;
                            const rightPercent = ((maxValue - slider.min) / range) * 100;
                            filledTrack.style.left = `${leftPercent}%`;
                            filledTrack.style.width = `${rightPercent - leftPercent}%`;
                        }
                    });
                }, 500);

                // Perform search with the set parameters
                setTimeout(() => performSearch(), 1000);
            } else {
                // Check for session storage data (fallback)
                const searchFilterData = sessionStorage.getItem('searchFilterData');
                if (searchFilterData) {
                    try {
                        const filterData = JSON.parse(searchFilterData);

                        if (filterData.type && filterData.type.trim() !== '') {
                            const typeElement = document.getElementById('searchType');
                            if (typeElement) typeElement.value = filterData.type;
                        }

                        if (filterData.province) {
                            const provinceElement = document.getElementById('searchProvince');
                            if (provinceElement) {
                                provinceElement.value = filterData.province;
                                loadWards(filterData.province);
                            }
                        }

                        if (filterData.keyword) {
                            const keywordElement = document.getElementById('searchKeyword');
                            if (keywordElement) keywordElement.value = filterData.keyword;
                        } else if (filterData.address) {
                            const keywordElement = document.getElementById('searchKeyword');
                            if (keywordElement) keywordElement.value = filterData.address;
                        }

                        if (filterData.minRoom) {
                            const minRoomElement = document.getElementById('minRoom');
                            if (minRoomElement) {
                                minRoomElement.value = filterData.minRoom;
                                document.getElementById('minRoomValue').textContent = filterData.minRoom;
                            }
                        }

                        if (filterData.maxRoom) {
                            const maxRoomElement = document.getElementById('maxRoom');
                            if (maxRoomElement) {
                                maxRoomElement.value = filterData.maxRoom;
                                document.getElementById('maxRoomValue').textContent = filterData.maxRoom;
                            }
                        }

                        if (filterData.minPrice) {
                            const minPriceElement = document.getElementById('minPrice');
                            if (minPriceElement) {
                                minPriceElement.value = filterData.minPrice;
                                document.getElementById('minPriceValue').textContent = `${filterData.minPrice} triệu`;
                            }
                        }

                        if (filterData.maxPrice) {
                            const maxPriceElement = document.getElementById('maxPrice');
                            if (maxPriceElement) {
                                maxPriceElement.value = filterData.maxPrice;
                                document.getElementById('maxPriceValue').textContent = `${filterData.maxPrice} triệu`;
                            }
                        }

                        if (filterData.minArea) {
                            const minAreaElement = document.getElementById('minArea');
                            if (minAreaElement) {
                                minAreaElement.value = filterData.minArea;
                                document.getElementById('minAreaValue').textContent = `${filterData.minArea} m²`;
                            }
                        }

                        if (filterData.maxArea) {
                            const maxAreaElement = document.getElementById('maxArea');
                            if (maxAreaElement) {
                                maxAreaElement.value = filterData.maxArea;
                                document.getElementById('maxAreaValue').textContent = `${filterData.maxArea} m²`;
                            }
                        }

                        // Update filled tracks
                        setTimeout(() => {
                            ['price', 'area', 'room'].forEach(prefix => {
                                const minInput = document.getElementById(`min${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                                const maxInput = document.getElementById(`max${prefix.charAt(0).toUpperCase() + prefix.slice(1)}`);
                                const filledTrack = document.getElementById(`${prefix}RangeFilled`);
                                if (minInput && maxInput && filledTrack) {
                                    const slider = {
                                        minId: minInput.id,
                                        maxId: maxInput.id,
                                        filledId: filledTrack.id,
                                        min: parseFloat(minInput.min),
                                        max: parseFloat(maxInput.max)
                                    };
                                    const minValue = parseFloat(minInput.value);
                                    const maxValue = parseFloat(maxInput.value);
                                    const range = slider.max - slider.min;
                                    const leftPercent = ((minValue - slider.min) / range) * 100;
                                    const rightPercent = ((maxValue - slider.min) / range) * 100;
                                    filledTrack.style.left = `${leftPercent}%`;
                                    filledTrack.style.width = `${rightPercent - leftPercent}%`;
                                }
                            });
                        }, 500);

                        setTimeout(() => performSearch(), 1000);
                        sessionStorage.removeItem('searchFilterData');
                    } catch (error) {
                        console.error('Error parsing search filter data:', error);
                    }
                }
            }

            // Event listeners for pagination
            document.getElementById('prevPage').addEventListener('click', function() {
                if (currentPage > 1) {
                    goToPage(currentPage - 1);
                }
            });

            document.getElementById('nextPage').addEventListener('click', function() {
                if (currentPage < totalPages) {
                    goToPage(currentPage + 1);
                }
            });
        });
    </script>
}

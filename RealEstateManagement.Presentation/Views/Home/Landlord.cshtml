@{
    // ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}
<style>
    .text-orange-500 {
        color: rgb(249 115 22 / var(--tw-text-opacity, 1)) !important;
    }

    a {
        color: black !important;
    }

        a:hover {
            color: rgb(249 115 22 / var(--tw-text-opacity, 1)) !important;
            border-color: rgb(249 115 22 / var(--tw-border-opacity, 1));
        }
</style>
<h1 class="text-xl font-bold mb-4">Danh sách tin</h1>


<div class="grid grid-cols-1 md:grid-cols-3 gap-6">

    <div class="md:col-span-2">
        <div id="listFavoriteId" class="grid gap-6">

        </div>
    </div>

    <div>
        <div style="height: max-content;" class="w-full max-w-xs bg-white p-4 rounded-md shadow-sm space-y-4 text-sm">
            <div class="space-y-4 text-center">
                <div style="cursor:pointer" onclick="window.location.href='/Home/Landlord/@ViewBag.LandlordId'" class="w-20 h-20 mx-auto rounded-full border bg-gray-100 flex items-center justify-center">
                    <img class="landlordUrl" style="border-radius:5rem;height:100%;width:100%" />
                </div>

                <div>
                    <p style="cursor:pointer" onclick="window.location.href='/Home/Landlord/@ViewBag.LandlordId'" class="font-semibold text-gray-800 contactName"></p>
                    <p style="display:none" class="text-sm text-gray-500">
                        <span class="text-green-500">●</span> Đang hoạt động
                    </p>
                </div>

                <p style="display:none" class="text-sm text-gray-500">1 tin đăng • Tham gia từ: 19/06/2025</p>

                <div class="space-y-2">
                    <a href="tel:0369864430" id="contactPhone" class="block w-full bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg font-semibold">
                        📞 <span class="contactPhone"></span>
                    </a>
                    <a href="#" class="block w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg font-semibold">
                        💬 Nhắn Zalo
                    </a>
                    <button id="reportButton" onclick="openReportModal()" class="block w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg font-semibold">
                        ⚠️ Báo cáo người dùng
                    </button>
                </div>

            </div>
        </div>
        <div style="height: max-content;margin-top:2rem" class="w-full max-w-xs bg-white p-4 rounded-md shadow-sm space-y-4 text-sm">
            <h3 class="font-semibold text-gray-800 mb-2">Tin mới đăng</h3>
            <div class="space-y-4" id="listNew">
            </div>
        </div>
    </div>
</div>

<!-- Report User Modal -->
<div id="reportModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Báo cáo người dùng</h3>
            <button onclick="closeReportModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <form id="reportForm">
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Lý do báo cáo</label>
                <select id="reportReason" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500">
                    <option value="">Chọn lý do báo cáo</option>
                    <option value="Spam">Spam</option>
                    <option value="Nội dung không phù hợp">Nội dung không phù hợp</option>
                    <option value="Lừa đảo">Lừa đảo</option>
                    <option value="Quấy rối">Quấy rối</option>
                    <option value="Thông tin sai lệch">Thông tin sai lệch</option>
                    <option value="Khác">Khác</option>
                </select>
            </div>
            
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Mô tả chi tiết</label>
                <textarea id="reportDescription" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500" placeholder="Mô tả chi tiết lý do báo cáo..."></textarea>
            </div>
            
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeReportModal()" class="px-4 py-2 text-gray-600 bg-gray-200 rounded-md hover:bg-gray-300">
                    Hủy
                </button>
                <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">
                    Gửi báo cáo
                </button>
            </div>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/js/propertyService.js"></script>
<script>
    let urlBase = "https://localhost:7031";
    getList();
    let landlordId = @ViewBag.LandlordId;
    
    // Check report status when page loads
    checkReportStatus();
    
    // Check if user has already reported this landlord
    async function checkReportStatus() {
        try {
            const token = localStorage.getItem('authToken') || localStorage.getItem('accessToken') || localStorage.getItem('token');
            if (!token) return;
            
            let userId;
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                userId = payload.id || payload.userId || payload.sub;
            } catch (e) {
                console.error('Error decoding token:', e);
                return;
            }
            
            if (!userId) return;
            
            // Check if user has reported this landlord
            const response = await fetch(`${urlBase}/api/Report/user/${landlordId}/${userId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            const reportButton = document.getElementById('reportButton');
            if (response.ok) {
                // User has already reported
                reportButton.innerHTML = '✅ Đã báo cáo';
                reportButton.className = 'block w-full bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg font-semibold';
                reportButton.onclick = () => {
                    Swal.fire({
                        icon: 'info',
                        title: 'Đã báo cáo',
                        text: 'Bạn đã báo cáo người dùng này rồi.',
                        confirmButtonText: 'OK'
                    });
                };
            } else {
                // User hasn't reported yet
                reportButton.innerHTML = '⚠️ Báo cáo người dùng';
                reportButton.className = 'block w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg font-semibold';
                reportButton.onclick = openReportModal;
            }
        } catch (error) {
            console.error('Error checking report status:', error);
        }
    }
    
    // Report User Functions
    function openReportModal() {
        document.getElementById('reportModal').classList.remove('hidden');
    }
    
    function closeReportModal() {
        document.getElementById('reportModal').classList.add('hidden');
        document.getElementById('reportForm').reset();
    }
    
    // Handle report form submission
    document.getElementById('reportForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const reason = document.getElementById('reportReason').value;
        const description = document.getElementById('reportDescription').value;
        
        if (!reason) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn lý do báo cáo',
                confirmButtonText: 'OK'
            });
            return;
        }
        
        if (!description.trim()) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng nhập mô tả chi tiết',
                confirmButtonText: 'OK'
            });
            return;
        }
        
        try {
            // Get current user ID from token
            let token = localStorage.getItem('authToken');
            if (!token) {
                token = localStorage.getItem('accessToken');
            }
            if (!token) {
                token = localStorage.getItem('token');
            }
            
            console.log('Available localStorage keys:', Object.keys(localStorage));
            console.log('Token found:', !!token);
            
            if (!token) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Vui lòng đăng nhập để báo cáo',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            // Decode token to get user ID
            let userId;
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                userId = payload.id || payload.userId || payload.sub;
                console.log('Decoded token payload:', payload);
                console.log('User ID:', userId);
            } catch (e) {
                console.error('Error decoding token:', e);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Token không hợp lệ',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            if (!userId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Không thể xác định người dùng',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            const reportData = {
                targetId: landlordId,
                reason: reason,
                description: description
            };
            
            console.log('Sending report data:', reportData);
            console.log('Request URL:', `${urlBase}/api/Report/user/${userId}`);
            
            const response = await fetch(`${urlBase}/api/Report/user/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(reportData)
            });
            
            if (!response.ok) {
                let errorMessage = 'Gửi báo cáo thất bại';
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || errorData || errorMessage;
                } catch (e) {
                    // If response is not JSON, try to get text
                    const errorText = await response.text();
                    errorMessage = errorText || errorMessage;
                }
                throw new Error(errorMessage);
            }
            
            let result;
            try {
                result = await response.json();
            } catch (e) {
                // If response is not JSON, treat it as text
                const responseText = await response.text();
                result = { message: responseText };
            }
            
            Swal.fire({
                icon: 'success',
                title: 'Thành công!',
                text: result.message || 'Đã gửi báo cáo thành công',
                confirmButtonText: 'OK'
            });
            
            closeReportModal();
            
            // Update button status
            checkReportStatus();
            
        } catch (error) {
            console.error('Report error:', error);
            
            // Check if it's a duplicate report error
            if (error.message.includes('đã report')) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Đã báo cáo!',
                    text: error.message,
                    showCancelButton: true,
                    confirmButtonText: 'Hủy báo cáo',
                    cancelButtonText: 'Đóng',
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show option to cancel report
                        cancelReport(landlordId, userId);
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: error.message,
                    confirmButtonText: 'OK'
                });
            }
        }
    });
    
    // Function to cancel report
    async function cancelReport(targetId, userId) {
        try {
            const token = localStorage.getItem('authToken') || localStorage.getItem('accessToken') || localStorage.getItem('token');
            
            const response = await fetch(`${urlBase}/api/Report/user/${targetId}/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                let errorMessage = 'Hủy báo cáo thất bại';
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || errorData || errorMessage;
                } catch (e) {
                    const errorText = await response.text();
                    errorMessage = errorText || errorMessage;
                }
                throw new Error(errorMessage);
            }

            let result;
            try {
                result = await response.json();
            } catch (e) {
                const responseText = await response.text();
                result = { message: responseText };
            }

            Swal.fire({
                icon: 'success',
                title: 'Thành công!',
                text: result.message || 'Đã hủy báo cáo thành công',
                confirmButtonText: 'OK'
            });
            
            // Update button status
            checkReportStatus();

        } catch (error) {
            console.error('Cancel report error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: error.message,
                confirmButtonText: 'OK'
            });
        }
    }
    
    async function getList(){
        let prop = await propertyService.getLandlord(@ViewBag.LandlordId);
        $('.contactPhone').html(prop.phoneNumber);
        $('.landlordUrl').prop('src',prop.avatarUrl);
        $('.contactName').html(prop.name);
        console.log(prop);
        let listFavoriteItem = prop.properties;
        //console.log(listFavoriteItem);
        let html = '';
        listFavoriteItem.forEach(item => {
            html += `
                   <div class="bg-white rounded-md shadow-sm border border-gray-200 flex p-4 gap-4 items-start">

                    <div class="relative w-40 h-28 flex-shrink-0">
                            <img onerror="handleImageError(this)" src="${item.primaryImageUrl}" on alt="Phòng trọ" class="w-full h-full object-cover rounded-lg">

                        <div class="absolute inset-0 flex items-center justify-center bg-black/30 rounded-lg">
                        </div>

                    </div>

                    <div class="flex-1">
                        <h2  onclick="window.location.href='/Home/Detail/${item.id}'" style="cursor:pointer" class="text-blue-800 font-semibold text-base leading-tight">
                            ${item.title}
                        </h2>

                        <div class="text-green-600 font-semibold mt-1">
                                   ${formatVietnameseNumber(item.price)} / tháng <span class="text-gray-500 font-normal">· ${item.area} m²</span>
                        </div>

                        <div class="text-sm text-gray-600 flex items-center gap-1 mt-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M17.657 16.657L13.414 12m0 0l-4.243 4.243M13.414 12L9.172 7.757m4.242 4.243a4 4 0 11-5.656-5.656 4 4 0 015.656 5.656z" />
                            </svg>
                                ${item.detailedAddress}, ${item.street}, ${item.ward}, ${item.province}
                        </div>

                        <p class="text-sm text-gray-700 mt-1 line-clamp-2">
                               ${item.description}
                        </p>

                        <div class="text-xs text-gray-400 mt-1">${timeAgo(item.createdAt)}</div>
                    </div>
                        ${item.isFavorite ? `
                            <button onclick="removeToFavorite(${item.id})" class="mt-1 text-red-500 hover:text-red-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 6 4 4 6.5 4c1.74 0 3.41 1.01 4.13 2.44h1.75C14.09 5.01 15.76 4 17.5 4 20 4 22 6 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                            </svg>` : `
                           <button id="addFavoriteDetail" onclick="addToFavourite(${item.id});" class="d-none flex items-center space-x-1 hover:text-blue-600">
                                <span style="font-size:22px">♡</span>
                            </button>
                            `}

                    </button>
                </div>
            `;
        });
        $('#listFavoriteId').html(html);


        listNewPost = await propertyService.getNewPost();
        //console.log(listNewPost);
        let htmlNew = '';
        listNewPost.forEach(item => {
            const imageUrl = item.images && item.images.length > 0 && item.images[0] && item.images[0].imageUrl 
                ? (item.images[0].imageUrl.includes('http') ? item.images[0].imageUrl : urlBase + item.images[0].imageUrl)
                : '/image/default-news.jpg'; // Default image path
            
            htmlNew += `<div style="cursor:pointer" onclick="window.location.href='/Home/NewDetail/${item.id}'" class="flex gap-2 items-start">
                    <img src="${imageUrl}" onerror="handleImageError(this)" alt="tin" class="w-14 h-14 rounded object-cover" />
                    <div>
                        <div class="text-sm font-medium text-gray-800 leading-snug line-clamp-2">
                            ${item.title || 'Không có tiêu đề'}
                        </div>
                        <div class="text-xs text-gray-500">${timeAgo(item.publishedAt)}</div>
                    </div>
                </div>`
        });
        $('#listNew').html(htmlNew);
    }
</script>
@{
    ViewData["Title"] = "T√¨m ki·∫øm AI";
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}

<link rel="stylesheet" href="~/css/AISreach.css" />


<div class="ai-search-container">
    <!-- Search Form Column -->
    <div class="search-form-column">
        <h2 class="text-2xl font-bold mb-6 text-gray-800">ü§ñ T√¨m ki·∫øm AI</h2>

        <!-- AI Recommendation -->
        <div class="ai-recommendation" id="aiRecommendation">
            <h3>üí° G·ª£i √Ω t·ª´ AI</h3>
            <p>Nh·∫≠p ti√™u ch√≠ t√¨m ki·∫øm ƒë·ªÉ nh·∫≠n g·ª£i √Ω th√¥ng minh t·ª´ AI</p>
        </div>

        <!-- Search Form -->
        <form id="aiSearchForm">
            <div class="search-form-group">
                <label for="searchLocation">üìç Khu v·ª±c t√¨m ki·∫øm</label>
                <input type="text" id="searchLocation" placeholder="VD: Qu·∫≠n 1, TP.HCM" required>
            </div>

            <div class="search-form-group">
                <label for="propertyType">üè† Lo·∫°i b·∫•t ƒë·ªông s·∫£n</label>
                <select id="propertyType">
                    <option value="">T·∫•t c·∫£ lo·∫°i</option>
                    <!-- Property types will be loaded dynamically -->
                </select>
            </div>

            <!-- S·ªü th√≠ch ƒë√£ ƒë∆∞·ª£c b·ªè -->

            <div class="search-form-group">
                <label>üí∞ M·ª©c gi√° (tri·ªáu/th√°ng)</label>
                <div class="range-slider-container">
                    <input type="range" id="minPrice" class="range-slider" min="0" max="100" value="0">
                    <input type="range" id="maxPrice" class="range-slider" min="0" max="100" value="100">
                    <div class="range-labels">
                        <span id="minPriceLabel">0 tri·ªáu</span>
                        <span id="maxPriceLabel">100 tri·ªáu</span>
                    </div>
                </div>
            </div>

            <div class="search-form-group">
                <label>üõèÔ∏è S·ªë ph√≤ng ng·ªß</label>
                <div class="range-slider-container">
                    <input type="range" id="minBedrooms" class="range-slider" min="0" max="10" value="0">
                    <input type="range" id="maxBedrooms" class="range-slider" min="0" max="10" value="10">
                    <div class="range-labels">
                        <span id="minBedroomsLabel">0 ph√≤ng</span>
                        <span id="maxBedroomsLabel">10 ph√≤ng</span>
                    </div>
                </div>
            </div>

            <div class="search-form-group">
                <label>üìê Di·ªán t√≠ch (m¬≤)</label>
                <div class="range-slider-container">
                    <input type="range" id="minArea" class="range-slider" min="0" max="500" value="0">
                    <input type="range" id="maxArea" class="range-slider" min="0" max="500" value="500">
                    <div class="range-labels">
                        <span id="minAreaLabel">0 m¬≤</span>
                        <span id="maxAreaLabel">500 m¬≤</span>
                    </div>
                </div>
            </div>

            <!-- B√°n k√≠nh t√¨m ki·∫øm ƒë√£ ƒë∆∞·ª£c b·ªè (s·ª≠ d·ª•ng c·ªë ƒë·ªãnh 10km) -->

            <div class="search-form-group">
                <label>‚≠ê Ti·ªán √≠ch c·∫ßn thi·∫øt</label>
                <div class="flex flex-wrap gap-2">
                    <label class="flex items-center">
                        <input type="checkbox" value="school" class="mr-2"> Tr∆∞·ªùng h·ªçc
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" value="hospital" class="mr-2"> B·ªánh vi·ªán
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" value="supermarket" class="mr-2"> Si√™u th·ªã
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" value="restaurant" class="mr-2"> Nh√† h√†ng
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" value="bank" class="mr-2"> Ng√¢n h√†ng
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" value="park" class="mr-2"> C√¥ng vi√™n
                    </label>
                </div>
            </div>

            <button type="submit" class="search-button" id="searchButton">
                <span class="loading-spinner" id="loadingSpinner" style="display: none;"></span>
                üîç T√¨m ki·∫øm v·ªõi AI
            </button>


        </form>

    </div>

    <!-- Results Column -->
    <div class="results-column">
        <!-- AI Recommendation Display -->
        <div class="ai-recommendation-display" id="aiRecommendationDisplay" style="display: none;">
            <h3>üí° G·ª£i √Ω t·ª´ AI</h3>
            <div id="aiRecommendationContent"></div>
        </div>

        <!-- Property List -->
        <div class="property-list" id="propertyList" style="display: none;">
            <h3 class="text-lg font-semibold mb-4 text-gray-800">üè† B·∫•t ƒë·ªông s·∫£n ph√π h·ª£p</h3>
            <div id="propertyItems"></div>
        </div>

        <!-- B·ªè ph·∫ßn ti·ªán √≠ch v√† giao th√¥ng t·ªïng quan -->
    </div>
</div>

<script src="~/js/config.js"></script>
<script src="~/js/aiSearchService.js"></script>
<!-- Leaflet scripts removed - no longer needed -->
<script>
    // Map variables removed - no longer needed

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        // ƒê·ª£i config load xong
        setTimeout(() => {


            initializeForm();
            loadStoredData();
            setupRangeSliders();
            loadPropertyTypes(); // Call loadPropertyTypes here
        }, 100);
    });

    function initializeForm() {
        const form = document.getElementById('aiSearchForm');
        const searchButton = document.getElementById('searchButton');

        // ƒê·∫£m b·∫£o loadingSpinner t·ªìn t·∫°i
        ensureLoadingSpinnerExists();

        // G·∫Øn event listener cho form submit
        form.addEventListener('submit', handleSearch);

        // G·∫Øn th√™m event listener cho button click ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông
        searchButton.addEventListener('click', function(e) {
            e.preventDefault();
            handleSearch(e);
        });


    }

    function ensureLoadingSpinnerExists() {
        let loadingSpinner = document.getElementById('loadingSpinner');

        if (!loadingSpinner) {
            loadingSpinner = document.createElement('span');
            loadingSpinner.className = 'loading-spinner';
            loadingSpinner.id = 'loadingSpinner';
            loadingSpinner.style.display = 'none';
            loadingSpinner.style.marginRight = '5px';

            // Th√™m v√†o searchButton n·∫øu c√≥
            const searchButton = document.getElementById('searchButton');
            if (searchButton) {
                searchButton.appendChild(loadingSpinner);
            }
        }
    }



    function loadStoredData() {
        const aiSearchData = sessionStorage.getItem('aiSearchData');
        if (aiSearchData) {
            const data = JSON.parse(aiSearchData);

            if (data.keyword) {
                document.getElementById('searchLocation').value = data.keyword;
            }
            if (data.type) {
                document.getElementById('propertyType').value = data.type;
            }
            if (data.minPrice) {
                document.getElementById('minPrice').value = data.minPrice;
            }
            if (data.maxPrice) {
                document.getElementById('maxPrice').value = data.maxPrice;
            }
            if (data.minRoom) {
                document.getElementById('minBedrooms').value = data.minRoom;
            }
            if (data.maxRoom) {
                document.getElementById('maxBedrooms').value = data.maxRoom;
            }
            if (data.minArea) {
                document.getElementById('minArea').value = data.minArea;
            }
            if (data.maxArea) {
                document.getElementById('maxArea').value = data.maxArea;
            }

            updateRangeLabels();
        }
    }

    function setupRangeSliders() {
        // Price range
        const minPrice = document.getElementById('minPrice');
        const maxPrice = document.getElementById('maxPrice');

        minPrice.addEventListener('input', function() {
            if (parseInt(this.value) > parseInt(maxPrice.value)) {
                this.value = maxPrice.value;
            }
            updateRangeLabels();
        });

        maxPrice.addEventListener('input', function() {
            if (parseInt(this.value) < parseInt(minPrice.value)) {
                this.value = minPrice.value;
            }
            updateRangeLabels();
        });

        // Bedrooms range
        const minBedrooms = document.getElementById('minBedrooms');
        const maxBedrooms = document.getElementById('maxBedrooms');

        minBedrooms.addEventListener('input', function() {
            if (parseInt(this.value) > parseInt(maxBedrooms.value)) {
                this.value = maxBedrooms.value;
            }
            updateRangeLabels();
        });

        maxBedrooms.addEventListener('input', function() {
            if (parseInt(this.value) < parseInt(minBedrooms.value)) {
                this.value = minBedrooms.value;
            }
            updateRangeLabels();
        });

        // Area range
        const minArea = document.getElementById('minArea');
        const maxArea = document.getElementById('maxArea');

        minArea.addEventListener('input', function() {
            if (parseInt(this.value) > parseInt(maxArea.value)) {
                this.value = maxArea.value;
            }
            updateRangeLabels();
        });

        maxArea.addEventListener('input', function() {
            if (parseInt(this.value) < parseInt(minArea.value)) {
                this.value = minArea.value;
            }
            updateRangeLabels();
        });

        // Search radius ƒë√£ ƒë∆∞·ª£c b·ªè

        updateRangeLabels();
    }

    function updateRangeLabels() {
        document.getElementById('minPriceLabel').textContent = document.getElementById('minPrice').value + ' tri·ªáu';
        document.getElementById('maxPriceLabel').textContent = document.getElementById('maxPrice').value + ' tri·ªáu';
        document.getElementById('minBedroomsLabel').textContent = document.getElementById('minBedrooms').value + ' ph√≤ng';
        document.getElementById('maxBedroomsLabel').textContent = document.getElementById('maxBedrooms').value + ' ph√≤ng';
        document.getElementById('minAreaLabel').textContent = document.getElementById('minArea').value + ' m¬≤';
        document.getElementById('maxAreaLabel').textContent = document.getElementById('maxArea').value + ' m¬≤';
    }

    async function handleSearch(e) {
        e.preventDefault();



        const searchButton = document.getElementById('searchButton');
        let loadingSpinner = document.getElementById('loadingSpinner');

        // Ki·ªÉm tra elements c√≥ t·ªìn t·∫°i kh√¥ng
        if (!searchButton) {
            console.error('Search button not found!');
            return;
        }

        // T·∫°o loadingSpinner ƒë·ªông n·∫øu kh√¥ng t·ªìn t·∫°i
        if (!loadingSpinner) {
            console.warn('Loading spinner not found, creating dynamic one...');
            loadingSpinner = document.createElement('span');
            loadingSpinner.className = 'loading-spinner';
            loadingSpinner.id = 'loadingSpinner';
            loadingSpinner.style.display = 'inline-block';
            loadingSpinner.style.marginRight = '5px';
        }

        // Show loading
        searchButton.disabled = true;
        loadingSpinner.style.display = 'inline-block';
        searchButton.innerHTML = '';
        searchButton.appendChild(loadingSpinner);
        searchButton.appendChild(document.createTextNode('ƒêang t√¨m ki·∫øm...'));

        try {
            const searchData = {
                searchLocation: document.getElementById('searchLocation').value,
                propertyType: document.getElementById('propertyType').value,
                minPrice: parseInt(document.getElementById('minPrice').value),
                maxPrice: parseInt(document.getElementById('maxPrice').value),
                minBedrooms: parseInt(document.getElementById('minBedrooms').value),
                maxBedrooms: parseInt(document.getElementById('maxBedrooms').value),
                minArea: parseInt(document.getElementById('minArea').value),
                maxArea: parseInt(document.getElementById('maxArea').value),
                maxResults: 100,
                requiredAmenities: getSelectedAmenities()
            };



            // Call AI Recommendation API - S·ª≠ d·ª•ng config
            const response = await fetch(config.buildApiUrl(config.ai.searchByCriteria), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(searchData)
            });

            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ t√¨m ki·∫øm');
            }

            const result = await response.json();

            // Debug: Log k·∫øt qu·∫£ t·ª´ API
            console.log('=== API RESPONSE DEBUG ===');
            console.log('Total properties:', result.properties?.length);
            console.log('Properties:', result.properties);
            console.log('========================');

            // Update AI recommendation
            updateAIRecommendation(result.recommendationReason);

            // Display properties with full result data
            displayProperties(result.properties, result);

            // Display properties (no map needed)

        } catch (error) {
            console.error('L·ªói t√¨m ki·∫øm:', error);
            alert('C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm: ' + error.message);
        } finally {
            // Hide loading - ki·ªÉm tra elements tr∆∞·ªõc khi s·ª≠ d·ª•ng
            if (searchButton) {
                searchButton.disabled = false;
                searchButton.innerHTML = 'üîç T√¨m ki·∫øm v·ªõi AI';
            }


        }
    }

    function getSelectedAmenities() {
        const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        return Array.from(checkboxes).map(cb => cb.value);
    }



    function updateAIRecommendation(reason) {
        const aiRecommendationDisplay = document.getElementById('aiRecommendationDisplay');
        const aiRecommendationContent = document.getElementById('aiRecommendationContent');

        aiRecommendationContent.innerHTML = `<p>${reason}</p>`;
        aiRecommendationDisplay.style.display = 'block';
    }

    function displayProperties(properties, result) {
        const propertyList = document.getElementById('propertyList');
        const propertyItems = document.getElementById('propertyItems');



        // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi hi·ªÉn th·ªã m·ªõi
        propertyItems.innerHTML = '';

        if (!properties || properties.length === 0) {
            propertyItems.innerHTML = '<p class="text-gray-500">Kh√¥ng t√¨m th·∫•y b·∫•t ƒë·ªông s·∫£n ph√π h·ª£p</p>';
        } else {
            let html = '';
            properties.forEach(property => {
                // T√≠nh ƒëi·ªÉm ph√π h·ª£p theo m√†u s·∫Øc
                const scoreColor = getScoreColor(property.matchScore);
                const scoreText = property.matchScore ? `${property.matchScore.toFixed(1)}/100` : 'N/A';

                html += `
                    <div class="property-item">
                        <div class="property-header">
                            <div class="property-title">
                                <a href="/Home/PropertyDetail/${property.id}" class="property-title-link" target="_blank">
                                    ${property.title}
                                </a>
                            </div>
                            <div class="property-score" style="background-color: ${scoreColor}">
                                ${scoreText}
                            </div>
                        </div>
                        <div class="property-details">
                            <span class="property-type">${property.type}</span>
                            <span class="property-bedrooms">${property.bedrooms} ph√≤ng ng·ªß</span>
                            <span class="property-area">${property.area}m¬≤</span>
                        </div>
                        <div class="property-price">${formatPrice(property.price)}/th√°ng</div>
                        <div class="property-location">
                            <span class="property-address">${property.province} ‚Ä¢ ${property.ward}</span>
                            <span class="property-distance">C√°ch ${property.distanceKm.toFixed(1)}km</span>
                        </div>
                        ${property.matchReason ? `<div class="property-reason">${property.matchReason}</div>` : ''}
                        ${property.amenities && property.amenities.length > 0 ?
                            `<div class="property-amenities">
                                <span class="amenities-label">Ti·ªán √≠ch:</span>
                                ${property.amenities.slice(0, 3).join(', ')}
                                ${property.amenities.length > 3 ? ` +${property.amenities.length - 3} kh√°c` : ''}
                            </div>` : ''
                        }

                        <!-- Ti·ªán √≠ch xung quanh BDS n√†y -->
                        <div class="property-nearby-amenities">
                            <h5>üìç Ti·ªán √≠ch xung quanh BDS n√†y:</h5>
                            <div class="amenities-grid" id="amenities-${property.id}">
                                ${property.nearbyAmenities && property.nearbyAmenities.length > 0 ?
                                    property.nearbyAmenities.map(amenity =>
                                        `<div class="amenity-item-compact">
                                            <span class="amenity-name">${amenity.name}</span>
                                            <span class="amenity-type">${amenity.type}</span>
                                            <span class="amenity-distance">${amenity.distanceKm.toFixed(1)}km</span>
                                        </div>`
                                    ).join('') :
                                    '<div class="no-amenities">Kh√¥ng c√≥ ti·ªán √≠ch xung quanh</div>'
                                }
                            </div>
                        </div>

                        <!-- Th√¥ng tin giao th√¥ng xung quanh BDS n√†y -->
                        <div class="property-transportation">
                            <h5>üöå Giao th√¥ng xung quanh BDS n√†y:</h5>
                            <div class="transportation-grid" id="transportation-${property.id}">
                                ${property.transportationInfo && property.transportationInfo.length > 0 ?
                                    property.transportationInfo.map(transport =>
                                        `<div class="transportation-item-compact">
                                            <span class="transportation-name">${transport}</span>
                                        </div>`
                                    ).join('') :
                                    '<div class="no-transportation">Kh√¥ng c√≥ th√¥ng tin giao th√¥ng</div>'
                                }
                            </div>
                        </div>
                    </div>
                `;
            });



            propertyItems.innerHTML = html;

            // Hi·ªÉn th·ªã ti·ªán √≠ch v√† giao th√¥ng t·ªïng quan t·ª´ API ch√≠nh
            // B·ªè hi·ªÉn th·ªã ti·ªán √≠ch v√† giao th√¥ng t·ªïng quan
        }

        propertyList.style.display = 'block';
    }

    function displayAmenities(amenities) {
        const amenitiesList = document.getElementById('amenitiesList');
        const amenitiesItems = document.getElementById('amenitiesItems');

        if (!amenities || amenities.length === 0) {
            amenitiesItems.innerHTML = '<p class="text-gray-500">Kh√¥ng c√≥ th√¥ng tin ti·ªán √≠ch</p>';
        } else {
            let html = '';
            amenities.forEach(amenity => {
                // D·ªØ li·ªáu t·ª´ API c√≥ format: "üìç T√™n (Lo·∫°i) - c√°ch X.Xkm"
                const match = amenity.match(/üìç (.+?) \((.+?)\) - c√°ch (.+?)km/);
                if (match) {
                    const name = match[1];
                    const type = match[2];
                    const distance = match[3];

                    html += `
                        <div class="amenity-item">
                            <div class="amenity-header">
                                <span class="amenity-name">${name}</span>
                                <span class="amenity-type">${type}</span>
                            </div>
                            <span class="amenity-distance">${distance}km</span>
                        </div>
                    `;
                } else {
                    // Fallback n·∫øu format kh√¥ng ƒë√∫ng
                    html += `
                        <div class="amenity-item">
                            <span class="amenity-name">${amenity}</span>
                        </div>
                    `;
                }
            });
            amenitiesItems.innerHTML = html;
        }

        amenitiesList.style.display = 'block';
    }

    // Map functions removed - no longer needed

    function displayAmenityStats(shortStats, detailedStats) {
        const amenityStats = document.getElementById('amenityStats');
        const amenityStatsContent = document.getElementById('amenityStatsContent');

        if (!shortStats && !detailedStats) {
            amenityStatsContent.innerHTML = '<p class="text-gray-500">Kh√¥ng c√≥ th√¥ng tin th·ªëng k√™</p>';
        } else {
            let html = '';

            if (shortStats) {
                html += `<div class="stats-summary">${shortStats}</div>`;
            }

            if (detailedStats) {
                html += `<div class="stats-detailed">${detailedStats.replace(/\n/g, '<br>')}</div>`;
            }

            amenityStatsContent.innerHTML = html;
        }

        amenityStats.style.display = 'block';
    }

    function displayTransportationInfo(transportationInfo) {
        const transportationDiv = document.getElementById('transportationInfo');
        const transportationItems = document.getElementById('transportationItems');

        if (!transportationInfo || transportationInfo.length === 0) {
            transportationItems.innerHTML = '<p class="text-gray-500">Kh√¥ng c√≥ th√¥ng tin giao th√¥ng</p>';
        } else {
            let html = '';
            transportationInfo.forEach(item => {
                // D·ªØ li·ªáu t·ª´ API c√≥ format: "[BDS X] T√™n - c√°ch X.Xkm"
                const match = item.match(/\[BDS (\d+)\] (.+?) - c√°ch (.+?)km/);
                if (match) {
                    const propertyId = match[1];
                    const name = match[2];
                    const distance = match[3];

                    html += `
                        <div class="transportation-item">
                            <div class="transportation-header">
                                <span class="transportation-name">${name}</span>
                                <span class="property-id">BDS ${propertyId}</span>
                            </div>
                            <span class="transportation-distance">${distance}km</span>
                        </div>
                    `;
                } else {
                    // Fallback n·∫øu format kh√¥ng ƒë√∫ng
                    html += `
                        <div class="transportation-item">
                            <span class="transportation-detail">${item}</span>
                        </div>
                    `;
                }
            });
            transportationItems.innerHTML = html;
        }

        transportationDiv.style.display = 'block';
    }

        async function loadAmenitiesForProperty(property) {
        try {
            const amenitiesContainer = document.getElementById(`amenities-${property.id}`);
            if (!amenitiesContainer) return;

            // Debug: Ki·ªÉm tra config
            console.log('Config object:', config);
            console.log('Config.ai:', config.ai);
            console.log('Config.ai.nearbyAmenities:', config.ai.nearbyAmenities);

            const endpoint = config.ai.nearbyAmenities;
            if (!endpoint) {
                const fallbackUrl = `https://localhost:7031/api/AIRecommendation/nearby-amenities?latitude=${property.latitude}&longitude=${property.longitude}&radiusKm=2`;
                const response = await fetch(fallbackUrl, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (response.ok) {
                    const amenities = await response.json();
                    displayPropertyAmenities(property.id, amenities);
                } else {
                    amenitiesContainer.innerHTML = '<div class="no-amenities">Kh√¥ng th·ªÉ t·∫£i ti·ªán √≠ch</div>';
                }
                return;
            }

            const url = `${config.buildApiUrl(endpoint)}?latitude=${property.latitude}&longitude=${property.longitude}&radiusKm=2`;

            // G·ªçi API ƒë·ªÉ l·∫•y ti·ªán √≠ch xung quanh BDS n√†y
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (response.ok) {
                const amenities = await response.json();
                displayPropertyAmenities(property.id, amenities);
            } else {
                amenitiesContainer.innerHTML = '<div class="no-amenities">Kh√¥ng th·ªÉ t·∫£i ti·ªán √≠ch</div>';
            }
        } catch (error) {
            console.error('L·ªói khi t·∫£i ti·ªán √≠ch cho BDS:', error);
            const amenitiesContainer = document.getElementById(`amenities-${property.id}`);
            if (amenitiesContainer) {
                amenitiesContainer.innerHTML = '<div class="no-amenities">L·ªói khi t·∫£i ti·ªán √≠ch</div>';
            }
        }
    }

    function displayPropertyAmenities(propertyId, amenities) {
        const amenitiesContainer = document.getElementById(`amenities-${propertyId}`);
        if (!amenitiesContainer) return;

        // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ API
        console.log('Amenities data for property', propertyId, ':', amenities);

        // API tr·∫£ v·ªÅ { amenities: [...], searchRadius: ..., userLocation: {...} }
        let amenitiesList = amenities;
        if (amenities && amenities.amenities) {
            amenitiesList = amenities.amenities;
        }

        if (!amenitiesList || amenitiesList.length === 0) {
            amenitiesContainer.innerHTML = '<div class="no-amenities">Kh√¥ng c√≥ ti·ªán √≠ch xung quanh</div>';
            return;
        }

        // Nh√≥m ti·ªán √≠ch theo lo·∫°i
        const groupedAmenities = {};
        amenitiesList.forEach(amenity => {
            const type = amenity.type || 'Kh√°c';
            if (!groupedAmenities[type]) {
                groupedAmenities[type] = [];
            }
            groupedAmenities[type].push(amenity);
        });

        let html = '';
        Object.keys(groupedAmenities).forEach(type => {
            const typeAmenities = groupedAmenities[type];
            const count = typeAmenities.length;

            html += `
                <div class="amenity-category">
                    <div class="category-header">
                        <span class="category-name">${type}</span>
                        <span class="category-count">${count}</span>
                    </div>
                    <div class="category-items">
            `;

            // Hi·ªÉn th·ªã 3 ti·ªán √≠ch ƒë·∫ßu ti√™n
            typeAmenities.slice(0, 3).forEach(amenity => {
                html += `
                    <div class="amenity-item-compact">
                        <span class="amenity-name">${amenity.name}</span>
                        <span class="amenity-distance">${amenity.distanceKm.toFixed(1)}km</span>
                    </div>
                `;
            });

            // Hi·ªÉn th·ªã "Xem th√™m" n·∫øu c√≥ nhi·ªÅu h∆°n 3
            if (count > 3) {
                html += `
                    <div class="more-amenities">
                        +${count - 3} kh√°c
                    </div>
                `;
            }

            html += `
                    </div>
                </div>
            `;
        });

        amenitiesContainer.innerHTML = html;
    }

    async function loadTransportationForProperty(property) {
        try {
            const transportationContainer = document.getElementById(`transportation-${property.id}`);
            if (!transportationContainer) return;

            // Debug: Ki·ªÉm tra config
            console.log('Transportation endpoint:', config.ai.transportationInfo);

            const endpoint = config.ai.transportationInfo;
            if (!endpoint) {
                const fallbackUrl = `https://localhost:7031/api/AIRecommendation/transportation-info?latitude=${property.latitude}&longitude=${property.longitude}`;
                const response = await fetch(fallbackUrl, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (response.ok) {
                    const transportationInfo = await response.json();
                    displayPropertyTransportation(property.id, transportationInfo);
                } else {
                    transportationContainer.innerHTML = '<div class="no-transportation">Kh√¥ng th·ªÉ t·∫£i th√¥ng tin giao th√¥ng</div>';
                }
                return;
            }

            const url = `${config.buildApiUrl(endpoint)}?latitude=${property.latitude}&longitude=${property.longitude}`;

            // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin giao th√¥ng xung quanh BDS n√†y
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (response.ok) {
                const transportationInfo = await response.json();
                displayPropertyTransportation(property.id, transportationInfo);
            } else {
                transportationContainer.innerHTML = '<div class="no-transportation">Kh√¥ng th·ªÉ t·∫£i th√¥ng tin giao th√¥ng</div>';
            }
        } catch (error) {
            console.error('L·ªói khi t·∫£i th√¥ng tin giao th√¥ng cho BDS:', error);
            const transportationContainer = document.getElementById(`transportation-${property.id}`);
            if (transportationContainer) {
                transportationContainer.innerHTML = '<div class="no-transportation">L·ªói khi t·∫£i th√¥ng tin giao th√¥ng</div>';
            }
        }
    }

    function displayPropertyTransportation(propertyId, transportationInfo) {
        const transportationContainer = document.getElementById(`transportation-${propertyId}`);
        if (!transportationContainer) return;

        // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ API
        console.log('Transportation data for property', propertyId, ':', transportationInfo);

        // API tr·∫£ v·ªÅ { transportationInfo: [...], userLocation: {...} }
        let transportationList = transportationInfo;
        if (transportationInfo && transportationInfo.transportationInfo) {
            transportationList = transportationInfo.transportationInfo;
        }

        if (!transportationList || transportationList.length === 0) {
            transportationContainer.innerHTML = '<div class="no-transportation">Kh√¥ng c√≥ th√¥ng tin giao th√¥ng xung quanh</div>';
            return;
        }

        let html = '';
        transportationList.forEach(item => {
            html += `
                <div class="transportation-item-compact">
                    <span class="transportation-name">${item}</span>
                </div>
            `;
        });

        transportationContainer.innerHTML = html;
    }

    function getScoreColor(score) {
        if (!score) return '#6b7280'; // Gray for N/A

        if (score >= 90) return '#059669'; // Green for excellent
        if (score >= 80) return '#0d9488'; // Teal for very good
        if (score >= 70) return '#0891b2'; // Blue for good
        if (score >= 60) return '#f59e0b'; // Yellow for fair
        return '#dc2626'; // Red for poor
    }

    function formatPrice(price) {
        // Gi√° t·ª´ API l√† VND, chuy·ªÉn v·ªÅ tri·ªáu VND
        if (price >= 1000000) {
            return (price / 1000000).toFixed(1) + ' tri·ªáu';
        } else if (price >= 1000) {
            return (price / 1000).toFixed(1) + ' ngh√¨n';
        }
        return price + ' VND';
    }
</script>


@{
    // ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}
<style>

    input[type="range"]::-webkit-slider-thumb {
        appearance: none;
        height: 20px;
        width: 20px;
        background-color: #e74c3c;
        border: 3px solid white;
        border-radius: 50%;
        cursor: pointer;
        pointer-events: all;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    #rangeMinArea, #rangeMaxArea,.rangeCls {
        padding-bottom:2.5rem !important;
    }

    .filterProperty input {
        min-height: auto !important;
    }

    #rangeTrackArea,.bgRange{
        background-color: #e74c3c;
    }


    #locationMenu {
        width: 250px;
        padding:20px;
    }

    .location-item {
        width:100%;
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f1f2f6;
        transition: background 0.2s ease;
    }

        .location-item:hover {
            background: #f8f9fa;
        }

        .location-item:last-child {
            border-bottom: none;
        }


    .dropdown-menu {
        position: absolute; /* Thay fixed bằng absolute */
        top: 100%; /* Hiển thị ngay dưới nút dropdown */
        left: 0;
        background: white;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        z-index: 1001;
        max-height: 300px; /* Giới hạn chiều cao */
        overflow-y: auto; /* Cho phép cuộn nếu nội dung dài */
        opacity: 0;
        pointer-events: none;
        transition: all 0.3s ease;
        width: 100%; /* Đảm bảo chiều rộng khớp với nút */
        margin-top: 5px; /* Khoảng cách từ nút */
    }

        .dropdown-menu.active {
            max-height: 400px;
            opacity: 1;
            pointer-events: auto;
            margin-top: 5px;
        }

</style>
<!-- Search Bar chồng lên Slider -->
<div class="slider">
    <div class="search-container">
        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-item" data-tab="buy" onclick="window.location.href='/?type=room'" id="room" data-type="room">Phòng trọ</button>
            <button class="tab-item" data-tab="rent" onclick="window.location.href='/?type=house'" id="house" data-type="house">Nhà nguyên căn</button>
            <button class="tab-item" data-tab="project" onclick="window.location.href='/?type=apartment'" id="apartment" value="apartment">Căn hộ</button>
        </div>

        <!-- Search Form -->
        <div class="search-form">
            <div class="search-row">
                <!-- Top row: Location + Search Input + Search Button -->
                <div class="search-top-row">
                    <!-- Location Input -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="locationBtn">
                                <span id="provinceSelected" data-value="Ho Chi Minh City" data-id="1">Ho Chi Minh City</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="locationMenu">
                                <div class="location-dropdown" id="locationProvinder">
@*                                     <div class="location-item" data-value="hcm">Hồ Chí Minh</div>
                                    <div class="location-item" data-value="hanoi">Hà Nội</div>
                                    <div class="location-item" data-value="danang">Đà Nẵng</div>
                                    <div class="location-item" data-value="daklak">Đắk Lắk</div>
                                    <div class="location-item" data-value="cantho">Cần Thơ</div> *@
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Main Search Input -->
                    <div class="input-group">
                        <div class="location-input" style="position:relative">
                            <input type="text" class="main-input dropdown2"
                                   placeholder="Nhập tối đa 5 địa điểm, dự án. VD: Quận Hoàn Kiếm, Quận Đống Đa"
                                   id="searchInput">
                            <div id="dropdown2" style="height:20rem;top:100%" class="dropdown2 absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg hidden">
                                <div class="p-4 dropdown2">
                                    <div class="p-4 dropdown2">
                                        <p class="font-semibold text-sm text-gray-600 mb-2 mt-2 dropdown2">Tất cả địa điểm</p>
                                        <div id="location-list" style="max-height:14rem;left:0" class="absolute z-10 mt-1 w-full bg-white overflow-y-auto dropdown2">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Search Button -->
                    <button class="search-button" onclick="performSearch()">
                        🔍 Tìm kiếm
                    </button>
                </div>
                <div>
                    <div id="location-selected-list" class="flex flex-wrap gap-2">
                    </div>
                </div>
                <!-- Filter Row - 3 dropdowns ngang hàng -->
                <div class="filter-row">
                    <!-- Property Type -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="propertyTypeBtn">
                                <span>Số lượng phòng</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="propertyTypeMenu" style="overflow:hidden">
                                <div class="dropdown-content">
                                    <div class="flex justify-between items-center mb-2 text-sm">
                                        <div>
                                            Từ: <span class="font-semibold text-cyan-700" id="minLabel"></span>
                                        </div>
                                        <div>
                                            Đến: <span class="font-semibold text-cyan-700" id="maxLabel"></span>
                                        </div>
                                    </div>

                                    <div class="flex items-center gap-2 mb-2">
                                        <input id="minInput" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                                        <span>→</span>
                                        <input id="maxInput" type="number" class="w-full border rounded px-2 py-1 text-center" value="15" max="15" />
                                    </div>

                                    <div class="relative h-4">
                                        <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                                        <div id="rangeTrack" class="absolute bgRange h-full bg-cyan-600 rounded-full"></div>

                                        <input id="rangeMin" type="range" min="0" max="15" value="0"
                                               class="absolute rangeCls w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                                        <input id="rangeMax" type="range" min="0" max="15" value="15"
                                               class="absolute rangeCls w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Price Range -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="priceBtn">
                                <span id="priceDisplay">Mức giá</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="priceMenu" style="overflow:hidden">
                                <div class="dropdown-content">
                                    <div class="flex justify-between items-center mb-2 text-sm">
                                        <div>
                                            Từ: <span class="font-semibold text-cyan-700" id="minLabelPrice"></span>
                                        </div>
                                        <div>
                                            Đến: <span class="font-semibold text-cyan-700" id="maxLabelPrice"></span>
                                        </div>
                                    </div>

                                    <div class="flex items-center gap-2 mb-2">
                                        <input id="minInputPrice" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                                        <span>→</span>
                                        <input id="maxInputPrice" type="number" class="w-full border rounded px-2 py-1 text-center" value="100" max="100" />
                                    </div>

                                    <div class="relative h-4">
                                        <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                                        <div id="rangeTrackPrice" class="absolute bgRange h-full bg-cyan-600 rounded-full"></div>

                                        <input id="rangeMinPrice" type="range" min="0" max="100" value="0"
                                               class="absolute rangeCls w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                                        <input id="rangeMaxPrice" type="range" min="0" max="100" value="100"
                                               class="absolute rangeCls w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Area -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="areaBtn">
                                <span id="areaDisplay">Diện tích</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="areaMenu">
                                <div class="dropdown-content">
                                    <div class="location-dropdown" style="overflow:hidden">
                                        <div class="flex justify-between items-center mb-2 text-sm">
                                            <div>
                                                Từ: <span class="font-semibold text-cyan-700" id="minLabelArea"></span>
                                            </div>
                                            <div>
                                                Đến: <span class="font-semibold text-cyan-700" id="maxLabelArea"></span>
                                            </div>
                                        </div>

                                        <div class="flex items-center gap-2 mb-2">
                                            <input id="minInputArea" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                                            <span>→</span>
                                            <input id="maxInputArea" type="number" class="w-full border rounded px-2 py-1 text-center" value="100" max="100" />
                                        </div>

                                        <div class="relative h-4">
                                            <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                                            <div id="rangeTrackArea" class="absolute h-full bg-cyan-600 rounded-full"></div>

                                            <input id="rangeMinArea" type="range" min="0" max="100" value="0"
                                                   class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                                            <input id="rangeMaxArea" type="range" min="0" max="100" value="100"
                                                   class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="slider-container" id="sliderContainer"></div>
    <button class="slider-button prev" onclick="moveSlide(-1)">&#10094;</button>
    <button class="slider-button next" onclick="moveSlide(1)">&#10095;</button>
    <div class="slider-dots" id="sliderDots"></div>
</div>

<!-- Danh sách Bất động sản nổi bật -->
<h2 class="text-lg font-semibold mb-2">Bất động sản nổi bật</h2>
<div id="featuredProperties" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6"></div>

<!-- Danh sách Bất động sản dành cho bạn -->
<h2 class="text-lg font-semibold mb-2">Bất động sản dành cho bạn</h2>
<div id="recommendedProperties" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>

<!-- Danh sách Tin mới đăng -->
<h2 style="margin-top:2rem" class="text-lg font-semibold mb-2">Tin mới đăng</h2>
<div id="listNew" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>
<script src="~/js/propertyService.js" asp-append-version="true"></script>
<script>
    let urlBase = "https://localhost:7031";
    let urlParams1 = new URLSearchParams(window.location.search);
    let type1 = urlParams1.get('type');
    const locationInput = document.getElementById('searchInput');
    const dropdown2 = document.getElementById('dropdown2');
    const provinceList = document.getElementById('province-list');
    const locationList = document.getElementById("location-list");
    let selectedLocationLists = [];
    const selectedLocationsEl = document.getElementById("location-selected-list");
    if (type1 == null || type1 == undefined) type1 = "room";

    let el = document.getElementById(type1);
    if (el) {
        el.classList.add("active");
    }

    let listLocationSelected = sessionStorage.getItem('selectedLocationLists');
    let provinceId = sessionStorage.getItem('provinceId');
    let provinceName = sessionStorage.getItem('provinceName');
    let searchInput = document.getElementById('provinceSelected');
    if (listLocationSelected != null && listLocationSelected != undefined && listLocationSelected != '') {
        let html = '';
        listLocationSelected = JSON.parse(listLocationSelected);
        selectedLocationLists = listLocationSelected;
        if (listLocationSelected.length != 0) {
            listLocationSelected.forEach(item => {
                html += `<button class="bg-blue-100 text-blue-700 px-3 py-1 dropdown2-item rounded-full text-sm flex items-center gap-2"><span>${item.locationName}</span><button class="text-blue-600 hover:text-red-500 font-bold">×</button></button>`;
            });
        } 
        $('#location-selected-list').html(html);
    }

    let slideIndex = 0;
    let slides = [];
    let locations = [];

    getAllData();

    async function getAllData() {
        try {
            const [properties, sliders,location1s] = await Promise.all([
                propertyService.getAllproperty(),

                fetch(`${urlBase}/api/slider`).then(res => res.json()),
                getAllLocation()
            ]);
            if(location1s){
                locations = location1s;
                let html = '';
                $('#locationProvinder').html('');
                location1s.forEach(item => {
                    html += `<div class="location-item location-province" onclick="handleProvince(this)" data-value="${item.name}" data-id="${item.id}">${item.name}</div>`;
                });
                $('#locationProvinder').html(html);
            }

            if (sliders && sliders.length > 0) {
                // Cập nhật slider với dữ liệu từ API slider
                updateSlider(sliders);
            } else {
                document.getElementById('sliderContainer').innerHTML = '<p>Không có slider để hiển thị.</p>';
            }

            if (properties && properties.length > 0) {
                // Phân chia danh sách
                const featuredProperties = properties.filter(item => item.promotionPackageName != null);
                const recommendedProperties = properties.filter(item => item.promotionPackageName == null)
                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

                // Hiển thị Bất động sản nổi bật
                let featuredHtml = '';
                featuredProperties.forEach(item => {
                    featuredHtml += createPropertyCard(item);
                });
                document.getElementById('featuredProperties').innerHTML = featuredHtml || '<p>Không có bất động sản nổi bật.</p>';

                // Hiển thị Bất động sản dành cho bạn
                let recommendedHtml = '';
                recommendedProperties.forEach(item => {
                    recommendedHtml += createPropertyCard(item);
                });
                document.getElementById('recommendedProperties').innerHTML = recommendedHtml || '<p>Không có bất động sản dành cho bạn.</p>';
            } else {
                document.getElementById('featuredProperties').innerHTML = '<p>Không có bất động sản nổi bật.</p>';
                document.getElementById('recommendedProperties').innerHTML = '<p>Không có bất động sản dành cho bạn.</p>';
            }

            listNewPost = await propertyService.getNewPost();
            let htmlNew = '';
            listNewPost.forEach(item => {
                const imageUrl = item.images && item.images.length > 0 && item.images[0] && item.images[0].imageUrl 
                    ? (item.images[0].imageUrl.includes('http') ? item.images[0].imageUrl : urlBase + item.images[0].imageUrl)
                    : '/image/default-news.jpg'; // Default image path
                
                htmlNew += `<div style="cursor:pointer" onclick="window.location.href='/Home/NewDetail/${item.id}'" class="p-3 flex gap-2 items-start bg-white rounded-xl shadow-md overflow-hidden border border-gray-100 hover:shadow-lg transition-all duration-300">
                        <img src="${imageUrl}" onerror="handleImageError(this)" alt="tin" class="w-14 h-14 rounded object-cover" />
                        <div>
                            <div class="text-sm font-medium text-gray-800 leading-snug line-clamp-2">
                                ${item.title || 'Không có tiêu đề'}
                            </div>
                            <div class="text-xs text-gray-500">${timeAgo(item.publishedAt)}</div>
                        </div>
                    </div>`
            });
            $('#listNew').html(htmlNew);
            let provinceId = sessionStorage.getItem('provinceId');
            if(provinceId){
                let provinceName = sessionStorage.getItem('provinceName');
                $('#provinceSelected').attr('data-id', provinceId);
                $('#provinceSelected').attr('data-value', provinceName);
                $('#provinceSelected').text(provinceName);
            }



        } catch (error) {
            console.error('Lỗi khi lấy dữ liệu:', error);
            document.getElementById('featuredProperties').innerHTML = '<p>Lỗi khi tải dữ liệu.</p>';
            document.getElementById('recommendedProperties').innerHTML = '<p>Lỗi khi tải dữ liệu.</p>';
            document.getElementById('sliderContainer').innerHTML = '<p>Lỗi khi tải slider.</p>';
        }
    }

    let listLocationName = [];
    let listLocationBackup = [];
    locationInput.addEventListener("input", () => {
        listLocationBackup = [];
        renderLocations(searchInput.dataset.id);
    });

     locationInput.addEventListener("focus", () => {
         dropdown2.classList.remove("hidden");
         renderLocations(searchInput.dataset.id);
     });

     document.addEventListener("click", (e) => {
        if (!e.target.classList.contains("dropdown2")) {
            dropdown2.classList.add("hidden");
        }
    });

    function renderSelectedLocations() {
        selectedLocationsEl.innerHTML = "";
        selectedLocationLists
        .forEach(loc => {
        const tag = document.createElement("div");
        tag.className = "bg-blue-100 text-blue-700 px-3 py-1 dropdown2-item rounded-full text-sm flex items-center gap-2";
        tag.innerHTML = `<span>${loc.locationName}</span>
                            <button class="text-blue-600 hover:text-red-500 font-bold">×</button>`;
        tag.querySelector("button").addEventListener("click", () => {
            selectedLocationLists = selectedLocationLists.filter(l => l.locationName !== loc.locationName);
            dropdown2.style.height = 25.3 + 2.1 * selectedLocationLists.length + 'rem';
            renderSelectedLocations();
        });
        selectedLocationsEl.appendChild(tag);
        });
    }

    function selectProvinceItem(id) {
        selectedLocationsEl.innerHTML = "";
        selectedLocationLists = [];
        renderSelectedLocations();
        listLocationBackup = [];
        dropdown2.style.height = 25.3 + 2.1 * selectedLocationLists.length + 'rem';
        renderLocations(id);
    }


    function renderLocations(id = -1) {
        locationList.innerHTML = "";
        if(listLocationBackup.length == 0){
            const provinceItem = locations.filter(l => l.id == id)[0];
            provinceItem.wards.forEach(ward => {
                    ward.streets.forEach(street => {
                        if(ward.id != 0 && street.id != 0){
                            let itemValue = { province:{id: provinceItem.id,
                                name: provinceItem.name},
                                ward : {id:ward.id,name: ward.name },
                                street: {id: street.id,name:street.name },
                                locationName : `${street.name}, ${ward.name}, ${provinceItem.name}`
                            };
                            listLocationBackup.push(itemValue);
                        }
                    })
            })
        }

        listLocationName = listLocationBackup;
        listLocationName = listLocationName.filter(p => p.locationName.toLowerCase().includes(locationInput.value.toLowerCase()));
        listLocationName.forEach(loc => {
            const li = document.createElement("li");
            li.className = "cursor-pointer py-1 hover:bg-gray-100 flex items-center gap-1 dropdown2-item";
            li.innerHTML = `<span class="text-blue-500 ml-4"><i class="fas fa-map-marker-alt text-gray-500 mr-2"></i></span><span>${loc.locationName}</span>`;
            li.addEventListener("click", () => selectLocation(loc));
            locationList.appendChild(li);
        });
    }


    function selectLocation(loc) {
        let findIndex = selectedLocationLists.findIndex(p => p.province.id == loc.province.id
            && p.ward.id == loc.ward.id
            && p.street.id == loc.street.id);
        if(findIndex != -1){
            alert('Địa điểm đã được chọn trước đó');
            return;
        }
        if (selectedLocationLists.length >= 5){
            alert('Đã tối đa 5 địa điểm');
            return;
        }
        selectedLocationLists.push(loc);
        renderSelectedLocations();
        locationInput.value = "";
        renderLocations(searchInput.dataset.id);
        // locationDropdown.classList.add("hidden");
    }


    function updateSlider(sliders) {
        const sliderContainer = document.getElementById('sliderContainer');
        const sliderDots = document.getElementById('sliderDots');

      
        slides = sliders.map(item => `
            <div class="slider-item-wrapper" style="width: 100%;height: 100%;flex-shrink: 0;display: flex;justify-content: center;align-items: center;overflow: hidden;">
                <img src="${item.imageUrl?.includes('http') ? item.imageUrl : urlBase + item.imageUrl}" alt="${item.title}" class="slider-item">
            </div>
        `);
        sliderContainer.innerHTML = slides.join('');
        sliderDots.innerHTML = slides.map((_, index) => `<span class="slider-dot" onclick="currentSlide(${index})"></span>`).join('');
        showSlides(slideIndex);
    }

    function handleProvince(el){
        let val = $(el).data('value');
        let id = $(el).data('id');
        $('#provinceSelected').attr('data-id', id);
        $('#provinceSelected').attr('data-value', val);
        $('#provinceSelected').html(val);
        listLocationBackup = [];
        dropdown2.classList.add('hidden');
        $('#locationBtn').click();
    }

    function showSlides(n) {
        const sliderContainer = document.getElementById('sliderContainer');
        const dots = document.getElementsByClassName('slider-dot');
        if (n >= slides.length) slideIndex = 0;
        if (n < 0) slideIndex = slides.length - 1;
        sliderContainer.style.transform = `translateX(-${slideIndex * 100}%)`;
        for (let i = 0; i < dots.length; i++) {
            dots[i].classList.remove('active');
        }
        if (dots[slideIndex]) dots[slideIndex].classList.add('active');
    }

    function moveSlide(n) {
        showSlides(slideIndex += n);
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function createPropertyCard(item) {
        //console.log(item);
        return `
            <div id="card-property-${item.id}" class="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100 hover:shadow-lg transition-all duration-300" data-id="${item.id}">
                <!-- Image and Buttons -->
                <div class="relative group">
                    <img
                        onerror="handleImageError(this)"
                        src="${item.primaryImageUrl?.includes('http') ? item.primaryImageUrl : urlBase + item.primaryImageUrl}"
                        alt="${item.type}"
                        class="w-full h-48 object-cover transition-opacity duration-300 group-hover:opacity-90"
                    >
                    <div class="absolute top-2 right-2 flex flex-col gap-2">
                        <button
                            id="btnFavourite"
                            onclick="updateFavorite(${item.id}, ${item.isFavorite})"
                            class="p-2 bg-white rounded-full shadow hover:bg-red-100 transition-all duration-200"
                        >
                            ${item.isFavorite
                                ? `<svg id="heart-icon-${item.id}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 7.284a5.754 5.754 0 00-9.406-1.045L12 7.158l-.346-.92A5.754 5.754 0 002.248 7.284c-1.1 2.238-.432 4.92 1.528 6.596l7.04 6.211a.75.75 0 001.368 0l7.04-6.211c1.96-1.676 2.628-4.358 1.528-6.596z" />
                                   </svg>`
                                : `<svg id="heart-icon-${item.id}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-gray-500 hover:text-red-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 7.284a5.754 5.754 0 00-9.406-1.045L12 7.158l-.346-.92A5.754 5.754 0 002.248 7.284c-1.1 2.238-.432 4.92 1.528 6.596l7.04 6.211a.75.75 0 001.368 0l7.04-6.211c1.96-1.676 2.628-4.358 1.528-6.596z" />
                                   </svg>`
                            }
                        </button>
                        <button
                            id="btn-compare-${item.id}"
                            onclick="addToCompare(${item.id})"
                            class="p-2 bg-white rounded-full shadow hover:bg-blue-100 transition-all duration-200"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-blue-500">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
                            </svg>
                        </button>
                        <button
                            id="interest-${item.id}"
                            onclick="clickInterest(${item.id},${item.isInterested},${item.interestedStatus})"
                            class="p-2 bg-white rounded-full shadow hover:bg-blue-100 transition-all duration-200"
                        >
                            ${item.isInterested ? '<i class="fa-solid fa-square-plus" style="color:red"></i>' : '<i class="fa-solid fa-square-plus"></i>'}
                            
                        </button>
                    </div>
                </div>

                <!-- Content -->
                <div class="p-4">
                    <h3
                        onclick="window.location.href='/Home/Detail/${item.id}'"
                        style="cursor:pointer"
                        class="text-lg font-semibold text-orange-600 hover:text-orange-700 transition-colors duration-200 uppercase line-clamp-2"
                    >
                        ${item.title}
                    </h3>
                    <div class="text-xl font-bold text-green-600 mt-2">
                        ${formatVietnameseNumber(item.price)} / tháng
                    </div>
                    <div class="text-sm text-gray-500 mt-1">
                        ${item.area} m² · ${item.detailedAddress}, ${item.street}, ${item.ward}, ${item.province}
                    </div>
                    <p class="text-sm text-gray-600 mt-2 line-clamp-3">
                        ${item.description}
                    </p>
                </div>

                <!-- Footer -->
                <div class="flex items-center justify-between px-4 py-3 bg-gray-50">
                    <div class="flex items-center gap-3">
                        <div style="cursor:pointer" onclick="window.location.href='/Home/Landlord/${item.landlordId}'" class="w-10 h-10 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center">
                            <img
                                onerror="handleImageError(this)"
                                src="${item.landlordProfilePictureUrl?.includes('http') ? item.landlordProfilePictureUrl : urlBase + item.landlordProfilePictureUrl}"
                                alt="landlordProfilePictureUrl"
                                class="w-full h-full object-cover"
                            >
                        </div>
                        <div class="text-sm text-gray-700">
                            <span style="cursor:pointer" onclick="window.location.href='/Home/Landlord/${item.landlordId}'">${item.landlordName}</span> <span class="text-gray-400 text-xs">(${timeAgo(item.createdAt)})</span>
                        </div>
                    </div>
                    <div class=" flex flex-col gap-2 items-end">
                        <div class="flex items-center text-yellow-500 ml-2">
                            <span class="mr-1 font-semibold text-gray-800" id="avgStar">${item.rating == 0 ? 'Chưa có đánh giá' : item.rating}</span>
                            ${item.rating != 0 ? `
                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" style="width:15px;height:15px" viewBox="0 0 24 24">
                                <path d="M12 .587l3.668 7.568L24 9.423l-6 5.854L19.335 24 12 20.202 4.665 24 6 15.277 0 9.423l8.332-1.268z" />
                            </svg>` : ''}
                        </div>

                        <div class="flex items-center text-gray-600 ml-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" style="width:15px;height:15px" viewBox="0 0 24 24">
                                <path d="M20 2H4C1.8 2 0 3.8 0 6v12c0 2.2 1.8 4 4 4h4v2.4c0 .6.4 1 1 1 .2 0 .5-.1.7-.3L14.3 22H20c2.2 0 4-1.8 4-4V6c0-2.2-1.8-4-4-4z" />
                            </svg>
                            <span class="ml-1"><span id ="totalComment">${item.ratingNo}</span><span> bình luận</span></span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // Tab switching
    document.querySelectorAll('.tab-item').forEach(tab => {
        tab.addEventListener('click', function() {
            document.querySelectorAll('.tab-item').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Dropdown toggles (áp dụng giống Layout)
    function setupDropdown(buttonId, menuId) {
        const button = document.getElementById(buttonId);
        const menu = document.getElementById(menuId);

        button.addEventListener('click', function (e) {
            //console.log('Clicked:', buttonId);
            e.stopPropagation();
            // Đóng các dropdown khác
            document.querySelectorAll('.dropdown-menu.active').forEach(m => {
                if (m !== menu) {
                    m.classList.remove('active');
                    m.previousElementSibling.classList.remove('active');
                }
            });
            button.classList.toggle('active');
            menu.classList.toggle('active');
            dropdown2.classList.add('hidden');
            //console.log('Dropdown menu', menuId, 'active:', menu.classList.contains('active'));
        });

        menu.addEventListener('click', function (e) {
            e.stopPropagation();
        });
    }

    // Chỉ add 1 lần event click cho document để đóng dropdown
    if (!window._dropdownDocClick) {
        document.addEventListener('click', function () {
            document.querySelectorAll('.dropdown-button').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.dropdown-menu').forEach(m => m.classList.remove('active'));
        });
        window._dropdownDocClick = true;
    }

    setupDropdown('locationBtn', 'locationMenu');
    setupDropdown('priceBtn', 'priceMenu');
    setupDropdown('propertyTypeBtn', 'propertyTypeMenu');
    setupDropdown('areaBtn', 'areaMenu');

    // Location selection
    document.querySelectorAll('#locationMenu .location-item').forEach(item => {
        item.addEventListener('click', function() {
            const text = this.textContent;
            document.querySelector('#locationBtn span:first-child').textContent = `📍 ${text}`;
            document.getElementById('locationBtn').classList.remove('active');
            document.getElementById('locationMenu').classList.remove('active');
        });
    });

    // Property Type selection
    document.querySelectorAll('#propertyTypeMenu .location-item').forEach(item => {
        item.addEventListener('click', function() {
            const text = this.textContent;
            document.querySelector('#propertyTypeBtn span:first-child').textContent = text;
            document.getElementById('propertyTypeBtn').classList.remove('active');
            document.getElementById('propertyTypeMenu').classList.remove('active');
        });
    });

    // Area selection
    document.querySelectorAll('#areaMenu .location-item').forEach(item => {
        item.addEventListener('click', function() {
            const text = this.textContent;
            document.querySelector('#areaBtn span:first-child').textContent = text;
            document.getElementById('areaBtn').classList.remove('active');
            document.getElementById('areaMenu').classList.remove('active');
        });
    });

    // Price range functionality
    let minPrice = 0;
    let maxPrice = 60000;

    function updatePriceDisplay() {
        document.getElementById('minPriceDisplay').textContent = `${minPrice} ${minPrice < 1000 ? 'triệu' : 'tỷ'}`;
        document.getElementById('maxPriceDisplay').textContent = `${maxPrice < 1000 ? maxPrice + ' triệu' : (maxPrice/1000) + ' tỷ'}`;

        if (minPrice === 0 && maxPrice === 60000) {
            document.getElementById('priceDisplay').textContent = 'Mức giá';
        } else {
            document.getElementById('priceDisplay').textContent = `${minPrice} - ${maxPrice < 1000 ? maxPrice + ' triệu' : (maxPrice/1000) + ' tỷ'}`;
        }
    }

    // Quick price options
    document.querySelectorAll('.quick-option').forEach(option => {
        option.addEventListener('click', function() {
            document.querySelectorAll('.quick-option').forEach(o => o.classList.remove('active'));
            this.classList.add('active');

            const range = this.dataset.range;
            switch(range) {
                case 'all':
                    minPrice = 0;
                    maxPrice = 60000;
                    break;
                case 'under500':
                    minPrice = 0;
                    maxPrice = 500;
                    break;
                case '500-800':
                    minPrice = 500;
                    maxPrice = 800;
                    break;
                case '800-1000':
                    minPrice = 800;
                    maxPrice = 1000;
                    break;
                case '1-2':
                    minPrice = 1000;
                    maxPrice = 2000;
                    break;
                case 'custom':
                    minPrice = 0;
                    maxPrice = 60000;
                    break;
            }
            updatePriceDisplay();
        });
    });

    // Price input handling
    // document.getElementById('minPriceInput').addEventListener('input', function() {
    //     minPrice = parseInt(this.value) || 0;
    //     updatePriceDisplay();
    // });

    // document.getElementById('maxPriceInput').addEventListener('input', function() {
    //     maxPrice = parseInt(this.value) || 60000;
    //     updatePriceDisplay();
    // });

    // // Initialize
    // updatePriceDisplay();

    // Search function
    function performSearch() {
        //const location = document.querySelector('#locationBtn span:first-child').textContent.replace('📍 ', '');
        //const searchText = document.getElementById('searchInput').value;
        //const propertyType = document.querySelector('#propertyTypeBtn span:first-child').textContent;
        //const minPriceValue = minPrice;
        //const maxPriceValue = maxPrice;
        //const area = document.querySelector('#areaBtn span:first-child').textContent;
        //const tab = document.querySelector('.tab-item.active').dataset.tab;

        const provinceSelected = document.getElementById('provinceSelected').dataset.id;
        const filterData = {
            //location: selectedLocationLists.length == 0 ? provinceSelected : selectedLocationLists,
            //searchText,
            //propertyType,
            minRoom: $('#minInput').val(),
            maxRoom: $('#maxInput').val(),
            minPrice: $('#minInputPrice').val(),
            maxPrice: $('#maxInputPrice').val(),
            minArea: $('#minInputArea').val(),
            maxArea: $('#maxInputArea').val(),
            //type: tab === 'rent' ? 'room' : (tab === 'buy' ? 'apartment' : 'project') // Map tab to type
        };
        sessionStorage.setItem('selectedLocationLists',JSON.stringify(selectedLocationLists));
        sessionStorage.setItem('provinceId',provinceSelected);
        sessionStorage.setItem('provinceName',$('#provinceSelected').data('value'));
        sessionStorage.setItem('filterData', JSON.stringify(filterData));
        window.location.reload();
    }

    // Enter key search
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });

    function applyFilters() {
        const province = document.getElementById('provinceFilter').value;
        const minPrice = document.getElementById('minPrice').value || 0;
        const maxPrice = document.getElementById('maxPrice').value || 100;
        const minArea = document.getElementById('minArea').value || 0;
        const maxArea = document.getElementById('maxArea').value || 100;
        const type = document.getElementById('typeFilter').value || 'room';

        const filterData = {
            minPrice,
            maxPrice,
            minArea,
            maxArea,
            type
        };
        if (province) filterData.provinces = [province];

        sessionStorage.setItem('filterData', JSON.stringify(filterData));
        window.location.reload();
    }

    function filterPrice(event, minPrice, maxPrice) {
        event.preventDefault();
        let body = {
            minPrice, maxPrice
        };
        sessionStorage.setItem('filterData', JSON.stringify(body));
        window.location.reload();
    }

    function filterArea(event, minArea, maxArea) {
        event.preventDefault();
        let body = {
            minArea, maxArea
        };
        sessionStorage.setItem('filterData', JSON.stringify(body));
        window.location.reload();
    }

    async function updateFavorite(id, isFavorite) {
        const isAuthenticated = authService.isAuthenticated();
        if (!isAuthenticated) window.location.href = '/Auth/Login';
        else {
            if (!isFavorite) addToFavourite(id);
            else removeToFavorite(id);
        }
    }

    async function startChatWithLandlord(landlordId) {
        const token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/Auth/Login";
            return;
        }

        const renterId = parseInt(getUserIdFromToken(token));
        const dto = {
            renterId: parseInt(renterId),
            landlordId: parseInt(landlordId),
            propertyId: null
        };

        try {
            const res = await fetch("https://localhost:7031/api/Chat/Create-Conversation", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(dto)
            });

            if (!res.ok) {
                const err = await res.text();
                alert("Không thể mở cuộc trò chuyện: " + err);
                return;
            }

            const conversation = await res.json();
            if (conversation && conversation.id) {
                window.location.href = `/Chat/Index?conversationId=${conversation.id}`;
            }
        } catch (error) {
            console.error("Lỗi khi tạo/mở cuộc trò chuyện:", error);
        }
    }

    let defaultMin = 0;
    let defaultMax = 100;
    let defaultMinPrice = 0;
    let defaultMaxPrice = 100;
    let defaultMinRoom = 0;
    let defaultMaxRoom = 15;
    let body = sessionStorage.getItem('filterData');
    if (body != null && body != undefined && body != '') {
        body = JSON.parse(body);
        defaultMin = body.minArea;
        defaultMax = body.maxArea;
        defaultMinRoom = body.minRoom;
        defaultMaxRoom = body.maxRoom;
        defaultMinPrice = body.minPrice;
        defaultMaxPrice = body.maxPrice;
    } else {
    }

        setupDoubleRangeSlider({
            rangeMinId: "rangeMinArea",
            rangeMaxId: "rangeMaxArea",
            inputMinId: "minInputArea",
            inputMaxId: "maxInputArea",
            labelMinId: "minLabelArea",
            labelMaxId: "maxLabelArea",
            trackId: "rangeTrackArea",
            maxValue: 100,
            labelInfo: 'm<sup>2</sup>',
            defaultMin: defaultMin,
            defaultMax: defaultMax
        });

        setupDoubleRangeSlider({
            rangeMinId: "rangeMinPrice",
            rangeMaxId: "rangeMaxPrice",
            inputMinId: "minInputPrice",
            inputMaxId: "maxInputPrice",
            labelMinId: "minLabelPrice",
            labelMaxId: "maxLabelPrice",
            trackId: "rangeTrackPrice",
            maxValue: 100,
            labelInfo: 'triệu',
            defaultMin: defaultMinPrice,
            defaultMax: defaultMaxPrice
        });


        setupDoubleRangeSlider({
            rangeMinId: "rangeMin",
            rangeMaxId: "rangeMax",
            inputMinId: "minInput",
            inputMaxId: "maxInput",
            labelMinId: "minLabel",
            labelMaxId: "maxLabel",
            trackId: "rangeTrack",
            maxValue: 15,
            defaultMin: defaultMinRoom,
            defaultMax: defaultMaxRoom
        });


    function setupDoubleRangeSlider({rangeMinId,rangeMaxId,inputMinId,inputMaxId,
        labelMinId,labelMaxId,trackId,maxValue = 15,labelInfo = '',defaultMin = 0,defaultMax = maxValue
    }) {
        const rangeMin = document.getElementById(rangeMinId);
        const rangeMax = document.getElementById(rangeMaxId);
        const minInput = document.getElementById(inputMinId);
        const maxInput = document.getElementById(inputMaxId);
        const minLabel = document.getElementById(labelMinId);
        const maxLabel = document.getElementById(labelMaxId);
        const rangeTrack = document.getElementById(trackId);

        rangeMin.value = defaultMin;
        rangeMax.value = defaultMax;
        minInput.value = defaultMin;
        maxInput.value = defaultMax;

        function updateRangeUI() {
            const min = parseInt(rangeMin.value);
            const max = parseInt(rangeMax.value);

            minInput.value = min;
            maxInput.value = max;

            minLabel.innerHTML = min + ' ' + labelInfo;
            maxLabel.innerHTML = max + ' ' + labelInfo;

            const minPercent = (min / maxValue) * 100;
            const maxPercent = (max / maxValue) * 100;
            rangeTrack.style.left = minPercent + "%";
            rangeTrack.style.right = (100 - maxPercent) + "%";
        }

        rangeMin.addEventListener("input", function () {
            let minVal = parseInt(rangeMin.value);
            let maxVal = parseInt(rangeMax.value);

            if (minVal > maxVal) {
                minVal = maxVal;
                rangeMin.value = maxVal;
            }
            updateRangeUI();
        });

        rangeMax.addEventListener("input", function () {
            let minVal = parseInt(rangeMin.value);
            let maxVal = parseInt(rangeMax.value);

            if (maxVal < minVal) {
                maxVal = minVal;
                rangeMax.value = minVal;
            }
            updateRangeUI();
        });

        minInput.addEventListener("input", function () {
            let minVal = parseInt(minInput.value);
            let maxVal = parseInt(maxInput.value);

            if (minVal > maxVal) {
                minVal = maxVal;
                minInput.value = maxVal;
            }
            rangeMin.value = minInput.value;
            updateRangeUI();
        });

        maxInput.addEventListener("input", function () {
            let minVal = parseInt(minInput.value);
            let maxVal = parseInt(maxInput.value);

            if (maxVal < minVal) {
                maxVal = minVal;
                maxInput.value = minVal;
            }
            rangeMax.value = maxInput.value;
            updateRangeUI();
        });

        updateRangeUI();
    }

    function getUserIdFromToken(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return parseInt(payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"]);
        } catch (error) {
            console.error("Không thể giải mã token:", error);
            return null;
        }
    }
</script>
@{
    // ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}
<link rel="stylesheet" href="~/css/HomePage.css" />

<!-- Search Bar chồng lên Slider -->
<div class="slider">
    <div class="search-container">
        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-item" data-tab="buy">Bất động sản cho thuê</button>
            @*  <button class="tab-item" data-tab="rent" onclick="window.location.href='/?type=house'" id="house" data-type="house">Nhà nguyên căn</button>
            <button class="tab-item" data-tab="project" onclick="window.location.href='/?type=apartment'" id="apartment" value="apartment">Căn hộ</button> *@
        </div>

        <!-- Search Form -->
        <div class="search-form">
            <div class="search-row">
                <!-- Top row: Location + Search Input + Search Button -->
                <div class="search-top-row">
                    <!-- Location Input -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="locationBtn">
                                <span id="provinceSelected" data-value="Ho Chi Minh City" data-id="1">Ho Chi Minh City</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="locationMenu">
                                <div class="location-dropdown" id="locationProvinder">
                                    @*                                     <div class="location-item" data-value="hcm">Hồ Chí Minh</div>
                                    <div class="location-item" data-value="hanoi">Hà Nội</div>
                                    <div class="location-item" data-value="danang">Đà Nẵng</div>
                                    <div class="location-item" data-value="daklak">Đắk Lắk</div>
                                    <div class="location-item" data-value="cantho">Cần Thơ</div> *@
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Main Search Input -->
                    <div class="input-group">
                        <div class="location-input" style="position:relative">
                            <input type="text" class="main-input dropdown2"
                                   placeholder="Nhập tối đa 5 địa điểm, dự án. VD: Quận Hoàn Kiếm, Quận Đống Đa"
                                   id="searchInput">
                            <div id="dropdown2" style="height:20rem;top:100%" class="dropdown2 absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg hidden">
                                <div class="p-4 dropdown2">
                                    <div class="p-4 dropdown2">
                                        <p class="font-semibold text-sm text-gray-600 mb-2 mt-2 dropdown2">Tất cả địa điểm</p>
                                        <div id="location-list" style="max-height:14rem;left:0" class="absolute z-10 mt-1 w-full bg-white overflow-y-auto dropdown2">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div>
                        <!-- Search Button -->
                        <button class="search-button" onclick="performSearch()">
                            🔍 Tìm kiếm
                        </button>

                        <!-- AI Search Button -->
                        <button class="ai-search-button search-button" onclick="performAISearch()">
                            🤖 Tìm kiếm AI
                        </button>
                    </div>

                </div>
                <div>
                    <div id="location-selected-list" class="flex flex-wrap gap-2">
                    </div>
                </div>
                <!-- Filter Row - 3 dropdowns ngang hàng -->
                <div class="filter-row">
                    <!-- Property Type -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="propertyTypeBtn">
                                <span id="propertyTypeDisplay">Loại bất động sản</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="propertyTypeMenu">
                                <div class="dropdown-content">
                                    <div class="location-dropdown" id="propertyTypeList">
                                        <!-- Property types will be populated dynamically via JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Price Range -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="priceBtn">
                                <span id="priceDisplay">Mức giá</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="priceMenu" style="overflow:hidden">
                                <div class="dropdown-content">
                                    <div class="flex justify-between items-center mb-2 text-sm">
                                        <div>
                                            Từ: <span class="font-semibold text-cyan-700" id="minLabelPrice"></span>
                                        </div>
                                        <div>
                                            Đến: <span class="font-semibold text-cyan-700" id="maxLabelPrice"></span>
                                        </div>
                                    </div>

                                    <div class="flex items-center gap-2 mb-2">
                                        <input id="minInputPrice" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                                        <span>→</span>
                                        <input id="maxInputPrice" type="number" class="w-full border rounded px-2 py-1 text-center" value="100" max="100" />
                                    </div>

                                    <div class="relative h-4">
                                        <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                                        <div id="rangeTrackPrice" class="absolute bgRange h-full bg-cyan-600 rounded-full"></div>

                                        <input id="rangeMinPrice" type="range" min="0" max="100" value="0"
                                               class="absolute rangeCls w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                                        <input id="rangeMaxPrice" type="range" min="0" max="100" value="100"
                                               class="absolute rangeCls w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Area -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="areaBtn">
                                <span id="areaDisplay">Diện tích</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="areaMenu">
                                <div class="dropdown-content">
                                    <div class="location-dropdown" style="overflow:hidden">
                                        <div class="flex justify-between items-center mb-2 text-sm">
                                            <div>
                                                Từ: <span class="font-semibold text-cyan-700" id="minLabelArea"></span>
                                            </div>
                                            <div>
                                                Đến: <span class="font-semibold text-cyan-700" id="maxLabelArea"></span>
                                            </div>
                                        </div>

                                        <div class="flex items-center gap-2 mb-2">
                                            <input id="minInputArea" type="number" class="w-full border rounded px-2 py-1 text-center" value="0" min="0" />
                                            <span>→</span>
                                            <input id="maxInputArea" type="number" class="w-full border rounded px-2 py-1 text-center" value="100" max="100" />
                                        </div>

                                        <div class="relative h-4">
                                            <div class="absolute inset-0 bg-gray-200 rounded-full"></div>

                                            <div id="rangeTrackArea" class="absolute h-full bg-cyan-600 rounded-full"></div>

                                            <input id="rangeMinArea" type="range" min="0" max="100" value="0"
                                                   class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-min" />
                                            <input id="rangeMaxArea" type="range" min="0" max="100" value="100"
                                                   class="absolute w-full h-4 appearance-none bg-transparent pointer-events-none thumb-max" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="slider-container" id="sliderContainer"></div>
    <button class="slider-button prev" onclick="moveSlide(-1)">&#10094;</button>
    <button class="slider-button next" onclick="moveSlide(1)">&#10095;</button>
    <div class="slider-dots" id="sliderDots"></div>
</div>

<!-- Danh sách Bất động sản nổi bật -->
<div class="section-header">
    <h2 class="section-title">🏆 Bất động sản nổi bật</h2>
    <div class="section-pagination">
        <button id="featuredPrev" onclick="changeFeaturedPage(-1)" class="pagination-btn" disabled>‹</button>
        <span id="featuredPageInfo" class="pagination-info">1/1</span>
        <button id="featuredNext" onclick="changeFeaturedPage(1)" class="pagination-btn">›</button>
    </div>
</div>
<div id="featuredProperties" class="properties-grid"></div>
<div class="section-footer">
    <button onclick="viewAllFeatured()" class="view-more-btn">
        <span>Xem tất cả bất động sản</span>
        <i class="fas fa-arrow-right"></i>
    </button>
</div>

<!-- Danh sách Bất động sản dành cho bạn -->
<div class="section-header">
    <h2 class="section-title">💡 Bất động sản dành cho bạn</h2>
    <div class="section-pagination">
        <button id="recommendedPrev" onclick="changeRecommendedPage(-1)" class="pagination-btn" disabled>‹</button>
        <span id="recommendedPageInfo" class="pagination-info">1/1</span>
        <button id="recommendedNext" onclick="changeRecommendedPage(1)" class="pagination-btn">›</button>
    </div>
</div>
<div id="recommendedProperties" class="properties-grid"></div>
<div class="section-footer">
    <button onclick="viewAllRecommended()" class="view-more-btn">
        <span>Xem tất cả bất động sản</span>
        <i class="fas fa-arrow-right"></i>
    </button>
</div>
<!-- Danh sách Tin mới đăng -->
<h2 class="section-title">📰 Tin mới đăng</h2>
<div id="listNew" class="properties-grid"></div>
@* <script src="~/js/propertyService.js" asp-append-version="true"></script> *@
<script>
    let urlBase = "http://194.233.81.64:5000";
    let pageNo = sessionStorage.getItem('pageNo') ?? 1;
    let urlParams1 = new URLSearchParams(window.location.search);
    let type1 = urlParams1.get('type');
    const locationInput = document.getElementById('searchInput');
    const dropdown2 = document.getElementById('dropdown2');
    const provinceList = document.getElementById('province-list');
    const locationList = document.getElementById("location-list");
    let selectedLocationLists = [];
    const selectedLocationsEl = document.getElementById("location-selected-list");
    let propertyTypes = []; // Store property types from API
    let selectedPropertyType = null; // Store the selected property type

    // Only add active class if type is specified in URL
    if (type1 && type1 !== null && type1 !== undefined) {
        let el = document.getElementById(type1);
        if (el) {
            el.classList.add("active");
        }
    }

    // Load session data
    let listLocationSelected = sessionStorage.getItem('selectedLocationLists');
    let provinceId = sessionStorage.getItem('provinceId');
    let provinceName = sessionStorage.getItem('provinceName');
    let searchInput = document.getElementById('provinceSelected');
    if (listLocationSelected != null && listLocationSelected != undefined && listLocationSelected != '') {
        let html = '';
        listLocationSelected = JSON.parse(listLocationSelected);
        selectedLocationLists = listLocationSelected;
        if (listLocationSelected.length != 0) {
            listLocationSelected.forEach(item => {
                html += `<div class="bg-blue-100 text-blue-700 px-3 py-1 dropdown2-item rounded-full text-sm flex items-center gap-2"><span>${item.locationName}</span><button onclick="removeItem('${item.locationName}')" class="text-blue-600 hover:text-red-500 font-bold">×</button></div>`;
            });
        }
        $('#location-selected-list').html(html);
    }

    function prevIndex() {
        if (Number(pageNo) <= 1) sessionStorage.setItem('pageNo', 1);
        else sessionStorage.setItem('pageNo', Number(pageNo) - 1);
        window.location.reload();
    }

    function nextIndex() {
        sessionStorage.setItem('pageNo', Number(pageNo) + 1);
        window.location.reload();
    }

    function removeItem(locationName) {
        selectedLocationLists = selectedLocationLists.filter(l => l.locationName !== locationName);

        // Cập nhật ô search input dựa trên địa chỉ còn lại
        if (selectedLocationLists.length > 0) {
            // Nếu còn địa chỉ, hiển thị địa chỉ cuối cùng
            locationInput.value = selectedLocationLists[selectedLocationLists.length - 1].locationName;
        } else {
            // Nếu không còn địa chỉ nào, xóa nội dung ô search
            locationInput.value = "";
        }

        renderSelectedLocations();
    }

    let slideIndex = 0;
    let slides = [];
    let locations = [];

    // Pagination variables
    let featuredPage = 1;
    let recommendedPage = 1;
    let itemsPerPage = 4; // Hiển thị 5 BDS trên mỗi trang
    let allFeaturedProperties = [];
    let allRecommendedProperties = [];

    async function getAllData() {
        try {
            const [propertiesResponse, sliders, location1s, propertyTypesData] = await Promise.all([
                fetch(`${urlBase}/api/Property/homepage-allproperty`).then(res => res.json()),
                fetch(`${urlBase}/api/slider`).then(res => res.json()),
                getAllLocation(),
                fetch(`${urlBase}/api/PropertyType/GetAllPropertyTypes`).then(res => res.json()) // Fetch property types
            ]);

            // Xử lý response từ API mới - có thể cần extract data từ response
            let properties = propertiesResponse;
            if (propertiesResponse && propertiesResponse.data) {
                properties = propertiesResponse.data; // Nếu API trả về { data: [...] }
            }

            // Populate locations
            if (location1s) {
                locations = location1s;
                let html = '';
                $('#locationProvinder').html('');
                location1s.forEach(item => {
                    html += `<div class="location-item location-province" onclick="handleProvince(this)" data-value="${item.name}" data-id="${item.id}">${item.name}</div>`;
                });
                $('#locationProvinder').html(html);
            }

            // Populate property types
            if (propertyTypesData && propertyTypesData.length > 0) {
                propertyTypes = propertyTypesData;
                let html = '<div class="location-item" onclick="selectPropertyType(null)">Tất cả</div>'; // Add "All" option
                propertyTypes.forEach(item => {
                    html += `<div class="location-item" onclick="selectPropertyType('${item.name}')">${item.name}</div>`;
                });
                $('#propertyTypeList').html(html);
            } else {
                $('#propertyTypeList').html('<div class="location-item">Không có loại bất động sản</div>');
            }

            if (sliders && sliders.length > 0) {
                updateSlider(sliders);
            } else {
                document.getElementById('sliderContainer').innerHTML = '<p>Không có slider để hiển thị.</p>';
            }

            // Kiểm tra cấu trúc dữ liệu từ API mới
            console.log('Properties from API:', properties);

            if (properties && properties.length > 0) {
                // Bất động sản nổi bật: chỉ những BDS có promotionPackageName (tối đa 10)
                allFeaturedProperties = properties.filter(item => item.promotionPackageName != null && item.promotionPackageName.trim() !== '').slice(0, 10);

                // Bất động sản dành cho bạn: những BDS KHÔNG có promotionPackageName (tối đa 10)
                allRecommendedProperties = properties.filter(item => !item.promotionPackageName || item.promotionPackageName.trim() === '')
                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                    .slice(0, 10);

                // Reset to first page
                featuredPage = 1;
                recommendedPage = 1;

                // Display first page of each section
                displayFeaturedProperties();
                displayRecommendedProperties();
            } else {
                document.getElementById('featuredProperties').innerHTML = '<div class="empty-state">Không có bất động sản nổi bật</div>';
                document.getElementById('recommendedProperties').innerHTML = '<div class="empty-state">Không có bất động sản dành cho bạn</div>';
            }

            listNewPost = await propertyService.getNewPost();
            console.log('listNewPost',listNewPost);
            let htmlNew = '';
            listNewPost.forEach(item => {
                const imageUrl = item.images && item.images.length > 0 && item.images[0] && item.images[0].imageUrl
                    ? (item.images[0].imageUrl.includes('http') ? item.images[0].imageUrl : urlBase + item.images[0].imageUrl)
                    : '/image/default-news.jpg';
                htmlNew += `<div style="cursor:pointer" onclick="window.location.href='/Home/NewDetail/${item.id}'" class="news-card">
                        <img src="${imageUrl}" onerror="handleImageError(this)" alt="tin" class="news-image" />
                        <div class="news-content">
                            <div class="news-title">
                                ${item.title || 'Không có tiêu đề'}
                            </div>
                            <div class="news-date">${timeAgo(item.publishedAt)}</div>
                        </div>
                    </div>`;
            });
            $('#listNew').html(htmlNew);

            if (provinceId) {
                $('#provinceSelected').attr('data-id', provinceId);
                $('#provinceSelected').attr('data-value', provinceName);
                $('#provinceSelected').text(provinceName);
            }
        } catch (error) {
            console.error('Lỗi khi lấy dữ liệu:', error);
            document.getElementById('featuredProperties').innerHTML = '<div class="empty-state">Lỗi khi tải dữ liệu bất động sản</div>';
            document.getElementById('recommendedProperties').innerHTML = '<div class="empty-state">Lỗi khi tải dữ liệu bất động sản</div>';
            document.getElementById('sliderContainer').innerHTML = '<p>Lỗi khi tải slider.</p>';
        }
    }

    // Function to select a property type
    function selectPropertyType(typeName) {
        selectedPropertyType = typeName;
        const displayElement = document.querySelector('#propertyTypeBtn span:first-child');
        if (displayElement) {
            displayElement.textContent = typeName || 'Loại bất động sản';
        }

        // Close the dropdown
        document.getElementById('propertyTypeBtn').classList.remove('active');
        document.getElementById('propertyTypeMenu').classList.remove('active');
    }

    // Location input handling
    let listLocationName = [];
    let listLocationBackup = [];
    locationInput.addEventListener("input", () => {
        listLocationBackup = [];
        renderLocations(searchInput.dataset.id);
    });

    locationInput.addEventListener("focus", () => {
        dropdown2.classList.remove("hidden");
        renderLocations(searchInput.dataset.id);
    });

    document.addEventListener("click", (e) => {
        if (!e.target.classList.contains("dropdown2")) {
            dropdown2.classList.add("hidden");
        }
    });

    function renderSelectedLocations() {
        selectedLocationsEl.innerHTML = "";
        selectedLocationLists.forEach(loc => {
            const tag = document.createElement("div");
            tag.className = "bg-blue-100 text-blue-700 px-3 py-1 dropdown2-item rounded-full text-sm flex items-center gap-2";
            tag.innerHTML = `<span>${loc.locationName}</span>
                            <button class="text-blue-600 hover:text-red-500 font-bold">×</button>`;
            tag.querySelector("button").addEventListener("click", () => {
                selectedLocationLists = selectedLocationLists.filter(l => l.locationName !== loc.locationName);

                // Cập nhật ô search input dựa trên địa chỉ còn lại
                if (selectedLocationLists.length > 0) {
                    // Nếu còn địa chỉ, hiển thị địa chỉ cuối cùng
                    locationInput.value = selectedLocationLists[selectedLocationLists.length - 1].locationName;
                } else {
                    // Nếu không còn địa chỉ nào, xóa nội dung ô search
                    locationInput.value = "";
                }

                renderSelectedLocations();
            });
            selectedLocationsEl.appendChild(tag);
        });
    }

    function selectProvinceItem(id) {
        selectedLocationsEl.innerHTML = "";
        selectedLocationLists = [];
        renderSelectedLocations();
        listLocationBackup = [];

        // Xóa nội dung ô search input khi thay đổi tỉnh
        locationInput.value = "";

        dropdown2.style.height = 25.3 + 2.1 * selectedLocationLists.length + 'rem';
        renderLocations(id);
    }

    function renderLocations(id = -1) {
        locationList.innerHTML = "";
        if (listLocationBackup.length == 0) {
            const provinceItem = locations.filter(l => l.id == id)[0];
            provinceItem.wards.forEach(ward => {
                ward.streets.forEach(street => {
                    if (ward.id != 0 && street.id != 0) {
                        let itemValue = {
                            province: { id: provinceItem.id, name: provinceItem.name },
                            ward: { id: ward.id, name: ward.name },
                            street: { id: street.id, name: street.name },
                            locationName: `${street.name}, ${ward.name}, ${provinceItem.name}`
                        };
                        listLocationBackup.push(itemValue);
                    }
                });
            });
        }

        listLocationName = listLocationBackup;
        listLocationName = listLocationName.filter(p => p.locationName.toLowerCase().includes(locationInput.value.toLowerCase()));
        listLocationName.forEach(loc => {
            const li = document.createElement("li");
            li.className = "cursor-pointer py-1 hover:bg-gray-100 flex items-center gap-1 dropdown2-item";
            li.innerHTML = `<span class="text-blue-500 ml-4"><i class="fas fa-map-marker-alt text-gray-500 mr-2"></i></span><span>${loc.locationName}</span>`;
            li.addEventListener("click", () => selectLocation(loc));
            locationList.appendChild(li);
        });
    }

    function selectLocation(loc) {
        let findIndex = selectedLocationLists.findIndex(p => p.province.id == loc.province.id
            && p.ward.id == loc.ward.id
            && p.street.id == loc.street.id);
        if (findIndex != -1) {
            alert('Địa điểm đã được chọn trước đó');
            return;
        }
        if (selectedLocationLists.length >= 5) {
            alert('Đã tối đa 5 địa điểm');
            return;
        }
        selectedLocationLists.push(loc);

        // Cập nhật ô search input để hiển thị địa chỉ đã chọn
        locationInput.value = loc.locationName;

        renderSelectedLocations();
        renderLocations(searchInput.dataset.id);
    }

    function updateSlider(sliders) {
        const sliderContainer = document.getElementById('sliderContainer');
        const sliderDots = document.getElementById('sliderDots');
        slides = sliders.map(item => `
            <div class="slider-item-wrapper" style="width: 100%;height: 100%;flex-shrink: 0;display: flex;justify-content: center;align-items: center;overflow: hidden;">
                <img src="${item.imageUrl?.includes('http') ? item.imageUrl : urlBase + item.imageUrl}" alt="${item.title}" class="slider-item">
            </div>
        `);
        sliderContainer.innerHTML = slides.join('');
        sliderDots.innerHTML = slides.map((_, index) => `<span class="slider-dot" onclick="currentSlide(${index})"></span>`).join('');
        showSlides(slideIndex);
    }

    function handleProvince(el) {
        let val = $(el).data('value');
        let id = $(el).data('id');
        $('#provinceSelected').attr('data-id', id);
        $('#provinceSelected').attr('data-value', val);
        $('#provinceSelected').html(val);
        listLocationBackup = [];
        dropdown2.classList.add('hidden');

        // Close the location dropdown
        document.getElementById('locationBtn').classList.remove('active');
        document.getElementById('locationMenu').classList.remove('active');
    }

    function showSlides(n) {
        const sliderContainer = document.getElementById('sliderContainer');
        const dots = document.getElementsByClassName('slider-dot');
        if (n >= slides.length) slideIndex = 0;
        if (n < 0) slideIndex = slides.length - 1;
        sliderContainer.style.transform = `translateX(-${slideIndex * 100}%)`;
        for (let i = 0; i < dots.length; i++) {
            dots[i].classList.remove('active');
        }
        if (dots[slideIndex]) dots[slideIndex].classList.add('active');
    }

    function moveSlide(n) {
        showSlides(slideIndex += n);
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function createPropertyCard(item) {
        const token = localStorage.getItem("authToken");
        let isOwner = false;
        if (token) {
            const userId = getUserIdFromToken(token);
            if (userId && item.landlordId && userId === item.landlordId) {
                isOwner = true;
            }
        }
        const detailUrl = isOwner
            ? `/PostProperty/DetailProperty/${item.id}`
            : `/Home/Detail/${item.id}`;

        return `
            <div id="card-property-${item.id}" class="property-card" data-id="${item.id}">
                <div class="property-image-container">
                    <img
                        onerror="handleImageError(this)"
                        src="${item.primaryImageUrl?.includes('http') ? item.primaryImageUrl : urlBase + item.primaryImageUrl}"
                        alt="${item.type}"
                        class="property-image"
                    >
                    <div class="property-overlay"></div>

                    <!-- Promotion Badge -->
                    ${item.promotionPackageName ? `
                    <div class="promotion-badge">
                        <i class="fas fa-star"></i>
                        ${item.promotionPackageName}
                    </div>
                    ` : ''}

                    <!-- Property Actions -->
                    <div class="property-actions">

                       <button
                                id="btn-compare-${item.id}"
                                onclick="addToCompare(${item.id})"
                                class="p-2 bg-white rounded-full shadow hover:bg-blue-100 transition-all duration-200"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-blue-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
                                </svg>
                            </button>
                        <button
                            id="interest-${item.id}"
                            onclick="clickInterest(${item.id},${item.isInterested},${item.interestedStatus},${item.isReminderRenterConfirmInterested},${item.interestedId})"
                            class="action-btn interest"
                            title="Quan tâm"
                        >
                            <i class="fa-solid fa-square-plus ${item.isInterested && item.interestedStatus != 1 ? 'text-red-500' : ''}"></i>
                        </button>
                        </div>
                    </div>

                <!-- Property Content -->
                <div class="property-content">
                    <div class="property-header">
                        <div class="property-type-badge">
                            <i class="fas fa-building text-blue-500 mr-2"></i>
                            ${item.type || 'Không xác định'}
                    </div>
                        <div class="property-status">
                            ${StatusInterest(item)}
                </div>
                    </div>

                    <h3
                        onclick="window.location.href='${detailUrl}'"
                        class="property-title"
                        title="${item.title}"
                    >
                        ${item.title}
                    </h3>

                    <div class="property-price">
                        ${formatVietnameseNumber(item.price)} <span class="text-sm font-normal">/ tháng</span>
                    </div>

                    <div class="property-location">
                        <i class="fas fa-map-marker-alt location-icon"></i>
                        <div class="location-text">
                        ${item.area} m² · ${item.detailedAddress}, ${item.street}, ${item.ward}, ${item.province}
                    </div>
                    </div>

                    <p class="property-description" title="${item.description}">
                        ${item.description}
                    </p>
                </div>

                <!-- Property Footer -->
                <div class="property-footer">
                    <div class="landlord-info">
                        <div
                            class="landlord-avatar"
                            onclick="window.location.href='/Home/Landlord/${item.landlordId}'"
                            title="Xem thông tin chủ nhà"
                        >
                            <img
                                onerror="handleImageError(this)"
                                src="${item.landlordProfilePictureUrl?.includes('http') ? item.landlordProfilePictureUrl : urlBase + item.landlordProfilePictureUrl}"
                                alt="Ảnh chủ nhà"
                                class="w-full h-full object-cover"
                            >
                        </div>
                        <div class="landlord-details">
                            <div
                                class="landlord-name"
                                onclick="window.location.href='/Home/Landlord/${item.landlordId}'"
                                title="Xem thông tin chủ nhà"
                            >
                                ${item.landlordName}
                        </div>
                            <div class="landlord-date">
                                ${timeAgo(item.createdAt)}
                    </div>
                        </div>
                    </div>

                    <div class="property-rating">
                        <div class="rating-item">
                            <span class="rating-stars">
                             ${item.rating && item.rating > 0 ? `

                                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" style="width:14px;height:14px" viewBox="0 0 24 24">
                                <path d="M12 .587l3.668 7.568L24 9.423l-6 5.854L19.335 24 12 20.202 4.665 24 6 15.277 0 9.423l8.332-1.268z" />
                            </svg>` : ''}
                            </span>
                            <span class="font-semibold text-gray-800">
                                 ${!item.rating || item.rating == 0 ? 'Chưa có đánh giá' : item.rating}
                            </span>
                        </div>
                        <div class="rating-item">
                             <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" style="width:14px;height:14px" class="rating-comments">                                <path d="M20 2H4C1.8 2 0 3.8 0 6v12c0 2.2 1.8 4 4 4h4v2.4c0 .6.4 1 1 1 .2 0 .5-.1.7-.3L14.3 22H20c2.2 0 4-1.8 4-4V6c0-2.2-1.8-4-4-4z" />
                            </svg>
                            <span class="rating-comments">
                                 ${!item.ratingNo || item.ratingNo == 0 ? 'Chưa có bình luận' : `${item.ratingNo} bình luận`}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // Tab switching
    document.querySelectorAll('.tab-item').forEach(tab => {
        tab.addEventListener('click', function() {
            document.querySelectorAll('.tab-item').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Dropdown toggles
    function setupDropdown(buttonId, menuId) {
        const button = document.getElementById(buttonId);
        const menu = document.getElementById(menuId);

        button.addEventListener('click', function (e) {
            e.stopPropagation();
            document.querySelectorAll('.dropdown-menu.active').forEach(m => {
                if (m !== menu) {
                    m.classList.remove('active');
                    m.previousElementSibling.classList.remove('active');
                }
            });
            button.classList.toggle('active');
            menu.classList.toggle('active');
            dropdown2.classList.add('hidden');
        });

        menu.addEventListener('click', function (e) {
            e.stopPropagation();
        });

        // Close dropdown when clicking on a menu item
        menu.addEventListener('click', function (e) {
            if (e.target.classList.contains('location-item')) {
                setTimeout(() => {
                    button.classList.remove('active');
                    menu.classList.remove('active');
                }, 100);
            }
        });
    }

    if (!window._dropdownDocClick) {
        document.addEventListener('click', function () {
            document.querySelectorAll('.dropdown-button').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.dropdown-menu').forEach(m => m.classList.remove('active'));
        });
        window._dropdownDocClick = true;
    }

    setupDropdown('locationBtn', 'locationMenu');
    setupDropdown('priceBtn', 'priceMenu');
    setupDropdown('propertyTypeBtn', 'propertyTypeMenu');
    setupDropdown('areaBtn', 'areaMenu');

    // Search function
    function performSearch() {
        const provinceSelected = document.getElementById('provinceSelected').dataset.id;
        const provinceName = document.getElementById('provinceSelected').dataset.value;
        const searchText = document.getElementById('searchInput').value;
        const activeTab = document.querySelector('.tab-item.active');
        const propertyType = selectedPropertyType || (activeTab ? activeTab.dataset.type : null);

        // Get price range values
        const minPrice = document.getElementById('minInputPrice').value;
        const maxPrice = document.getElementById('maxInputPrice').value;

        // Get area range values
        const minArea = document.getElementById('minInputArea').value;
        const maxArea = document.getElementById('maxInputArea').value;

        // Check if search text contains address information
        const hasAddressSearch = searchText && searchText.trim() !== '';

        const filterData = {
            type: propertyType,
            province: provinceSelected,
            provinceName: provinceName,
            keyword: searchText,
            minPrice: minPrice,
            maxPrice: maxPrice,
            minArea: minArea,
            maxArea: maxArea,
            selectedLocations: selectedLocationLists
        };

        sessionStorage.setItem('selectedLocationLists', JSON.stringify(selectedLocationLists));
        sessionStorage.setItem('provinceId', provinceSelected);
        sessionStorage.setItem('provinceName', provinceName);
        sessionStorage.setItem('searchFilterData', JSON.stringify(filterData));

        const searchParams = new URLSearchParams();
        if (propertyType && propertyType.trim() !== '') {
            searchParams.append('type', propertyType);
        }
        if (provinceSelected) searchParams.append('province', provinceSelected);
        if (searchText && searchText.trim() !== '') {
            searchParams.append('keyword', searchText); // Chỉ gửi keyword, không cần address riêng
        }
        if (minPrice && minPrice !== '0') searchParams.append('minPrice', minPrice);
        if (maxPrice && maxPrice !== '100') searchParams.append('maxPrice', maxPrice);
        if (minArea && minArea !== '0') searchParams.append('minArea', minArea);
        if (maxArea && maxArea !== '100') searchParams.append('maxArea', maxArea);

        const searchUrl = `/Home/Search?${searchParams.toString()}`;
        window.location.href = searchUrl;
    }

    // AI Search function
    function performAISearch() {
        const provinceSelected = document.getElementById('provinceSelected').dataset.id;
        const provinceName = document.getElementById('provinceSelected').dataset.value;
        const searchText = document.getElementById('searchInput').value;
        const activeTab = document.querySelector('.tab-item.active');
        const propertyType = selectedPropertyType || (activeTab ? activeTab.dataset.type : null);

        // Get price range values
        const minPrice = document.getElementById('minInputPrice').value;
        const maxPrice = document.getElementById('maxInputPrice').value;

        // Get area range values
        const minArea = document.getElementById('minInputArea').value;
        const maxArea = document.getElementById('maxInputArea').value;

        // Check if search text contains address information
        const hasAddressSearch = searchText && searchText.trim() !== '';

        const aiSearchData = {
            type: propertyType,
            province: provinceSelected,
            provinceName: provinceName,
            keyword: searchText,
            minPrice: minPrice,
            maxPrice: maxPrice,
            minArea: minArea,
            maxArea: maxArea,
            selectedLocations: selectedLocationLists
        };

        sessionStorage.setItem('aiSearchData', JSON.stringify(aiSearchData));
        sessionStorage.setItem('selectedLocationLists', JSON.stringify(selectedLocationLists));
        sessionStorage.setItem('provinceId', provinceSelected);
        sessionStorage.setItem('provinceName', provinceName);

        window.location.href = '/Home/AISearch';
    }

    // Enter key search
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });

    // Initialize range sliders for Price and Area
    let defaultMinPrice = 0;
    let defaultMaxPrice = 100;
    let defaultMinArea = 0;
    let defaultMaxArea = 100;
    let body = sessionStorage.getItem('filterData');
    if (body != null && body != undefined && body != '') {
        body = JSON.parse(body);
        defaultMinPrice = body.minPrice || 0;
        defaultMaxPrice = body.maxPrice || 100;
        defaultMinArea = body.minArea || 0;
        defaultMaxArea = body.maxArea || 100;
    }

    setupDoubleRangeSlider({
        rangeMinId: "rangeMinPrice",
        rangeMaxId: "rangeMaxPrice",
        inputMinId: "minInputPrice",
        inputMaxId: "maxInputPrice",
        labelMinId: "minLabelPrice",
        labelMaxId: "maxLabelPrice",
        trackId: "rangeTrackPrice",
        maxValue: 100,
        labelInfo: 'triệu',
        defaultMin: defaultMinPrice,
        defaultMax: defaultMaxPrice
    });

    setupDoubleRangeSlider({
        rangeMinId: "rangeMinArea",
        rangeMaxId: "rangeMaxArea",
        inputMinId: "minInputArea",
        inputMaxId: "maxInputArea",
        labelMinId: "minLabelArea",
        labelMaxId: "maxLabelArea",
        trackId: "rangeTrackArea",
        maxValue: 100,
        labelInfo: 'm<sup>2</sup>',
        defaultMin: defaultMinArea,
        defaultMax: defaultMaxArea
    });

    function setupDoubleRangeSlider({rangeMinId, rangeMaxId, inputMinId, inputMaxId, labelMinId, labelMaxId, trackId, maxValue = 100, labelInfo = '', defaultMin = 0, defaultMax = maxValue}) {
        const rangeMin = document.getElementById(rangeMinId);
        const rangeMax = document.getElementById(rangeMaxId);
        const minInput = document.getElementById(inputMinId);
        const maxInput = document.getElementById(inputMaxId);
        const minLabel = document.getElementById(labelMinId);
        const maxLabel = document.getElementById(labelMaxId);
        const rangeTrack = document.getElementById(trackId);

        rangeMin.value = defaultMin;
        rangeMax.value = defaultMax;
        minInput.value = defaultMin;
        maxInput.value = defaultMax;

        function updateRangeUI() {
            const min = parseInt(rangeMin.value);
            const max = parseInt(rangeMax.value);

            minInput.value = min;
            maxInput.value = max;

            minLabel.innerHTML = min + ' ' + labelInfo;
            maxLabel.innerHTML = max + ' ' + labelInfo;

            const minPercent = (min / maxValue) * 100;
            const maxPercent = (max / maxValue) * 100;
            rangeTrack.style.left = minPercent + "%";
            rangeTrack.style.right = (100 - maxPercent) + "%";
        }

        rangeMin.addEventListener("input", function () {
            let minVal = parseInt(rangeMin.value);
            let maxVal = parseInt(rangeMax.value);

            if (minVal > maxVal) {
                minVal = maxVal;
                rangeMin.value = maxVal;
            }
            updateRangeUI();
        });

        rangeMax.addEventListener("input", function () {
            let minVal = parseInt(rangeMin.value);
            let maxVal = parseInt(rangeMax.value);

            if (maxVal < minVal) {
                maxVal = minVal;
                rangeMax.value = minVal;
            }
            updateRangeUI();
        });

        minInput.addEventListener("input", function () {
            let minVal = parseInt(minInput.value);
            let maxVal = parseInt(maxInput.value);

            if (minVal > maxVal) {
                minVal = maxVal;
                minInput.value = maxVal;
            }
            rangeMin.value = minInput.value;
            updateRangeUI();
        });

        maxInput.addEventListener("input", function () {
            let minVal = parseInt(minInput.value);
            let maxVal = parseInt(maxInput.value);

            if (maxVal < minVal) {
                maxVal = minVal;
                maxInput.value = minVal;
            }
            rangeMax.value = maxInput.value;
            updateRangeUI();
        });

        updateRangeUI();
    }

    function getUserIdFromToken(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return parseInt(payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"]);
        } catch (error) {
            console.error("Không thể giải mã token:", error);
            return null;
        }
    }

    function StatusInterest(item) {
        if (!item.isInterested) return "";
        if (item.interestedStatus == 2) {
            if (item.isReminderRenterConfirmInterested == 2) return `<span style="color:red">Quá hạn xác nhận quan tâm</span>`;
            if (item.isReminderRenterConfirmInterested == 1) return `<span style="color:green">Xác nhận quan tâm lại</span>`;
            if (item.isReminderRenterConfirmInterested == 0) return `<span style="color:blue">Chờ phản hồi hệ thống</span>`;
        }
        if (item.interestedStatus == 0) return "";
        if (item.interestedStatus == 3) {
            if (item.isReminderRenterConfirmInterested == 0) return `<span style="color:blue">Chờ xác nhận từ người cho thuê</span>`;
        }
    }

    // Pagination functions
    function displayFeaturedProperties() {
        const startIndex = (featuredPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const currentProperties = allFeaturedProperties.slice(startIndex, endIndex);

        let featuredHtml = '';
        if (currentProperties.length > 0) {
            currentProperties.forEach(item => {
                featuredHtml += createPropertyCard(item);
            });
        } else {
            featuredHtml = '<div class="empty-state">Không có bất động sản nổi bật</div>';
        }

        document.getElementById('featuredProperties').innerHTML = featuredHtml;
        updateFeaturedPagination();

        // Debug log
        console.log('Featured Properties:', {
            total: allFeaturedProperties.length,
            currentPage: featuredPage,
            itemsPerPage: itemsPerPage,
            startIndex: startIndex,
            endIndex: endIndex,
            currentProperties: currentProperties.length
        });
    }

    function displayRecommendedProperties() {
        const startIndex = (recommendedPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const currentProperties = allRecommendedProperties.slice(startIndex, endIndex);

        let recommendedHtml = '';
        if (currentProperties.length > 0) {
            currentProperties.forEach(item => {
                recommendedHtml += createPropertyCard(item);
            });
        } else {
            recommendedHtml = '<div class="empty-state">Không có bất động sản dành cho bạn</div>';
        }

        document.getElementById('recommendedProperties').innerHTML = recommendedHtml;
        updateRecommendedPagination();

        // Debug log
        console.log('Recommended Properties:', {
            total: allRecommendedProperties.length,
            currentPage: recommendedPage,
            itemsPerPage: itemsPerPage,
            startIndex: startIndex,
            endIndex: endIndex,
            currentProperties: currentProperties.length
        });
    }

    function changeFeaturedPage(direction) {
        const newPage = featuredPage + direction;
        const maxPage = Math.ceil(allFeaturedProperties.length / itemsPerPage);

        console.log('Changing Featured Page:', {
            currentPage: featuredPage,
            direction: direction,
            newPage: newPage,
            maxPage: maxPage,
            totalItems: allFeaturedProperties.length
        });

        if (newPage >= 1 && newPage <= maxPage) {
            featuredPage = newPage;
            displayFeaturedProperties();
        } else {
            console.log('Page change rejected:', { newPage, maxPage });
        }
    }

    function changeRecommendedPage(direction) {
        const newPage = recommendedPage + direction;
        const maxPage = Math.ceil(allRecommendedProperties.length / itemsPerPage);

        console.log('Changing Recommended Page:', {
            currentPage: recommendedPage,
            direction: direction,
            newPage: newPage,
            maxPage: maxPage,
            totalItems: allRecommendedProperties.length
        });

        if (newPage >= 1 && newPage <= maxPage) {
            recommendedPage = newPage;
            displayRecommendedProperties();
        } else {
            console.log('Page change rejected:', { newPage, maxPage });
        }
    }

    function updateFeaturedPagination() {
        const maxPage = Math.ceil(allFeaturedProperties.length / itemsPerPage);
        const prevBtn = document.getElementById('featuredPrev');
        const nextBtn = document.getElementById('featuredNext');
        const pageInfo = document.getElementById('featuredPageInfo');

        prevBtn.disabled = featuredPage <= 1;
        nextBtn.disabled = featuredPage >= maxPage;
        pageInfo.textContent = `${featuredPage}/${maxPage}`;

        console.log('Featured Pagination Updated:', {
            currentPage: featuredPage,
            maxPage: maxPage,
            totalItems: allFeaturedProperties.length,
            prevDisabled: prevBtn.disabled,
            nextDisabled: nextBtn.disabled
        });
    }

    function updateRecommendedPagination() {
        const maxPage = Math.ceil(allRecommendedProperties.length / itemsPerPage);
        const prevBtn = document.getElementById('recommendedPrev');
        const nextBtn = document.getElementById('recommendedNext');
        const pageInfo = document.getElementById('recommendedPageInfo');

        prevBtn.disabled = recommendedPage <= 1;
        nextBtn.disabled = recommendedPage >= maxPage;
        pageInfo.textContent = `${recommendedPage}/${maxPage}`;

        console.log('Recommended Pagination Updated:', {
            currentPage: recommendedPage,
            maxPage: maxPage,
            totalItems: allRecommendedProperties.length,
            prevDisabled: prevBtn.disabled,
            nextDisabled: nextBtn.disabled
        });
    }

    // View more functions
    window.viewAllFeatured = function() {
        // Chuyển sang trang Search và hiển thị tất cả bất động sản
        window.location.href = '/Home/Search';
    };

    window.viewAllRecommended = function() {
        // Chuyển sang trang Search và hiển thị tất cả bất động sản
        window.location.href = '/Home/Search';
    };

    // Initialize data fetching
    getAllData();
</script>


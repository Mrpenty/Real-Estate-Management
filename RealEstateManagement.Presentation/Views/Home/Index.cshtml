@{
    // ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}

<!-- Search Bar chồng lên Slider -->
<div class="slider">
    <div class="search-container">
        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-item active" data-tab="buy">Nhà đất bán</button>
            <button class="tab-item" data-tab="rent">Nhà đất cho thuê</button>
            <button class="tab-item" data-tab="project">Dự án</button>
        </div>

        <!-- Search Form -->
        <div class="search-form">
            <div class="search-row">
                <!-- Top row: Location + Search Input + Search Button -->
                <div class="search-top-row">
                    <!-- Location Input -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="locationBtn">
                                <span>📍 Đắk Lắk</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="locationMenu">
                                <div class="location-dropdown">
                                    <div class="location-item" data-value="hcm">Hồ Chí Minh</div>
                                    <div class="location-item" data-value="hanoi">Hà Nội</div>
                                    <div class="location-item" data-value="danang">Đà Nẵng</div>
                                    <div class="location-item" data-value="daklak">Đắk Lắk</div>
                                    <div class="location-item" data-value="cantho">Cần Thơ</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Main Search Input -->
                    <div class="input-group">
                        <div class="location-input">
                            <input type="text" class="main-input"
                                   placeholder="Nhập tối đa 5 địa điểm, dự án. VD: Quận Hoàn Kiếm, Quận Đống Đa"
                                   id="searchInput">
                        </div>
                    </div>

                    <!-- Search Button -->
                    <button class="search-button" onclick="performSearch()">
                        🔍 Tìm kiếm
                    </button>
                </div>

                <!-- Filter Row - 3 dropdowns ngang hàng -->
                <div class="filter-row">
                    <!-- Property Type -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="propertyTypeBtn">
                                <span>Loại nhà đất</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="propertyTypeMenu">
                                <div class="dropdown-content">
                                    <div class="location-dropdown">
                                        <div class="location-item" data-value="">Tất cả</div>
                                        <div class="location-item" data-value="apartment">Căn hộ</div>
                                        <div class="location-item" data-value="house">Nhà riêng</div>
                                        <div class="location-item" data-value="land">Đất</div>
                                        <div class="location-item" data-value="room">Phòng trọ</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Price Range -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="priceBtn">
                                <span id="priceDisplay">Mức giá</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="priceMenu">
                                <div class="dropdown-content">
                                    <div class="price-range">
                                        <div class="price-display">
                                            <span>Từ: <span id="minPriceDisplay">0 triệu</span></span>
                                            <span>Đến: <span id="maxPriceDisplay">60 tỷ</span></span>
                                        </div>

                                        <div class="price-inputs">
                                            <input type="number" class="price-input" id="minPriceInput"
                                                   placeholder="0" min="0">
                                            <span class="price-separator">→</span>
                                            <input type="number" class="price-input" id="maxPriceInput"
                                                   placeholder="60000" min="0">
                                        </div>

                                        <div class="range-slider" id="priceSlider">
                                            <div class="range-track" id="priceTrack"></div>
                                            <div class="range-thumb" id="minThumb"></div>
                                            <div class="range-thumb" id="maxThumb"></div>
                                        </div>

                                        <div class="quick-options">
                                            <div class="quick-option" data-range="all">Tất cả mức giá</div>
                                            <div class="quick-option" data-range="under500">Dưới 500 triệu</div>
                                            <div class="quick-option" data-range="500-800">500 - 800 triệu</div>
                                            <div class="quick-option" data-range="800-1000">800 triệu - 1 tỷ</div>
                                            <div class="quick-option" data-range="1-2">1 - 2 tỷ</div>
                                            <div class="quick-option" data-range="custom">Đặt lại</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Area -->
                    <div class="input-group">
                        <div class="custom-dropdown">
                            <button class="dropdown-button" id="areaBtn">
                                <span id="areaDisplay">Diện tích</span>
                                <span class="dropdown-arrow">▼</span>
                            </button>
                            <div class="dropdown-menu" id="areaMenu">
                                <div class="dropdown-content">
                                    <div class="location-dropdown">
                                        <div class="location-item" data-value="">Chọn diện tích</div>
                                        <div class="location-item" data-value="under30">Dưới 30 m²</div>
                                        <div class="location-item" data-value="30-50">30 - 50 m²</div>
                                        <div class="location-item" data-value="50-80">50 - 80 m²</div>
                                        <div class="location-item" data-value="80-100">80 - 100 m²</div>
                                        <div class="location-item" data-value="over100">Trên 100 m²</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="slider-container" id="sliderContainer"></div>
    <button class="slider-button prev" onclick="moveSlide(-1)">&#10094;</button>
    <button class="slider-button next" onclick="moveSlide(1)">&#10095;</button>
    <div class="slider-dots" id="sliderDots"></div>
</div>

<!-- Danh sách Bất động sản nổi bật -->
<h2 class="text-lg font-semibold mb-2">Bất động sản nổi bật</h2>
<div id="featuredProperties" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6"></div>

<!-- Danh sách Bất động sản dành cho bạn -->
<h2 class="text-lg font-semibold mb-2">Bất động sản dành cho bạn</h2>
<div id="recommendedProperties" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>

<script src="~/js/propertyService.js" asp-append-version="true"></script>
<script>
    let urlBase = "https://localhost:7031";
    let urlParams1 = new URLSearchParams(window.location.search);
    let type1 = urlParams1.get('type');
    if (type1 == null || type1 == undefined) type1 = "room";

    let el = document.getElementById(type1);
    if (el) {
        el.classList.add("text-orange-500");
        el.classList.replace("border-gray-200", "border-orange-500");
    }

    let listLocationSelected = sessionStorage.getItem('selectedLocationLists');
    let provinceId = sessionStorage.getItem('provinceId');
    let provinceName = sessionStorage.getItem('provinceName');
    if (listLocationSelected != null && listLocationSelected != undefined) {
        let html = '';
        listLocationSelected = JSON.parse(listLocationSelected);
        if (listLocationSelected.length != 0) {
            listLocationSelected.forEach(item => {
                html += `<button class="bg-blue-100 text-blue-700 px-3 py-1 rounded">${item.locationName}</button>`;
            });
        } else if (provinceId != 0 && provinceId != -1) {
            html += `<button class="bg-blue-100 text-blue-700 px-3 py-1 rounded">${provinceName}</button>`;
        }
        $('#locationSelected').html(html);
    }

    let slideIndex = 0;
    let slides = [];

    getAllData();

    async function getAllData() {
        try {
            const [properties, sliders] = await Promise.all([
                propertyService.getAllproperty(),
                fetch(`${urlBase}/api/Slider`).then(res => res.json())
            ]);

            if (sliders && sliders.length > 0) {
                // Cập nhật slider với dữ liệu từ API slider
                updateSlider(sliders);
            } else {
                document.getElementById('sliderContainer').innerHTML = '<p>Không có slider để hiển thị.</p>';
            }

            if (properties && properties.length > 0) {
                // Phân chia danh sách
                const featuredProperties = properties.filter(item => item.promotionPackageName != null);
                const recommendedProperties = properties.filter(item => item.promotionPackageName == null)
                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

                // Hiển thị Bất động sản nổi bật
                let featuredHtml = '';
                featuredProperties.forEach(item => {
                    featuredHtml += createPropertyCard(item);
                });
                document.getElementById('featuredProperties').innerHTML = featuredHtml || '<p>Không có bất động sản nổi bật.</p>';

                // Hiển thị Bất động sản dành cho bạn
                let recommendedHtml = '';
                recommendedProperties.forEach(item => {
                    recommendedHtml += createPropertyCard(item);
                });
                document.getElementById('recommendedProperties').innerHTML = recommendedHtml || '<p>Không có bất động sản dành cho bạn.</p>';
            } else {
                document.getElementById('featuredProperties').innerHTML = '<p>Không có bất động sản nổi bật.</p>';
                document.getElementById('recommendedProperties').innerHTML = '<p>Không có bất động sản dành cho bạn.</p>';
            }
        } catch (error) {
            console.error('Lỗi khi lấy dữ liệu:', error);
            document.getElementById('featuredProperties').innerHTML = '<p>Lỗi khi tải dữ liệu.</p>';
            document.getElementById('recommendedProperties').innerHTML = '<p>Lỗi khi tải dữ liệu.</p>';
            document.getElementById('sliderContainer').innerHTML = '<p>Lỗi khi tải slider.</p>';
        }
    }

       function updateSlider(sliders) {
        const sliderContainer = document.getElementById('sliderContainer');
        const sliderDots = document.getElementById('sliderDots');

      
        slides = sliders.map(item => `
            <div class="slider-item-wrapper">
                <img src="${item.imageUrl?.includes('http') ? item.imageUrl : urlBase + item.imageUrl}" alt="${item.title}" class="slider-item">
            </div>
        `);
        sliderContainer.innerHTML = slides.join('');
        sliderDots.innerHTML = slides.map((_, index) => `<span class="slider-dot" onclick="currentSlide(${index})"></span>`).join('');
        showSlides(slideIndex);
    }


    function showSlides(n) {
        const sliderContainer = document.getElementById('sliderContainer');
        const dots = document.getElementsByClassName('slider-dot');
        if (n >= slides.length) slideIndex = 0;
        if (n < 0) slideIndex = slides.length - 1;
        sliderContainer.style.transform = `translateX(-${slideIndex * 100}%)`;
        for (let i = 0; i < dots.length; i++) {
            dots[i].classList.remove('active');
        }
        if (dots[slideIndex]) dots[slideIndex].classList.add('active');
    }

    function moveSlide(n) {
        showSlides(slideIndex += n);
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function createPropertyCard(item) {
        return `
            <div id="card-property-${item.id}" class="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100 hover:shadow-lg transition-all duration-300" data-id="${item.id}">
                <!-- Image and Buttons -->
                <div class="relative group">
                    <img
                        onerror="handleImageError(this)"
                        src="${item.primaryImageUrl?.includes('http') ? item.primaryImageUrl : urlBase + item.primaryImageUrl}"
                        alt="${item.type}"
                        class="w-full h-48 object-cover transition-opacity duration-300 group-hover:opacity-90"
                    >
                    <div class="absolute top-2 right-2 flex flex-col gap-2">
                        <button
                            id="btnFavourite"
                            onclick="updateFavorite(${item.id}, ${item.isFavorite})"
                            class="p-2 bg-white rounded-full shadow hover:bg-red-100 transition-all duration-200"
                        >
                            ${item.isFavorite
                                ? `<svg id="heart-icon-${item.id}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 7.284a5.754 5.754 0 00-9.406-1.045L12 7.158l-.346-.92A5.754 5.754 0 002.248 7.284c-1.1 2.238-.432 4.92 1.528 6.596l7.04 6.211a.75.75 0 001.368 0l7.04-6.211c1.96-1.676 2.628-4.358 1.528-6.596z" />
                                   </svg>`
                                : `<svg id="heart-icon-${item.id}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-gray-500 hover:text-red-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 7.284a5.754 5.754 0 00-9.406-1.045L12 7.158l-.346-.92A5.754 5.754 0 002.248 7.284c-1.1 2.238-.432 4.92 1.528 6.596l7.04 6.211a.75.75 0 001.368 0l7.04-6.211c1.96-1.676 2.628-4.358 1.528-6.596z" />
                                   </svg>`
                            }
                        </button>
                        <button
                            id="btn-compare-${item.id}"
                            onclick="addToCompare(${item.id})"
                            class="p-2 bg-white rounded-full shadow hover:bg-blue-100 transition-all duration-200"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-blue-500">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Content -->
                <div class="p-4">
                    <h3
                        onclick="window.location.href='/Home/Detail/${item.id}'"
                        style="cursor:pointer"
                        class="text-lg font-semibold text-orange-600 hover:text-orange-700 transition-colors duration-200 uppercase line-clamp-2"
                    >
                        ${item.title}
                    </h3>
                    <div class="text-xl font-bold text-green-600 mt-2">
                        ${formatVietnameseNumber(item.price)} / tháng
                    </div>
                    <div class="text-sm text-gray-500 mt-1">
                        ${item.area} m² · ${item.detailedAddress}, ${item.street}, ${item.ward}, ${item.province}
                    </div>
                    <p class="text-sm text-gray-600 mt-2 line-clamp-3">
                        ${item.description}
                    </p>
                </div>

                <!-- Footer -->
                <div class="flex items-center justify-between px-4 py-3 bg-gray-50">
                    <div class="flex items-center gap-3">
                        <div class="w-10 h-10 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center">
                            <img
                                onerror="handleImageError(this)"
                                src="${item.landlordProfilePictureUrl?.includes('http') ? item.landlordProfilePictureUrl : urlBase + item.landlordProfilePictureUrl}"
                                alt="landlordProfilePictureUrl"
                                class="w-full h-full object-cover"
                            >
                        </div>
                        <div class="text-sm text-gray-700">
                            ${item.landlordName} <span class="text-gray-400 text-xs">(${timeAgo(item.createdAt)})</span>
                        </div>
                    </div>
                    <div class="flex flex-col gap-2 items-end">
                        <a href="tel:${item.landlordPhoneNumber}" class="text-white bg-emerald-500 hover:bg-emerald-600 px-3 py-1 rounded text-sm font-medium transition-colors duration-200">
                            ${item.landlordPhoneNumber}
                        </a>
                        <button
                            onclick="startChatWithLandlord(parseInt('${item.landlordId}'))"
                            class="bg-orange-500 text-white px-3 py-1 rounded text-sm font-medium hover:bg-orange-600 transition-colors duration-200"
                        >
                            💬 Nhắn tin
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    // Tab switching
    document.querySelectorAll('.tab-item').forEach(tab => {
        tab.addEventListener('click', function() {
            document.querySelectorAll('.tab-item').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Dropdown toggles (áp dụng giống Layout)
    function setupDropdown(buttonId, menuId) {
        const button = document.getElementById(buttonId);
        const menu = document.getElementById(menuId);

        button.addEventListener('click', function (e) {
            console.log('Clicked:', buttonId);
            e.stopPropagation();
            // Đóng các dropdown khác
            document.querySelectorAll('.dropdown-menu.active').forEach(m => {
                if (m !== menu) {
                    m.classList.remove('active');
                    m.previousElementSibling.classList.remove('active');
                }
            });
            button.classList.toggle('active');
            menu.classList.toggle('active');
            console.log('Dropdown menu', menuId, 'active:', menu.classList.contains('active'));
        });

        menu.addEventListener('click', function (e) {
            e.stopPropagation();
        });
    }

    // Chỉ add 1 lần event click cho document để đóng dropdown
    if (!window._dropdownDocClick) {
        document.addEventListener('click', function () {
            document.querySelectorAll('.dropdown-button').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.dropdown-menu').forEach(m => m.classList.remove('active'));
        });
        window._dropdownDocClick = true;
    }

    setupDropdown('locationBtn', 'locationMenu');
    setupDropdown('priceBtn', 'priceMenu');
    setupDropdown('propertyTypeBtn', 'propertyTypeMenu');
    setupDropdown('areaBtn', 'areaMenu');

    // Location selection
    document.querySelectorAll('#locationMenu .location-item').forEach(item => {
        item.addEventListener('click', function() {
            const text = this.textContent;
            document.querySelector('#locationBtn span:first-child').textContent = `📍 ${text}`;
            document.getElementById('locationBtn').classList.remove('active');
            document.getElementById('locationMenu').classList.remove('active');
        });
    });

    // Property Type selection
    document.querySelectorAll('#propertyTypeMenu .location-item').forEach(item => {
        item.addEventListener('click', function() {
            const text = this.textContent;
            document.querySelector('#propertyTypeBtn span:first-child').textContent = text;
            document.getElementById('propertyTypeBtn').classList.remove('active');
            document.getElementById('propertyTypeMenu').classList.remove('active');
        });
    });

    // Area selection
    document.querySelectorAll('#areaMenu .location-item').forEach(item => {
        item.addEventListener('click', function() {
            const text = this.textContent;
            document.querySelector('#areaBtn span:first-child').textContent = text;
            document.getElementById('areaBtn').classList.remove('active');
            document.getElementById('areaMenu').classList.remove('active');
        });
    });

    // Price range functionality
    let minPrice = 0;
    let maxPrice = 60000;

    function updatePriceDisplay() {
        document.getElementById('minPriceDisplay').textContent = `${minPrice} ${minPrice < 1000 ? 'triệu' : 'tỷ'}`;
        document.getElementById('maxPriceDisplay').textContent = `${maxPrice < 1000 ? maxPrice + ' triệu' : (maxPrice/1000) + ' tỷ'}`;

        if (minPrice === 0 && maxPrice === 60000) {
            document.getElementById('priceDisplay').textContent = 'Mức giá';
        } else {
            document.getElementById('priceDisplay').textContent = `${minPrice} - ${maxPrice < 1000 ? maxPrice + ' triệu' : (maxPrice/1000) + ' tỷ'}`;
        }
    }

    // Quick price options
    document.querySelectorAll('.quick-option').forEach(option => {
        option.addEventListener('click', function() {
            document.querySelectorAll('.quick-option').forEach(o => o.classList.remove('active'));
            this.classList.add('active');

            const range = this.dataset.range;
            switch(range) {
                case 'all':
                    minPrice = 0;
                    maxPrice = 60000;
                    break;
                case 'under500':
                    minPrice = 0;
                    maxPrice = 500;
                    break;
                case '500-800':
                    minPrice = 500;
                    maxPrice = 800;
                    break;
                case '800-1000':
                    minPrice = 800;
                    maxPrice = 1000;
                    break;
                case '1-2':
                    minPrice = 1000;
                    maxPrice = 2000;
                    break;
                case 'custom':
                    minPrice = 0;
                    maxPrice = 60000;
                    break;
            }
            updatePriceDisplay();
        });
    });

    // Price input handling
    document.getElementById('minPriceInput').addEventListener('input', function() {
        minPrice = parseInt(this.value) || 0;
        updatePriceDisplay();
    });

    document.getElementById('maxPriceInput').addEventListener('input', function() {
        maxPrice = parseInt(this.value) || 60000;
        updatePriceDisplay();
    });

    // Initialize
    updatePriceDisplay();

    // Search function
    function performSearch() {
        const location = document.querySelector('#locationBtn span:first-child').textContent.replace('📍 ', '');
        const searchText = document.getElementById('searchInput').value;
        const propertyType = document.querySelector('#propertyTypeBtn span:first-child').textContent;
        const minPriceValue = minPrice;
        const maxPriceValue = maxPrice;
        const area = document.querySelector('#areaBtn span:first-child').textContent;
        const tab = document.querySelector('.tab-item.active').dataset.tab;

        const filterData = {
            location,
            searchText,
            propertyType,
            minPrice: minPriceValue,
            maxPrice: maxPriceValue,
            area,
            type: tab === 'rent' ? 'room' : (tab === 'buy' ? 'apartment' : 'project') // Map tab to type
        };

        sessionStorage.setItem('filterData', JSON.stringify(filterData));
        window.location.reload();
    }

    // Enter key search
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });

    function applyFilters() {
        const province = document.getElementById('provinceFilter').value;
        const minPrice = document.getElementById('minPrice').value || 0;
        const maxPrice = document.getElementById('maxPrice').value || 100;
        const minArea = document.getElementById('minArea').value || 0;
        const maxArea = document.getElementById('maxArea').value || 100;
        const type = document.getElementById('typeFilter').value || 'room';

        const filterData = {
            minPrice,
            maxPrice,
            minArea,
            maxArea,
            type
        };
        if (province) filterData.provinces = [province];

        sessionStorage.setItem('filterData', JSON.stringify(filterData));
        window.location.reload();
    }

    function filterPrice(event, minPrice, maxPrice) {
        event.preventDefault();
        let body = {
            minPrice, maxPrice
        };
        sessionStorage.setItem('filterData', JSON.stringify(body));
        window.location.reload();
    }

    function filterArea(event, minArea, maxArea) {
        event.preventDefault();
        let body = {
            minArea, maxArea
        };
        sessionStorage.setItem('filterData', JSON.stringify(body));
        window.location.reload();
    }

    async function updateFavorite(id, isFavorite) {
        const isAuthenticated = authService.isAuthenticated();
        if (!isAuthenticated) window.location.href = '/Auth/Login';
        else {
            if (!isFavorite) addToFavourite(id);
            else removeToFavorite(id);
        }
    }

    async function startChatWithLandlord(landlordId) {
        const token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/Auth/Login";
            return;
        }

        const renterId = parseInt(getUserIdFromToken(token));
        const dto = {
            renterId: parseInt(renterId),
            landlordId: parseInt(landlordId),
            propertyId: null
        };

        try {
            const res = await fetch("https://localhost:7031/api/Chat/Create-Conversation", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(dto)
            });

            if (!res.ok) {
                const err = await res.text();
                alert("Không thể mở cuộc trò chuyện: " + err);
                return;
            }

            const conversation = await res.json();
            if (conversation && conversation.id) {
                window.location.href = `/Chat/Index?conversationId=${conversation.id}`;
            }
        } catch (error) {
            console.error("Lỗi khi tạo/mở cuộc trò chuyện:", error);
        }
    }

    function getUserIdFromToken(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return parseInt(payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"]);
        } catch (error) {
            console.error("Không thể giải mã token:", error);
            return null;
        }
    }
</script>
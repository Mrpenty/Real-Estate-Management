// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RealEstateManagement.Data.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20250703184600_addLastMessage")]
    partial class addLastMessage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Landlord",
                            NormalizedName = "LANDLORD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Renter",
                            NormalizedName = "RENTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.HasIndex("WardId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DetailedAddress = "123",
                            PropertyId = 1,
                            ProvinceId = 1,
                            StreetId = 1,
                            WardId = 2
                        },
                        new
                        {
                            Id = 2,
                            DetailedAddress = "456",
                            PropertyId = 2,
                            ProvinceId = 1,
                            StreetId = 2,
                            WardId = 3
                        },
                        new
                        {
                            Id = 3,
                            DetailedAddress = "789",
                            PropertyId = 3,
                            ProvinceId = 1,
                            StreetId = 3,
                            WardId = 4
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ho Chi Minh City"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hanoi"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WardId");

                    b.ToTable("Streets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nguyen Hue",
                            WardId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Le Van Tho",
                            WardId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ly Thuong Kiet",
                            WardId = 4
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hai Ba Trung",
                            WardId = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pasteur",
                            WardId = 6
                        },
                        new
                        {
                            Id = 6,
                            Name = "Quang Trung",
                            WardId = 7
                        },
                        new
                        {
                            Id = 7,
                            Name = "An Phu",
                            WardId = 8
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dinh Bo Linh",
                            WardId = 9
                        },
                        new
                        {
                            Id = 9,
                            Name = "Phan Dinh Phung",
                            WardId = 10
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hang Dao",
                            WardId = 11
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hoang Dieu",
                            WardId = 12
                        },
                        new
                        {
                            Id = 12,
                            Name = "Le Duan",
                            WardId = 13
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chua Boc",
                            WardId = 14
                        },
                        new
                        {
                            Id = 14,
                            Name = "Nguyen Van Huyen",
                            WardId = 15
                        },
                        new
                        {
                            Id = 15,
                            Name = "Thanh Nien",
                            WardId = 16
                        },
                        new
                        {
                            Id = 16,
                            Name = "Nguyen Khoai",
                            WardId = 17
                        },
                        new
                        {
                            Id = 17,
                            Name = "Pham Van Dong",
                            WardId = 18
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ben Nghe",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nguyen Hue",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ward 10",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ward 4",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tan Dinh",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Da Kao",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Thao Dien",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "An Phu",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Binh Thanh",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Phu Nhuan",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hoan Kiem",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ba Dinh",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hai Ba Trung",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Dong Da",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 15,
                            Name = "Cau Giay",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 16,
                            Name = "Tay Ho",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 17,
                            Name = "Long Bien",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 18,
                            Name = "Nam Tu Liem",
                            ProvinceId = 2
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Air Conditioning",
                            Name = "AC"
                        },
                        new
                        {
                            Id = 2,
                            Description = "High-speed Internet",
                            Name = "WiFi"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Parking Space",
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Private Balcony",
                            Name = "Balcony"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<string>("LastMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastSentAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RenterId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000000m,
                            ContractId = 1,
                            PaidAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1652),
                            PaymentMethod = "Momo",
                            Status = "completed",
                            TransactionId = 1
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.PromotionPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("promotionPackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1863),
                            Description = "Basic promotion package for property listings.",
                            DurationInDays = 30,
                            IsActive = true,
                            Level = 1,
                            Name = "Basic Promotion",
                            Price = 1000000m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1869),
                            Description = "Premium promotion package for property listings.",
                            DurationInDays = 60,
                            IsActive = true,
                            Level = 2,
                            Name = "Premium Promotion",
                            Price = 2000000m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1871),
                            Description = "Ultimate promotion package for property listings.",
                            DurationInDays = 90,
                            IsActive = true,
                            Level = 3,
                            Name = "Ultimate Promotion",
                            Price = 3000000m
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000000m,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1750),
                            Description = "Deposit for apartment in District 1",
                            TransactionType = "deposit",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPromoted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("LandlordId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Area = 50.5m,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1404),
                            Description = "Modern apartment with 2 bedrooms in the heart of HCMC.",
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7769,106.7009",
                            Price = 5000000m,
                            Status = "available",
                            Title = "2BR Apartment in District 1",
                            Type = "apartment",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Area = 20.0m,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1407),
                            Description = "Cozy shared room for students.",
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.8505,106.6737",
                            Price = 2000000m,
                            Status = "available",
                            Title = "Shared Room in Go Vap",
                            Type = "room",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Area = 80.0m,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 7, 2, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1413),
                            Description = "Spacious house with 3 bedrooms.",
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7982,106.6582",
                            Price = 8000000m,
                            Status = "available",
                            Title = "3BR House in Tan Binh",
                            Type = "house",
                            ViewsCount = 0
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyAmenity", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 3
                        },
                        new
                        {
                            PropertyId = 2,
                            AmenityId = 2
                        },
                        new
                        {
                            PropertyId = 3,
                            AmenityId = 1
                        },
                        new
                        {
                            PropertyId = 3,
                            AmenityId = 4
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 1,
                            Url = "https://example.com/apartment1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsPrimary = false,
                            Order = 2,
                            PropertyId = 1,
                            Url = "https://example.com/apartment2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 2,
                            Url = "https://example.com/room1.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 3,
                            Url = "https://example.com/house1.jpg"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("PropertyPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1588),
                            LandlordId = 2,
                            PropertyId = 1,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1589),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1594),
                            LandlordId = 2,
                            PropertyId = 2,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1595),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 2, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1597),
                            LandlordId = 2,
                            PropertyId = 3,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 7, 2, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1598),
                            VerifiedBy = 1
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPromotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 8, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2059),
                            PackageId = 1,
                            PropertyId = 1,
                            StartDate = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2059)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 8, 2, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2061),
                            PackageId = 2,
                            PropertyId = 2,
                            StartDate = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2061)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2025, 9, 30, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2063),
                            PackageId = 3,
                            PropertyId = 3,
                            StartDate = new DateTime(2025, 7, 2, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2063)
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.RentalContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ContractDurationMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyPostId")
                        .HasColumnType("int");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyPostId")
                        .IsUnique();

                    b.HasIndex("RenterId");

                    b.ToTable("RentalContracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfirmedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2114),
                            ContactInfo = "renter@example.com | 03345678910",
                            ContractDurationMonths = 12,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2114),
                            DepositAmount = 2000000m,
                            LandlordId = 2,
                            MonthlyRent = 5000000m,
                            PaymentMethod = "Bank Transfer",
                            PropertyPostId = 1,
                            RenterId = 3,
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "renter2@example.com | 0322222222",
                            ContractDurationMonths = 6,
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(2133),
                            DepositAmount = 1500000m,
                            LandlordId = 2,
                            MonthlyRent = 2000000m,
                            PaymentMethod = "Momo",
                            PropertyPostId = 2,
                            RenterId = 4,
                            StartDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RenterId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating_Range", "Rating BETWEEN 1 AND 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great location and clean apartment!",
                            CreatedAt = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1815),
                            IsApproved = true,
                            PropertyId = 1,
                            Rating = 4,
                            RenterId = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("renter");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8efd2ec-2c86-437b-9bd8-64326d41bf01",
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 595, DateTimeKind.Local).AddTicks(5485),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Admin User",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELFzEDWgpS5QAOjtzw1Byrclfs+a0a8HrhGaKbNJSHBQHMvPNM71OA4/wvqwbsqX5w==",
                            PhoneNumber = "+841234567891",
                            PhoneNumberConfirmed = true,
                            Role = "admin",
                            SecurityStamp = "c554cd6a-552f-48e9-8bb8-4413c878eda8",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41e180c1-c449-45fc-9f3f-d5b076406fc0",
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 648, DateTimeKind.Local).AddTicks(7121),
                            Email = "landlord@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Landlord User",
                            NormalizedEmail = "LANDLORD@EXAMPLE.COM",
                            NormalizedUserName = "LANDLORD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHI3/5rHuJDxUMUkXlW8hPrJaep5qmfkqx3TTY8bZ/+BMmi1zpiEFfnWroBncOApZg==",
                            PhoneNumber = "+842345678910",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://th.bing.com/th/id/R.63d31ac6257157ef079f31bb32e342df?rik=63%2bkafQNo5seHg&pid=ImgRaw&r=0",
                            Role = "landlord",
                            SecurityStamp = "0e9dfa76-b9ff-474c-812d-b1e680c1555d",
                            TwoFactorEnabled = false,
                            UserName = "landlord@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eedb4461-2dc6-4073-a5c4-f24c2327887d",
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 704, DateTimeKind.Local).AddTicks(5105),
                            Email = "renter@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Renter User",
                            NormalizedEmail = "RENTER@EXAMPLE.COM",
                            NormalizedUserName = "RENTER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEy4/yfLE3owhf7Kiyx7C6isC5c8Olc2p/kmp8RjNQJqx5lkco+eecuNbeq3tk+mg==",
                            PhoneNumber = "+843345678910",
                            PhoneNumberConfirmed = true,
                            Role = "renter",
                            SecurityStamp = "b10d3961-fd82-4a74-8ad9-4ed5c258ed45",
                            TwoFactorEnabled = false,
                            UserName = "renter@example.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fac98c05-0950-420d-a861-723e655c78c6",
                            CreatedAt = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(47),
                            Email = "renter2@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Renter User 2",
                            NormalizedEmail = "RENTER2@EXAMPLE.COM",
                            NormalizedUserName = "RENTER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJBwi/MnQCalT7RdNQHhVQVDoRANdOP9Qpfg9MT2eYCHPbIDW8XdIOKSsKoIXY1X5Q==",
                            PhoneNumberConfirmed = false,
                            Role = "renter",
                            SecurityStamp = "d6871b65-2a55-46c3-9af3-762b417bf12a",
                            TwoFactorEnabled = false,
                            UserName = "renter2@example.com"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserFavoriteProperty", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId", "PropertyId");

                    b.ToTable("UserFavoriteProperties");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            UserId = 1,
                            PropertyId = 2
                        },
                        new
                        {
                            UserId = 3,
                            PropertyId = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PriceRangeMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceRangeMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amenities = "WiFi,Parking",
                            CreatedAt = new DateTime(2025, 7, 4, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1163),
                            Location = "District 1",
                            PriceRangeMax = 6000000m,
                            PriceRangeMin = 3000000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Amenities = "WiFi",
                            CreatedAt = new DateTime(2025, 7, 2, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1170),
                            Location = "Go Vap",
                            PriceRangeMax = 3000000m,
                            PriceRangeMin = 1500000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amenities = "AC",
                            CreatedAt = new DateTime(2025, 7, 3, 1, 45, 57, 761, DateTimeKind.Local).AddTicks(1173),
                            Location = "Tan Binh",
                            PriceRangeMax = 4000000m,
                            PriceRangeMin = 2000000m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Address", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId");

                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Ward", "Ward")
                        .WithMany("Addresses")
                        .HasForeignKey("WardId");

                    b.Navigation("Province");

                    b.Navigation("Street");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Street", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Ward", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Conversation", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany("ConversationsAsLandlord")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Conversations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany("ConversationsAsRenter")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Message", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Messages.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Payment", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Payment.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Transaction", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.Property", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Address", "Address")
                        .WithOne("Property")
                        .HasForeignKey("RealEstateManagement.Data.Entity.PropertyEntity.Property", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyAmenity", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyImage", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Posts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPromotion", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Payment.PromotionPackage", "PromotionPackage")
                        .WithMany("PropertyPromotions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("PropertyPromotions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionPackage");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.RentalContract", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", "PropertyPost")
                        .WithOne("RentalContract")
                        .HasForeignKey("RealEstateManagement.Data.Entity.RentalContract", "PropertyPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Landlord");

                    b.Navigation("PropertyPost");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Review", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany("Reviews")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserFavoriteProperty", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserPreference", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Address", b =>
                {
                    b.Navigation("Property")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Province", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Ward", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Amenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.PromotionPackage", b =>
                {
                    b.Navigation("PropertyPromotions");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Transaction", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.Property", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("FavoritedByUsers");

                    b.Navigation("Images");

                    b.Navigation("Posts");

                    b.Navigation("PropertyAmenities");

                    b.Navigation("PropertyPromotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", b =>
                {
                    b.Navigation("RentalContract")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.ApplicationUser", b =>
                {
                    b.Navigation("ConversationsAsLandlord");

                    b.Navigation("ConversationsAsRenter");

                    b.Navigation("FavoriteProperties");

                    b.Navigation("MessagesSent");

                    b.Navigation("Preferences");

                    b.Navigation("Properties");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}

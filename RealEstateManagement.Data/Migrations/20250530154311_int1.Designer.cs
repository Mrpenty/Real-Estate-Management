// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RealEstateManagement.Data.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20250530154311_int1")]
    partial class int1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Landlord",
                            NormalizedName = "LANDLORD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Renter",
                            NormalizedName = "RENTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Air Conditioning",
                            Name = "AC"
                        },
                        new
                        {
                            Id = 2,
                            Description = "High-speed Internet",
                            Name = "WiFi"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Parking Space",
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Private Balcony",
                            Name = "Balcony"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("renter");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c831075a-1239-470a-baea-e0c71b8f7730",
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 566, DateTimeKind.Local).AddTicks(2764),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Admin User",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENI++9SB4WTS3iuI/113fukCvNbo63oq35FYmZWJY+Z6n3j0UCCzoud0RF3GPFcYBw==",
                            PhoneNumberConfirmed = false,
                            Role = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e26179f-822a-4412-9404-d600d29b60e4",
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 635, DateTimeKind.Local).AddTicks(4859),
                            Email = "landlord@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Landlord User",
                            NormalizedEmail = "LANDLORD@EXAMPLE.COM",
                            NormalizedUserName = "LANDLORD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOB33vjGtF9wm2c9TED/hMAf4QbrsZvKf+QKTldepbYVbUd6bf/WCx+DsBDcGIKo1w==",
                            PhoneNumberConfirmed = false,
                            Role = "landlord",
                            TwoFactorEnabled = false,
                            UserName = "landlord@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b640b00-45b9-43ab-8859-b393f74d7741",
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 705, DateTimeKind.Local).AddTicks(90),
                            Email = "renter@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Renter User",
                            NormalizedEmail = "RENTER@EXAMPLE.COM",
                            NormalizedUserName = "RENTER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENlqxu8eNOawBD1TaWRE8RLoDQE/xM2Raklx2tQHoTsy4bN4AT6Ed0Z1G7SQr675RA==",
                            PhoneNumberConfirmed = false,
                            Role = "renter",
                            TwoFactorEnabled = false,
                            UserName = "renter@example.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "016a6991-48e4-4bb8-80b1-34499b48b17f",
                            CreatedAt = new DateTime(2025, 5, 29, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(8569),
                            Email = "renter2@example.com",
                            EmailConfirmed = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Renter User 2",
                            NormalizedEmail = "RENTER2@EXAMPLE.COM",
                            NormalizedUserName = "RENTER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBnEBcua8hnhYiQTxdNr/ZUs0iqxpLYXeaXctzAtu5TJcHrFxSAGieVX+Ndg9mIWhQ==",
                            PhoneNumberConfirmed = false,
                            Role = "renter",
                            TwoFactorEnabled = false,
                            UserName = "renter2@example.com"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DepositStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RenterId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3389),
                            DepositStatus = "paid",
                            EndDate = new DateTime(2025, 6, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3383),
                            Message = "Interested in renting the apartment.",
                            PropertyId = 1,
                            RenterId = 3,
                            StartDate = new DateTime(2025, 5, 31, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3374),
                            Status = "approved"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3548),
                            Deposit = 5000000m,
                            EndDate = new DateTime(2025, 6, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3545),
                            RentAmount = 5000000m,
                            StartDate = new DateTime(2025, 5, 31, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3544),
                            Status = "active"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.MessageThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<bool>("NotificationSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("RenterId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ThreadId", "SentAt");

                    b.ToTable("MessageThreads", t =>
                        {
                            t.HasCheckConstraint("CK_DifferentParticipants", "RenterId != LandlordId");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Is the apartment still available?",
                            IsRead = false,
                            LandlordId = 2,
                            NotificationSent = false,
                            RenterId = 3,
                            SenderId = 3,
                            SentAt = new DateTime(2025, 5, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3684),
                            ThreadId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Yes, it’s available. Would you like to book?",
                            IsRead = false,
                            LandlordId = 2,
                            NotificationSent = false,
                            RenterId = 3,
                            SenderId = 2,
                            SentAt = new DateTime(2025, 5, 30, 22, 48, 8, 773, DateTimeKind.Local).AddTicks(3686),
                            ThreadId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Can I see the house in Tan Binh?",
                            IsRead = false,
                            LandlordId = 2,
                            NotificationSent = false,
                            RenterId = 4,
                            SenderId = 4,
                            SentAt = new DateTime(2025, 5, 30, 23, 43, 8, 773, DateTimeKind.Local).AddTicks(3687),
                            ThreadId = 2
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000000m,
                            ContractId = 1,
                            PaidAt = new DateTime(2025, 5, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3587),
                            PaymentMethod = "Momo",
                            Status = "completed",
                            TransactionId = 1
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPromoted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Nguyen Hue, District 1, HCMC",
                            Area = 50.5m,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9560),
                            Description = "Modern apartment with 2 bedrooms in the heart of HCMC.",
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7769,106.7009",
                            MaxPrice = 6000000m,
                            MinPrice = 4000000m,
                            Price = 5000000m,
                            Status = "available",
                            Title = "2BR Apartment in District 1",
                            Type = "apartment",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Le Van Tho, Go Vap, HCMC",
                            Area = 20.0m,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 5, 29, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9565),
                            Description = "Cozy shared room for students.",
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.8505,106.6737",
                            MaxPrice = 2500000m,
                            MinPrice = 1500000m,
                            Price = 2000000m,
                            Status = "available",
                            Title = "Shared Room in Go Vap",
                            Type = "room",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Ly Thuong Kiet, Tan Binh, HCMC",
                            Area = 80.0m,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9568),
                            Description = "Spacious house with 3 bedrooms.",
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7982,106.6582",
                            MaxPrice = 9000000m,
                            MinPrice = 7000000m,
                            Price = 8000000m,
                            Status = "available",
                            Title = "3BR House in Tan Binh",
                            Type = "house",
                            ViewsCount = 0
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyAmenity", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 3
                        },
                        new
                        {
                            PropertyId = 2,
                            AmenityId = 2
                        },
                        new
                        {
                            PropertyId = 3,
                            AmenityId = 1
                        },
                        new
                        {
                            PropertyId = 3,
                            AmenityId = 4
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 1,
                            Url = "https://example.com/apartment1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsPrimary = false,
                            Order = 2,
                            PropertyId = 1,
                            Url = "https://example.com/apartment2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 2,
                            Url = "https://example.com/room1.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 3,
                            Url = "https://example.com/house1.jpg"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("PropertyPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9717),
                            LandlordId = 2,
                            PropertyId = 1,
                            Status = "approved",
                            VerifiedAt = new DateTime(2025, 5, 30, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9718),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 29, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9723),
                            LandlordId = 2,
                            PropertyId = 2,
                            Status = "approved",
                            VerifiedAt = new DateTime(2025, 5, 29, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9724),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9809),
                            LandlordId = 2,
                            PropertyId = 3,
                            Status = "approved",
                            VerifiedAt = new DateTime(2025, 5, 28, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9809),
                            VerifiedBy = 1
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RenterId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating_Range", "Rating BETWEEN 1 AND 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great location and clean apartment!",
                            CreatedAt = new DateTime(2025, 5, 29, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3656),
                            IsApproved = true,
                            PropertyId = 1,
                            Rating = 4,
                            RenterId = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000000m,
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 773, DateTimeKind.Local).AddTicks(3623),
                            Description = "Deposit for apartment in District 1",
                            TransactionType = "deposit",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PriceRangeMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceRangeMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amenities = "WiFi,Parking",
                            CreatedAt = new DateTime(2025, 5, 30, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9360),
                            Location = "District 1",
                            PriceRangeMax = 6000000m,
                            PriceRangeMin = 3000000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Amenities = "WiFi",
                            CreatedAt = new DateTime(2025, 5, 28, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9364),
                            Location = "Go Vap",
                            PriceRangeMax = 3000000m,
                            PriceRangeMin = 1500000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amenities = "AC",
                            CreatedAt = new DateTime(2025, 5, 29, 22, 43, 8, 772, DateTimeKind.Local).AddTicks(9366),
                            Location = "Tan Binh",
                            PriceRangeMax = 4000000m,
                            PriceRangeMin = 2000000m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.UserPreferenceFavoriteProperties", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("UserPreferenceId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPreferenceFavoriteProperties", (string)null);

                    b.HasData(
                        new
                        {
                            UserPreferenceId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            UserPreferenceId = 1,
                            PropertyId = 2
                        },
                        new
                        {
                            UserPreferenceId = 3,
                            PropertyId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Booking", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Renter")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Contract", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Booking", "Booking")
                        .WithOne("Contract")
                        .HasForeignKey("RealEstateManagement.Data.Entity.Contract", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.MessageThread", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Landlord")
                        .WithMany("MessagesAsLandlord")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Renter")
                        .WithMany("MessagesAsRenter")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("Renter");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contract");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Property", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Landlord")
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyAmenity", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyImage", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyPost", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.Property", "Property")
                        .WithMany("Posts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Review", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "Renter")
                        .WithMany("Reviews")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Transaction", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.UserPreference", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.ApplicationUser", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.UserPreferenceFavoriteProperties", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.UserPreference", "UserPreference")
                        .WithMany()
                        .HasForeignKey("UserPreferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("UserPreference");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Amenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MessagesAsLandlord");

                    b.Navigation("MessagesAsRenter");

                    b.Navigation("Preferences");

                    b.Navigation("Properties");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Booking", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Contract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Property", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("Posts");

                    b.Navigation("PropertyAmenities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Transaction", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RealEstateManagement.Data.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    partial class RentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Landlord",
                            NormalizedName = "LANDLORD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Renter",
                            NormalizedName = "RENTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.HasIndex("WardId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DetailedAddress = "123",
                            PropertyId = 1,
                            ProvinceId = 1,
                            StreetId = 1,
                            WardId = 2
                        },
                        new
                        {
                            Id = 2,
                            DetailedAddress = "456",
                            PropertyId = 2,
                            ProvinceId = 1,
                            StreetId = 2,
                            WardId = 3
                        },
                        new
                        {
                            Id = 3,
                            DetailedAddress = "789",
                            PropertyId = 3,
                            ProvinceId = 1,
                            StreetId = 3,
                            WardId = 4
                        },
                        new
                        {
                            Id = 4,
                            DetailedAddress = "101",
                            PropertyId = 4,
                            ProvinceId = 1,
                            StreetId = 4,
                            WardId = 5
                        },
                        new
                        {
                            Id = 5,
                            DetailedAddress = "202",
                            PropertyId = 5,
                            ProvinceId = 1,
                            StreetId = 5,
                            WardId = 6
                        },
                        new
                        {
                            Id = 6,
                            DetailedAddress = "303",
                            PropertyId = 6,
                            ProvinceId = 1,
                            StreetId = 6,
                            WardId = 7
                        },
                        new
                        {
                            Id = 7,
                            DetailedAddress = "404",
                            PropertyId = 7,
                            ProvinceId = 1,
                            StreetId = 7,
                            WardId = 8
                        },
                        new
                        {
                            Id = 8,
                            DetailedAddress = "505",
                            PropertyId = 8,
                            ProvinceId = 1,
                            StreetId = 8,
                            WardId = 9
                        },
                        new
                        {
                            Id = 9,
                            DetailedAddress = "606",
                            PropertyId = 9,
                            ProvinceId = 1,
                            StreetId = 9,
                            WardId = 10
                        },
                        new
                        {
                            Id = 10,
                            DetailedAddress = "707",
                            PropertyId = 10,
                            ProvinceId = 2,
                            StreetId = 10,
                            WardId = 11
                        },
                        new
                        {
                            Id = 11,
                            DetailedAddress = "808",
                            PropertyId = 11,
                            ProvinceId = 2,
                            StreetId = 11,
                            WardId = 12
                        },
                        new
                        {
                            Id = 12,
                            DetailedAddress = "909",
                            PropertyId = 12,
                            ProvinceId = 2,
                            StreetId = 12,
                            WardId = 13
                        },
                        new
                        {
                            Id = 13,
                            DetailedAddress = "111",
                            PropertyId = 13,
                            ProvinceId = 2,
                            StreetId = 13,
                            WardId = 14
                        },
                        new
                        {
                            Id = 14,
                            DetailedAddress = "222",
                            PropertyId = 14,
                            ProvinceId = 2,
                            StreetId = 14,
                            WardId = 15
                        },
                        new
                        {
                            Id = 15,
                            DetailedAddress = "333",
                            PropertyId = 15,
                            ProvinceId = 2,
                            StreetId = 15,
                            WardId = 16
                        },
                        new
                        {
                            Id = 16,
                            DetailedAddress = "444",
                            PropertyId = 16,
                            ProvinceId = 2,
                            StreetId = 16,
                            WardId = 17
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ho Chi Minh City"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hanoi"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WardId");

                    b.ToTable("Streets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nguyen Hue",
                            WardId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Le Van Tho",
                            WardId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ly Thuong Kiet",
                            WardId = 4
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hai Ba Trung",
                            WardId = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pasteur",
                            WardId = 6
                        },
                        new
                        {
                            Id = 6,
                            Name = "Quang Trung",
                            WardId = 7
                        },
                        new
                        {
                            Id = 7,
                            Name = "An Phu",
                            WardId = 8
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dinh Bo Linh",
                            WardId = 9
                        },
                        new
                        {
                            Id = 9,
                            Name = "Phan Dinh Phung",
                            WardId = 10
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hang Dao",
                            WardId = 11
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hoang Dieu",
                            WardId = 12
                        },
                        new
                        {
                            Id = 12,
                            Name = "Le Duan",
                            WardId = 13
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chua Boc",
                            WardId = 14
                        },
                        new
                        {
                            Id = 14,
                            Name = "Nguyen Van Huyen",
                            WardId = 15
                        },
                        new
                        {
                            Id = 15,
                            Name = "Thanh Nien",
                            WardId = 16
                        },
                        new
                        {
                            Id = 16,
                            Name = "Nguyen Khoai",
                            WardId = 17
                        },
                        new
                        {
                            Id = 17,
                            Name = "Pham Van Dong",
                            WardId = 18
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ben Nghe",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nguyen Hue",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ward 10",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ward 4",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tan Dinh",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Da Kao",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Thao Dien",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "An Phu",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Binh Thanh",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Phu Nhuan",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hoan Kiem",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ba Dinh",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hai Ba Trung",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Dong Da",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 15,
                            Name = "Cau Giay",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 16,
                            Name = "Tay Ho",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 17,
                            Name = "Long Bien",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 18,
                            Name = "Nam Tu Liem",
                            ProvinceId = 2
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Air Conditioning",
                            Name = "AC"
                        },
                        new
                        {
                            Id = 2,
                            Description = "High-speed Internet",
                            Name = "WiFi"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Parking Space",
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Private Balcony",
                            Name = "Balcony"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<string>("LastMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastSentAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RenterId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "Admin",
                            Content = "Dưới đây là 5 điều bạn nên cân nhắc khi thuê nhà trọ...",
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "5-luu-y-khi-thue-nha-tro-tai-tphcm",
                            Summary = "Các lưu ý quan trọng khi thuê trọ tại TP.HCM",
                            Title = "5 lưu ý khi thuê nhà trọ tại TP.HCM"
                        },
                        new
                        {
                            Id = 2,
                            AuthorName = "AI Bot",
                            Content = "Giá thuê nhà ở hai thành phố lớn có sự chênh lệch như thế nào...",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "so-sanh-gia-thue-nha-giua-tphcm-va-ha-noi",
                            Source = "Vietnamnet.vn",
                            Summary = "Giá thuê nhà giữa TP.HCM và Hà Nội có gì khác biệt?",
                            Title = "So sánh giá thuê nhà giữa TP.HCM và Hà Nội"
                        },
                        new
                        {
                            Id = 3,
                            AuthorName = "Nguyen Van A",
                            Content = "Một số mẹo giúp bạn chọn khu trọ an toàn và tiện nghi tại Hà Nội...",
                            CreatedAt = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "meo-chon-khu-tro-an-toan-tai-ha-noi",
                            Source = "TuoiTre.vn",
                            Summary = "Hướng dẫn chọn khu trọ an toàn tại Hà Nội",
                            Title = "Mẹo chọn khu trọ an toàn tại Hà Nội"
                        },
                        new
                        {
                            Id = 4,
                            AuthorName = "Tran Thi B",
                            Content = "Các xu hướng mới trong thị trường thuê nhà tại Việt Nam năm 2025...",
                            CreatedAt = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "xu-huong-thue-nha-nam-2025",
                            Source = "VTV.vn",
                            Summary = "Tìm hiểu xu hướng thuê nhà trong năm nay",
                            Title = "Xu hướng thuê nhà năm 2025"
                        },
                        new
                        {
                            Id = 5,
                            AuthorName = "Le Van C",
                            Content = "Những điều cần biết khi ký hợp đồng thuê nhà để tránh rủi ro...",
                            CreatedAt = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "huong-dan-ky-hop-dong-thue-nha",
                            Summary = "Hướng dẫn chi tiết về ký hợp đồng thuê nhà",
                            Title = "Hướng dẫn ký hợp đồng thuê nhà"
                        },
                        new
                        {
                            Id = 6,
                            AuthorName = "Pham Thi D",
                            Content = "Thuê nhà dài hạn mang lại nhiều lợi ích cho người thuê và chủ nhà...",
                            CreatedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "loi-ich-cua-viec-thue-nha-dai-han",
                            Source = "ThanhNien.vn",
                            Summary = "Tìm hiểu lợi ích khi thuê nhà dài hạn",
                            Title = "Lợi ích của việc thuê nhà dài hạn"
                        },
                        new
                        {
                            Id = 7,
                            AuthorName = "Hoang Van E",
                            Content = "Danh sách các khu trọ giá rẻ và chất lượng tại Đà Nẵng năm 2025...",
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublished = false,
                            PublishedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "top-5-khu-tro-gia-re-tai-da-nang",
                            Source = "NguoiLaoDong.vn",
                            Summary = "Khám phá 5 khu trọ giá rẻ tại Đà Nẵng",
                            Title = "Top 5 khu trọ giá rẻ tại Đà Nẵng"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.NewsImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/uploads/news/news1-img1.jpg",
                            IsPrimary = false,
                            NewsId = 1,
                            Order = 0
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/uploads/news/news2-img1.jpg",
                            IsPrimary = false,
                            NewsId = 2,
                            Order = 0
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Notification.ApplicationUserNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserNotifications");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.PromotionPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("promotionPackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6069),
                            Description = "Basic promotion package for property listings.",
                            DurationInDays = 30,
                            IsActive = true,
                            Level = 1,
                            Name = "Basic Promotion",
                            Price = 10000m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6071),
                            Description = "Premium promotion package for property listings.",
                            DurationInDays = 60,
                            IsActive = true,
                            Level = 2,
                            Name = "Premium Promotion",
                            Price = 400000m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6073),
                            Description = "Ultimate promotion package for property listings.",
                            DurationInDays = 90,
                            IsActive = true,
                            Level = 3,
                            Name = "Ultimate Promotion",
                            Price = 50000m
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1000000m,
                            CreatedAt = new DateTime(2025, 8, 24, 17, 34, 43, 511, DateTimeKind.Utc).AddTicks(5820),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Balance = 500000m,
                            CreatedAt = new DateTime(2025, 8, 24, 17, 34, 43, 511, DateTimeKind.Utc).AddTicks(5822),
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            Balance = 500000m,
                            CreatedAt = new DateTime(2025, 8, 24, 17, 34, 43, 511, DateTimeKind.Utc).AddTicks(5823),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CheckoutUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayOSOrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100000m,
                            CheckoutUrl = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nạp thử",
                            PayOSOrderCode = "",
                            Status = "Success",
                            Type = "Deposit",
                            WalletId = 1
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<bool>("IsPromoted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Area = 50.5m,
                            Bathrooms = 0,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5118),
                            Description = "Modern apartment with 2 bedrooms in the heart of HCMC.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7769,106.7009",
                            Price = 5000000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "2BR Apartment in District 1",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Area = 20.0m,
                            Bathrooms = 0,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 8, 24, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5121),
                            Description = "Cozy shared room for students.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.8505,106.6737",
                            Price = 2000000m,
                            PropertyTypeId = 5,
                            Status = "available",
                            Title = "Shared Room in Go Vap",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Area = 80.0m,
                            Bathrooms = 0,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 8, 23, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5123),
                            Description = "Spacious house with 3 bedrooms.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7982,106.6582",
                            Price = 8000000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "3BR House in Tan Binh",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Area = 35.0m,
                            Bathrooms = 0,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 8, 22, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5126),
                            Description = "High-end studio apartment with modern amenities and city view.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 5,
                            Location = "10.7769,106.7009",
                            Price = 6500000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "Luxury Studio in District 1",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Area = 120.0m,
                            Bathrooms = 0,
                            Bedrooms = 4,
                            CreatedAt = new DateTime(2025, 8, 21, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5128),
                            Description = "Beautiful villa with garden, perfect for families.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 5,
                            Location = "10.7308,106.7267",
                            Price = 15000000m,
                            PropertyTypeId = 4,
                            Status = "available",
                            Title = "Family Villa in District 7",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Area = 15.0m,
                            Bathrooms = 0,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 8, 20, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5132),
                            Description = "Affordable dormitory for students near universities.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 6,
                            Location = "10.7829,106.6889",
                            Price = 1500000m,
                            PropertyTypeId = 5,
                            Status = "available",
                            Title = "Student Dormitory in District 3",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            Area = 150.0m,
                            Bathrooms = 0,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 8, 19, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5134),
                            Description = "Luxury penthouse with panoramic city views.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 6,
                            Location = "10.8105,106.7091",
                            Price = 25000000m,
                            PropertyTypeId = 4,
                            Status = "available",
                            Title = "Penthouse in Binh Thanh",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            Area = 45.0m,
                            Bathrooms = 0,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 8, 18, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5137),
                            Description = "Well-maintained apartment in quiet neighborhood.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 6,
                            Location = "10.7947,106.6789",
                            Price = 5500000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "Cozy Apartment in Phu Nhuan",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            Area = 60.0m,
                            Bathrooms = 0,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 8, 17, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5139),
                            Description = "Industrial-style loft with high ceilings and open space.",
                            Floors = 0,
                            IsPromoted = true,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "10.7871,106.7492",
                            Price = 7500000m,
                            PropertyTypeId = 2,
                            Status = "available",
                            Title = "Modern Loft in District 2",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            Area = 70.0m,
                            Bathrooms = 0,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 8, 16, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5141),
                            Description = "Charming traditional Vietnamese house in historic area.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "21.0285,105.8542",
                            Price = 6000000m,
                            PropertyTypeId = 2,
                            Status = "available",
                            Title = "Traditional House in Hanoi Old Quarter",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 11,
                            AddressId = 11,
                            Area = 25.0m,
                            Bathrooms = 0,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 8, 15, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5143),
                            Description = "Compact studio perfect for young professionals.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 5,
                            Location = "21.0352,105.8342",
                            Price = 3500000m,
                            PropertyTypeId = 3,
                            Status = "available",
                            Title = "Studio in Ba Dinh District",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 12,
                            AddressId = 12,
                            Area = 40.0m,
                            Bathrooms = 0,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 8, 14, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5145),
                            Description = "Furnished shared apartment with utilities included.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 5,
                            Location = "21.0122,105.8441",
                            Price = 4000000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "Shared Apartment in Hai Ba Trung",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 13,
                            AddressId = 13,
                            Area = 18.0m,
                            Bathrooms = 0,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5148),
                            Description = "Budget-friendly room for students near universities.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 5,
                            Location = "21.0188,105.8292",
                            Price = 1800000m,
                            PropertyTypeId = 2,
                            Status = "available",
                            Title = "Student Room in Dong Da",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 14,
                            AddressId = 14,
                            Area = 85.0m,
                            Bathrooms = 0,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 8, 12, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5150),
                            Description = "Spacious apartment suitable for families with children.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 6,
                            Location = "21.0367,105.7826",
                            Price = 7000000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "Family Apartment in Cau Giay",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 15,
                            AddressId = 15,
                            Area = 200.0m,
                            Bathrooms = 0,
                            Bedrooms = 4,
                            CreatedAt = new DateTime(2025, 8, 11, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5479),
                            Description = "Beautiful villa with lake view and private garden.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 6,
                            Location = "21.0811,105.8144",
                            Price = 20000000m,
                            PropertyTypeId = 3,
                            Status = "available",
                            Title = "Lakeside Villa in Tay Ho",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 16,
                            AddressId = 16,
                            Area = 55.0m,
                            Bathrooms = 0,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 8, 10, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5481),
                            Description = "Newly built condo with modern amenities and security.",
                            Floors = 0,
                            IsPromoted = false,
                            IsVerified = true,
                            LandlordId = 2,
                            Location = "21.0455,105.8952",
                            Price = 6500000m,
                            PropertyTypeId = 1,
                            Status = "available",
                            Title = "Modern Condo in Long Bien",
                            ViewsCount = 0
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyAmenity", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PropertyId = 1,
                            AmenityId = 3
                        },
                        new
                        {
                            PropertyId = 2,
                            AmenityId = 2
                        },
                        new
                        {
                            PropertyId = 3,
                            AmenityId = 1
                        },
                        new
                        {
                            PropertyId = 3,
                            AmenityId = 4
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 1,
                            Url = "https://example.com/apartment1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsPrimary = false,
                            Order = 2,
                            PropertyId = 1,
                            Url = "https://example.com/apartment2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 2,
                            Url = "https://example.com/room1.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsPrimary = true,
                            Order = 1,
                            PropertyId = 3,
                            Url = "https://example.com/house1.jpg"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("PropertyPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5648),
                            LandlordId = 2,
                            PropertyId = 1,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5650),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 24, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5653),
                            LandlordId = 2,
                            PropertyId = 2,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 24, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5654),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 23, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5656),
                            LandlordId = 2,
                            PropertyId = 3,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 23, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5657),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 22, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5668),
                            LandlordId = 5,
                            PropertyId = 4,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 22, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5673),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 21, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5674),
                            LandlordId = 5,
                            PropertyId = 5,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 21, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5675),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 20, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5676),
                            LandlordId = 6,
                            PropertyId = 6,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 20, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5677),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 19, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5678),
                            LandlordId = 6,
                            PropertyId = 7,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 19, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5679),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 8, 18, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5685),
                            LandlordId = 6,
                            PropertyId = 8,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 18, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5685),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 8, 17, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5687),
                            LandlordId = 2,
                            PropertyId = 9,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 17, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5687),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 8, 16, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5688),
                            LandlordId = 2,
                            PropertyId = 10,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 16, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5689),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 8, 15, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5691),
                            LandlordId = 5,
                            PropertyId = 11,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 15, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5691),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 8, 14, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5693),
                            LandlordId = 5,
                            PropertyId = 12,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 14, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5693),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5695),
                            LandlordId = 5,
                            PropertyId = 13,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 13, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5695),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 8, 12, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5697),
                            LandlordId = 6,
                            PropertyId = 14,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 12, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5697),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 8, 11, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5698),
                            LandlordId = 6,
                            PropertyId = 15,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 11, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5699),
                            VerifiedBy = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 8, 10, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5700),
                            LandlordId = 2,
                            PropertyId = 16,
                            Status = "Approved",
                            VerifiedAt = new DateTime(2025, 8, 10, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5701),
                            VerifiedBy = 1
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPromotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 9, 22, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6109),
                            PackageId = 1,
                            PropertyId = 3,
                            StartDate = new DateTime(2025, 8, 23, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6108)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 9, 21, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6112),
                            PackageId = 2,
                            PropertyId = 4,
                            StartDate = new DateTime(2025, 8, 22, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6111)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2025, 9, 20, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6113),
                            PackageId = 3,
                            PropertyId = 5,
                            StartDate = new DateTime(2025, 8, 21, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6113)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2025, 9, 19, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6115),
                            PackageId = 1,
                            PropertyId = 6,
                            StartDate = new DateTime(2025, 8, 20, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6114)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2025, 9, 18, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6116),
                            PackageId = 2,
                            PropertyId = 7,
                            StartDate = new DateTime(2025, 8, 19, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6116)
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2025, 9, 17, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6118),
                            PackageId = 3,
                            PropertyId = 8,
                            StartDate = new DateTime(2025, 8, 18, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6117)
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2025, 9, 16, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6120),
                            PackageId = 1,
                            PropertyId = 9,
                            StartDate = new DateTime(2025, 8, 17, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6119)
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5750),
                            Description = "Một đơn vị nhà ở độc lập nằm trong một tòa nhà chung cư.",
                            Name = "Căn hộ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5751),
                            Description = "Một tòa nhà dân cư độc lập, không chia sẻ tường với nhà khác.",
                            Name = "Nhà riêng"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5752),
                            Description = "Tòa nhà hoặc khu phức hợp chứa nhiều căn hộ hoặc nhà thuộc sở hữu cá nhân.",
                            Name = "Chung cư"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5753),
                            Description = "Nhà cao, hẹp, thường có ba tầng trở lên, nằm trong dãy nhà liền kề.",
                            Name = "Nhà phố"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5754),
                            Description = "Một ngôi nhà lớn và sang trọng, thường nằm ở khu vực ngoại ô hoặc nông thôn.",
                            Name = "Biệt thự"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(5755),
                            Description = "Một phòng nhỏ ",
                            Name = "Phòng trọ "
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.RentalContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ContractDurationMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentCycle")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDayOfMonth")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyPostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProposedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProposedContractDurationMonths")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProposedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProposedMonthlyRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProposedPaymentCycle")
                        .HasColumnType("int");

                    b.Property<int?>("ProposedPaymentDayOfMonth")
                        .HasColumnType("int");

                    b.Property<bool?>("RenterApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyPostId")
                        .IsUnique();

                    b.HasIndex("RenterId");

                    b.ToTable("RentalContracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfirmedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6197),
                            ContactInfo = "renter@example.com | 03345678910",
                            ContractDurationMonths = 12,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6195),
                            DepositAmount = 2000000m,
                            LandlordId = 2,
                            MonthlyRent = 5000000m,
                            PaymentCycle = 0,
                            PaymentDayOfMonth = 5,
                            PaymentMethod = "Bank Transfer",
                            PropertyPostId = 1,
                            RenterId = 3,
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "renter2@example.com | 0322222222",
                            ContractDurationMonths = 6,
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6200),
                            DepositAmount = 1500000m,
                            LandlordId = 2,
                            MonthlyRent = 2000000m,
                            PaymentCycle = 1,
                            PaymentDayOfMonth = 10,
                            PaymentMethod = "Momo",
                            PropertyPostId = 2,
                            RenterId = 4,
                            StartDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.ReportEntity.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResolvedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("ResolvedByUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsFlagged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("PropertyId");

                    b.HasIndex("RenterId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating_Range", "Rating BETWEEN 1 AND 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractId = 1,
                            CreatedAt = new DateTime(2025, 7, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFlagged = false,
                            IsVisible = true,
                            PropertyId = 1,
                            Rating = 5,
                            RenterId = 3,
                            ReviewText = "Căn hộ rất sạch sẽ, chủ nhà thân thiện. Sẽ giới thiệu bạn bè!"
                        },
                        new
                        {
                            Id = 2,
                            ContractId = 2,
                            CreatedAt = new DateTime(2025, 8, 5, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            IsFlagged = false,
                            IsVisible = true,
                            PropertyId = 2,
                            Rating = 4,
                            RenterId = 4,
                            ReviewText = "Giá hợp lý, vị trí thuận tiện. Chủ nhà hỗ trợ tốt."
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Reviews.ReviewReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsFlagged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.ToTable("ReviewReplies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFlagged = false,
                            IsVisible = true,
                            LandlordId = 2,
                            ReplyContent = "Cảm ơn bạn đã tin tưởng và sử dụng dịch vụ của chúng tôi!",
                            ReviewId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            IsFlagged = false,
                            IsVisible = true,
                            LandlordId = 2,
                            ReplyContent = "Cảm ơn bạn đã phản hồi tích cực. Chúc bạn luôn vui vẻ!",
                            ReviewId = 2
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CitizenIdBackImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CitizenIdExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIdFrontImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CitizenIdIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("renter");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationRejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CitizenIdBackImageUrl = "https://example.com/cccd/admin_back.jpg",
                            CitizenIdExpiryDate = new DateTime(2030, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdFrontImageUrl = "https://example.com/cccd/admin_front.jpg",
                            CitizenIdIssuedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdNumber = "01234567890",
                            ConcurrencyStamp = "864d0c2a-3fd8-4eb7-9801-9043c4133d4e",
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 148, DateTimeKind.Local).AddTicks(2278),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Admin User",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXAXnPMYiOHhVgD0JHo5hU7ggHbQgQUcrGIYBp5wC0TphLcGCLhz5GZ7dV05kyFnw==",
                            PhoneNumber = "+841234567891",
                            PhoneNumberConfirmed = true,
                            Role = "admin",
                            SecurityStamp = "4f8d9472-8265-481f-ba62-01758c53f030",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com",
                            VerificationStatus = "none"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CitizenIdBackImageUrl = "https://example.com/cccd/landlord_back.jpg",
                            CitizenIdExpiryDate = new DateTime(2031, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdFrontImageUrl = "https://example.com/cccd/landlord_front.jpg",
                            CitizenIdIssuedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdNumber = "002345678901",
                            ConcurrencyStamp = "85fc76fc-b937-4c3b-ae51-a45cbb970249",
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 238, DateTimeKind.Local).AddTicks(9931),
                            Email = "MinhTri@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Minh Trisgei",
                            NormalizedEmail = "TRI@EXAMPLE.COM",
                            NormalizedUserName = "MINHTRI",
                            PasswordHash = "AQAAAAIAAYagAAAAENubjEN6Ug9lwGttfbldJUzlCSDlXPXSthcDUVnE95vuleGyu6acAyV3vRDv6NjfOg==",
                            PhoneNumber = "+842345678910",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://th.bing.com/th/id/R.63d31ac6257157ef079f31bb32e342df?rik=63%2bkafQNo5seHg&pid=ImgRaw&r=0",
                            Role = "landlord",
                            SecurityStamp = "751a41e6-f2f9-4b45-80d4-3a4cf707da95",
                            TwoFactorEnabled = false,
                            UserName = "MinhTri",
                            VerificationStatus = "none"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            CitizenIdBackImageUrl = "https://example.com/cccd/renter_back.jpg",
                            CitizenIdExpiryDate = new DateTime(2032, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdFrontImageUrl = "https://example.com/cccd/renter_front.jpg",
                            CitizenIdIssuedDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdNumber = "003456789012",
                            ConcurrencyStamp = "8133c1b9-71cb-4c74-8527-99b5053cedd5",
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 310, DateTimeKind.Local).AddTicks(2690),
                            Email = "Khanh@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Khanh",
                            NormalizedEmail = "KHANH@EXAMPLE.COM",
                            NormalizedUserName = "KHANH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/blMcSJod1zFRMFgI89LH1jlEqkitq7g8kojGTHbveVbcjnXvv3bPX1W3utU6Wrw==",
                            PhoneNumber = "+843345678910",
                            PhoneNumberConfirmed = true,
                            Role = "renter",
                            SecurityStamp = "f9d746aa-cbe3-420e-897a-7c70059a7b8c",
                            TwoFactorEnabled = false,
                            UserName = "Khanh",
                            VerificationStatus = "none"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            CitizenIdBackImageUrl = "https://example.com/cccd/renter2_back.jpg",
                            CitizenIdExpiryDate = new DateTime(2033, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdFrontImageUrl = "https://example.com/cccd/renter2_front.jpg",
                            CitizenIdIssuedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdNumber = "004567890123",
                            ConcurrencyStamp = "2c331470-e7e3-4c43-bfe9-8329080c9e84",
                            CreatedAt = new DateTime(2025, 8, 24, 0, 34, 43, 386, DateTimeKind.Local).AddTicks(4487),
                            Email = "renter2@example.com",
                            EmailConfirmed = true,
                            IsActive = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Duongkhmt",
                            NormalizedEmail = "RENTER2@EXAMPLE.COM",
                            NormalizedUserName = "DUONGKHMT",
                            PasswordHash = "AQAAAAIAAYagAAAAEFDqEUfqzqb4FzkJwyyO98yA4nPN3TtvY55A2iJXWmar97H9Tb+cviGrdmuXYV3Vxg==",
                            PhoneNumber = "+846574837475",
                            PhoneNumberConfirmed = true,
                            Role = "renter",
                            SecurityStamp = "45d616be-e1dc-408a-8851-c4c1ad0e7228",
                            TwoFactorEnabled = false,
                            UserName = "Duongkhmt",
                            VerificationRejectReason = "Ảnh CCCD mặt sau bị mờ, thiếu ngày cấp. Vui lòng bổ sung lại!",
                            VerificationStatus = "none"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            CitizenIdBackImageUrl = "https://example.com/cccd/landlord_back.jpg",
                            CitizenIdExpiryDate = new DateTime(2031, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdFrontImageUrl = "https://example.com/cccd/landlord_front.jpg",
                            CitizenIdIssuedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdNumber = "002345678901",
                            ConcurrencyStamp = "b623fe88-5530-47b9-aaef-5788e1b41459",
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 450, DateTimeKind.Local).AddTicks(191),
                            Email = "Manh@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Manh home",
                            NormalizedEmail = "MANH@EXAMPLE.COM",
                            NormalizedUserName = "MANH",
                            PasswordHash = "AQAAAAIAAYagAAAAEH+TXGn87o5izh2buJDTYeBSrC/2gDPSulLwF2nsew+05GZiH8zJeDmkrGKB8jGTgg==",
                            PhoneNumber = "+840987654567",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://th.bing.com/th/id/R.63d31ac6257157ef079f31bb32e342df?rik=63%2bkafQNo5seHg&pid=ImgRaw&r=0",
                            Role = "landlord",
                            SecurityStamp = "c0ff79b2-0df2-4508-975d-ca8a1285aa16",
                            TwoFactorEnabled = false,
                            UserName = "Manh",
                            VerificationStatus = "none"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            CitizenIdBackImageUrl = "https://example.com/cccd/landlord_back.jpg",
                            CitizenIdExpiryDate = new DateTime(2031, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdFrontImageUrl = "https://example.com/cccd/landlord_front.jpg",
                            CitizenIdIssuedDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenIdNumber = "002345678901",
                            ConcurrencyStamp = "2991b0a4-9d69-42db-a73e-4c3107407ab4",
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(2635),
                            Email = "Tadong@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "DongAUTO",
                            NormalizedEmail = "TADONG@EXAMPLE.COM",
                            NormalizedUserName = "DONGVT",
                            PasswordHash = "AQAAAAIAAYagAAAAEC87LRzQPmO8WWyzIm6Lt49mys9MuwmiZNr1DfWLF3mFSlYHg+F5WtWnzjUduYcykQ==",
                            PhoneNumber = "+843541234567",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://th.bing.com/th/id/R.63d31ac6257157ef079f31bb32e342df?rik=63%2bkafQNo5seHg&pid=ImgRaw&r=0",
                            Role = "landlord",
                            SecurityStamp = "54a80d34-a9f8-4a99-a36b-10d355fe4322",
                            TwoFactorEnabled = false,
                            UserName = "DongVT",
                            VerificationStatus = "none"
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.InterestedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InterestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("LandlordConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LandlordReplyAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("RenterConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RenterReplyAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RenterId");

                    b.HasIndex("Status");

                    b.HasIndex("PropertyId", "RenterId")
                        .IsUnique();

                    b.ToTable("InterestedProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InterestedAt = new DateTime(2025, 8, 24, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(6605),
                            LandlordConfirmed = false,
                            PropertyId = 1,
                            RenterConfirmed = false,
                            RenterId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            InterestedAt = new DateTime(2025, 8, 24, 12, 34, 43, 511, DateTimeKind.Local).AddTicks(6608),
                            LandlordConfirmed = false,
                            PropertyId = 2,
                            RenterConfirmed = false,
                            RenterId = 4,
                            RenterReplyAt = new DateTime(2025, 8, 24, 14, 34, 43, 511, DateTimeKind.Local).AddTicks(6609),
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            InterestedAt = new DateTime(2025, 8, 24, 19, 34, 43, 511, DateTimeKind.Local).AddTicks(6611),
                            LandlordConfirmed = false,
                            PropertyId = 3,
                            RenterConfirmed = false,
                            RenterId = 1,
                            RenterReplyAt = new DateTime(2025, 8, 24, 21, 34, 43, 511, DateTimeKind.Local).AddTicks(6611),
                            Status = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserFavoriteProperty", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId", "PropertyId");

                    b.ToTable("UserFavoriteProperties");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            UserId = 1,
                            PropertyId = 2
                        },
                        new
                        {
                            UserId = 3,
                            PropertyId = 3
                        });
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PriceRangeMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceRangeMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amenities = "WiFi,Parking",
                            CreatedAt = new DateTime(2025, 8, 25, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(4519),
                            Location = "District 1",
                            PriceRangeMax = 6000000m,
                            PriceRangeMin = 3000000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Amenities = "WiFi",
                            CreatedAt = new DateTime(2025, 8, 23, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(4600),
                            Location = "Go Vap",
                            PriceRangeMax = 3000000m,
                            PriceRangeMin = 1500000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Amenities = "AC",
                            CreatedAt = new DateTime(2025, 8, 24, 0, 34, 43, 511, DateTimeKind.Local).AddTicks(4621),
                            Location = "Tan Binh",
                            PriceRangeMax = 4000000m,
                            PriceRangeMin = 2000000m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Address", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId");

                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Ward", "Ward")
                        .WithMany("Addresses")
                        .HasForeignKey("WardId");

                    b.Navigation("Province");

                    b.Navigation("Street");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Street", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Ward", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Conversation", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany("ConversationsAsLandlord")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Conversations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany("ConversationsAsRenter")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Message", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Messages.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.NewsImage", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Notification.ApplicationUserNotification", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Notification.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Wallet", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("RealEstateManagement.Data.Entity.Payment.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.WalletTransaction", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Payment.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.Property", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.AddressEnity.Address", "Address")
                        .WithOne("Property")
                        .HasForeignKey("RealEstateManagement.Data.Entity.PropertyEntity.Property", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Landlord");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyAmenity", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyImage", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Posts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPromotion", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.Payment.PromotionPackage", "PromotionPackage")
                        .WithMany("PropertyPromotions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("PropertyPromotions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionPackage");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.RentalContract", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", "PropertyPost")
                        .WithOne("RentalContract")
                        .HasForeignKey("RealEstateManagement.Data.Entity.RentalContract", "PropertyPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Landlord");

                    b.Navigation("PropertyPost");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.ReportEntity.Report", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "ReportedByUser")
                        .WithMany("ReportsCreated")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "ResolvedByUser")
                        .WithMany("ReportsResolved")
                        .HasForeignKey("ResolvedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReportedByUser");

                    b.Navigation("ResolvedByUser");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Reviews.Review", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RealEstateManagement.Data.Entity.RentalContract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Reviews.ReviewReply", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.Reviews.Review", "Review")
                        .WithOne("Reply")
                        .HasForeignKey("RealEstateManagement.Data.Entity.Reviews.ReviewReply", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.InterestedProperty", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserFavoriteProperty", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.PropertyEntity.Property", "Property")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.UserPreference", b =>
                {
                    b.HasOne("RealEstateManagement.Data.Entity.User.ApplicationUser", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Address", b =>
                {
                    b.Navigation("Property")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Province", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.AddressEnity.Ward", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Amenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Messages.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Notification.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.PromotionPackage", b =>
                {
                    b.Navigation("PropertyPromotions");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Payment.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.Property", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("FavoritedByUsers");

                    b.Navigation("Images");

                    b.Navigation("Posts");

                    b.Navigation("PropertyAmenities");

                    b.Navigation("PropertyPromotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyPost", b =>
                {
                    b.Navigation("RentalContract")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.PropertyEntity.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.Reviews.Review", b =>
                {
                    b.Navigation("Reply")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateManagement.Data.Entity.User.ApplicationUser", b =>
                {
                    b.Navigation("ConversationsAsLandlord");

                    b.Navigation("ConversationsAsRenter");

                    b.Navigation("FavoriteProperties");

                    b.Navigation("MessagesSent");

                    b.Navigation("Notifications");

                    b.Navigation("Preferences");

                    b.Navigation("Properties");

                    b.Navigation("ReportsCreated");

                    b.Navigation("ReportsResolved");

                    b.Navigation("Reviews");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
